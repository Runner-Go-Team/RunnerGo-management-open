// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Runner-Go-Team/RunnerGo-management-open/internal/pkg/dal/model"
)

func newUIPlanReport(db *gorm.DB, opts ...gen.DOOption) uIPlanReport {
	_uIPlanReport := uIPlanReport{}

	_uIPlanReport.uIPlanReportDo.UseDB(db, opts...)
	_uIPlanReport.uIPlanReportDo.UseModel(&model.UIPlanReport{})

	tableName := _uIPlanReport.uIPlanReportDo.TableName()
	_uIPlanReport.ALL = field.NewAsterisk(tableName)
	_uIPlanReport.ID = field.NewInt64(tableName, "id")
	_uIPlanReport.ReportID = field.NewString(tableName, "report_id")
	_uIPlanReport.ReportName = field.NewString(tableName, "report_name")
	_uIPlanReport.PlanID = field.NewString(tableName, "plan_id")
	_uIPlanReport.PlanName = field.NewString(tableName, "plan_name")
	_uIPlanReport.TeamID = field.NewString(tableName, "team_id")
	_uIPlanReport.RankID = field.NewInt64(tableName, "rank_id")
	_uIPlanReport.TaskType = field.NewInt32(tableName, "task_type")
	_uIPlanReport.SceneRunOrder = field.NewInt32(tableName, "scene_run_order")
	_uIPlanReport.RunDurationTime = field.NewInt64(tableName, "run_duration_time")
	_uIPlanReport.Status = field.NewInt32(tableName, "status")
	_uIPlanReport.RunUserID = field.NewString(tableName, "run_user_id")
	_uIPlanReport.Remark = field.NewString(tableName, "remark")
	_uIPlanReport.Browsers = field.NewString(tableName, "browsers")
	_uIPlanReport.UIMachineKey = field.NewString(tableName, "ui_machine_key")
	_uIPlanReport.CreatedAt = field.NewTime(tableName, "created_at")
	_uIPlanReport.UpdatedAt = field.NewTime(tableName, "updated_at")
	_uIPlanReport.DeletedAt = field.NewField(tableName, "deleted_at")

	_uIPlanReport.fillFieldMap()

	return _uIPlanReport
}

type uIPlanReport struct {
	uIPlanReportDo uIPlanReportDo

	ALL             field.Asterisk
	ID              field.Int64
	ReportID        field.String // 报告ID
	ReportName      field.String // 报告名称
	PlanID          field.String // 计划ID
	PlanName        field.String // 计划名称
	TeamID          field.String // 团队ID
	RankID          field.Int64  // 序号ID
	TaskType        field.Int32  // 任务类型
	SceneRunOrder   field.Int32  // 场景运行次序：1-顺序执行，2-同时执行
	RunDurationTime field.Int64  // 任务运行持续时长
	Status          field.Int32  // 报告状态1:进行中，2:已完成
	RunUserID       field.String // 启动人id
	Remark          field.String // 备注
	Browsers        field.String // 浏览器信息
	UIMachineKey    field.String // 指定机器key
	CreatedAt       field.Time   // 创建时间（执行时间）
	UpdatedAt       field.Time   // 更新时间
	DeletedAt       field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (u uIPlanReport) Table(newTableName string) *uIPlanReport {
	u.uIPlanReportDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u uIPlanReport) As(alias string) *uIPlanReport {
	u.uIPlanReportDo.DO = *(u.uIPlanReportDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *uIPlanReport) updateTableName(table string) *uIPlanReport {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.ReportID = field.NewString(table, "report_id")
	u.ReportName = field.NewString(table, "report_name")
	u.PlanID = field.NewString(table, "plan_id")
	u.PlanName = field.NewString(table, "plan_name")
	u.TeamID = field.NewString(table, "team_id")
	u.RankID = field.NewInt64(table, "rank_id")
	u.TaskType = field.NewInt32(table, "task_type")
	u.SceneRunOrder = field.NewInt32(table, "scene_run_order")
	u.RunDurationTime = field.NewInt64(table, "run_duration_time")
	u.Status = field.NewInt32(table, "status")
	u.RunUserID = field.NewString(table, "run_user_id")
	u.Remark = field.NewString(table, "remark")
	u.Browsers = field.NewString(table, "browsers")
	u.UIMachineKey = field.NewString(table, "ui_machine_key")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")

	u.fillFieldMap()

	return u
}

func (u *uIPlanReport) WithContext(ctx context.Context) *uIPlanReportDo {
	return u.uIPlanReportDo.WithContext(ctx)
}

func (u uIPlanReport) TableName() string { return u.uIPlanReportDo.TableName() }

func (u uIPlanReport) Alias() string { return u.uIPlanReportDo.Alias() }

func (u *uIPlanReport) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *uIPlanReport) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 18)
	u.fieldMap["id"] = u.ID
	u.fieldMap["report_id"] = u.ReportID
	u.fieldMap["report_name"] = u.ReportName
	u.fieldMap["plan_id"] = u.PlanID
	u.fieldMap["plan_name"] = u.PlanName
	u.fieldMap["team_id"] = u.TeamID
	u.fieldMap["rank_id"] = u.RankID
	u.fieldMap["task_type"] = u.TaskType
	u.fieldMap["scene_run_order"] = u.SceneRunOrder
	u.fieldMap["run_duration_time"] = u.RunDurationTime
	u.fieldMap["status"] = u.Status
	u.fieldMap["run_user_id"] = u.RunUserID
	u.fieldMap["remark"] = u.Remark
	u.fieldMap["browsers"] = u.Browsers
	u.fieldMap["ui_machine_key"] = u.UIMachineKey
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
}

func (u uIPlanReport) clone(db *gorm.DB) uIPlanReport {
	u.uIPlanReportDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u uIPlanReport) replaceDB(db *gorm.DB) uIPlanReport {
	u.uIPlanReportDo.ReplaceDB(db)
	return u
}

type uIPlanReportDo struct{ gen.DO }

func (u uIPlanReportDo) Debug() *uIPlanReportDo {
	return u.withDO(u.DO.Debug())
}

func (u uIPlanReportDo) WithContext(ctx context.Context) *uIPlanReportDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u uIPlanReportDo) ReadDB() *uIPlanReportDo {
	return u.Clauses(dbresolver.Read)
}

func (u uIPlanReportDo) WriteDB() *uIPlanReportDo {
	return u.Clauses(dbresolver.Write)
}

func (u uIPlanReportDo) Session(config *gorm.Session) *uIPlanReportDo {
	return u.withDO(u.DO.Session(config))
}

func (u uIPlanReportDo) Clauses(conds ...clause.Expression) *uIPlanReportDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u uIPlanReportDo) Returning(value interface{}, columns ...string) *uIPlanReportDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u uIPlanReportDo) Not(conds ...gen.Condition) *uIPlanReportDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u uIPlanReportDo) Or(conds ...gen.Condition) *uIPlanReportDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u uIPlanReportDo) Select(conds ...field.Expr) *uIPlanReportDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u uIPlanReportDo) Where(conds ...gen.Condition) *uIPlanReportDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u uIPlanReportDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *uIPlanReportDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u uIPlanReportDo) Order(conds ...field.Expr) *uIPlanReportDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u uIPlanReportDo) Distinct(cols ...field.Expr) *uIPlanReportDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u uIPlanReportDo) Omit(cols ...field.Expr) *uIPlanReportDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u uIPlanReportDo) Join(table schema.Tabler, on ...field.Expr) *uIPlanReportDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u uIPlanReportDo) LeftJoin(table schema.Tabler, on ...field.Expr) *uIPlanReportDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u uIPlanReportDo) RightJoin(table schema.Tabler, on ...field.Expr) *uIPlanReportDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u uIPlanReportDo) Group(cols ...field.Expr) *uIPlanReportDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u uIPlanReportDo) Having(conds ...gen.Condition) *uIPlanReportDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u uIPlanReportDo) Limit(limit int) *uIPlanReportDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u uIPlanReportDo) Offset(offset int) *uIPlanReportDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u uIPlanReportDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *uIPlanReportDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u uIPlanReportDo) Unscoped() *uIPlanReportDo {
	return u.withDO(u.DO.Unscoped())
}

func (u uIPlanReportDo) Create(values ...*model.UIPlanReport) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u uIPlanReportDo) CreateInBatches(values []*model.UIPlanReport, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u uIPlanReportDo) Save(values ...*model.UIPlanReport) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u uIPlanReportDo) First() (*model.UIPlanReport, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UIPlanReport), nil
	}
}

func (u uIPlanReportDo) Take() (*model.UIPlanReport, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UIPlanReport), nil
	}
}

func (u uIPlanReportDo) Last() (*model.UIPlanReport, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UIPlanReport), nil
	}
}

func (u uIPlanReportDo) Find() ([]*model.UIPlanReport, error) {
	result, err := u.DO.Find()
	return result.([]*model.UIPlanReport), err
}

func (u uIPlanReportDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UIPlanReport, err error) {
	buf := make([]*model.UIPlanReport, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u uIPlanReportDo) FindInBatches(result *[]*model.UIPlanReport, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u uIPlanReportDo) Attrs(attrs ...field.AssignExpr) *uIPlanReportDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u uIPlanReportDo) Assign(attrs ...field.AssignExpr) *uIPlanReportDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u uIPlanReportDo) Joins(fields ...field.RelationField) *uIPlanReportDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u uIPlanReportDo) Preload(fields ...field.RelationField) *uIPlanReportDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u uIPlanReportDo) FirstOrInit() (*model.UIPlanReport, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UIPlanReport), nil
	}
}

func (u uIPlanReportDo) FirstOrCreate() (*model.UIPlanReport, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UIPlanReport), nil
	}
}

func (u uIPlanReportDo) FindByPage(offset int, limit int) (result []*model.UIPlanReport, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u uIPlanReportDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u uIPlanReportDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u uIPlanReportDo) Delete(models ...*model.UIPlanReport) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *uIPlanReportDo) withDO(do gen.Dao) *uIPlanReportDo {
	u.DO = *do.(*gen.DO)
	return u
}
