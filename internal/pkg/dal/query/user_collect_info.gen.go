// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Runner-Go-Team/RunnerGo-management-open/internal/pkg/dal/model"
)

func newUserCollectInfo(db *gorm.DB, opts ...gen.DOOption) userCollectInfo {
	_userCollectInfo := userCollectInfo{}

	_userCollectInfo.userCollectInfoDo.UseDB(db, opts...)
	_userCollectInfo.userCollectInfoDo.UseModel(&model.UserCollectInfo{})

	tableName := _userCollectInfo.userCollectInfoDo.TableName()
	_userCollectInfo.ALL = field.NewAsterisk(tableName)
	_userCollectInfo.ID = field.NewInt64(tableName, "id")
	_userCollectInfo.UserID = field.NewString(tableName, "user_id")
	_userCollectInfo.Industry = field.NewString(tableName, "industry")
	_userCollectInfo.TeamSize = field.NewString(tableName, "team_size")
	_userCollectInfo.WorkType = field.NewString(tableName, "work_type")
	_userCollectInfo.CreatedAt = field.NewTime(tableName, "created_at")
	_userCollectInfo.UpdatedAt = field.NewTime(tableName, "updated_at")
	_userCollectInfo.DeletedAt = field.NewField(tableName, "deleted_at")

	_userCollectInfo.fillFieldMap()

	return _userCollectInfo
}

type userCollectInfo struct {
	userCollectInfoDo userCollectInfoDo

	ALL       field.Asterisk
	ID        field.Int64  // 主键id
	UserID    field.String // 用户id
	Industry  field.String // 所属行业
	TeamSize  field.String // 团队规模
	WorkType  field.String // 工作岗位
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 修改时间
	DeletedAt field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (u userCollectInfo) Table(newTableName string) *userCollectInfo {
	u.userCollectInfoDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userCollectInfo) As(alias string) *userCollectInfo {
	u.userCollectInfoDo.DO = *(u.userCollectInfoDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userCollectInfo) updateTableName(table string) *userCollectInfo {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewString(table, "user_id")
	u.Industry = field.NewString(table, "industry")
	u.TeamSize = field.NewString(table, "team_size")
	u.WorkType = field.NewString(table, "work_type")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")

	u.fillFieldMap()

	return u
}

func (u *userCollectInfo) WithContext(ctx context.Context) *userCollectInfoDo {
	return u.userCollectInfoDo.WithContext(ctx)
}

func (u userCollectInfo) TableName() string { return u.userCollectInfoDo.TableName() }

func (u userCollectInfo) Alias() string { return u.userCollectInfoDo.Alias() }

func (u *userCollectInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userCollectInfo) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 8)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["industry"] = u.Industry
	u.fieldMap["team_size"] = u.TeamSize
	u.fieldMap["work_type"] = u.WorkType
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
}

func (u userCollectInfo) clone(db *gorm.DB) userCollectInfo {
	u.userCollectInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userCollectInfo) replaceDB(db *gorm.DB) userCollectInfo {
	u.userCollectInfoDo.ReplaceDB(db)
	return u
}

type userCollectInfoDo struct{ gen.DO }

func (u userCollectInfoDo) Debug() *userCollectInfoDo {
	return u.withDO(u.DO.Debug())
}

func (u userCollectInfoDo) WithContext(ctx context.Context) *userCollectInfoDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userCollectInfoDo) ReadDB() *userCollectInfoDo {
	return u.Clauses(dbresolver.Read)
}

func (u userCollectInfoDo) WriteDB() *userCollectInfoDo {
	return u.Clauses(dbresolver.Write)
}

func (u userCollectInfoDo) Session(config *gorm.Session) *userCollectInfoDo {
	return u.withDO(u.DO.Session(config))
}

func (u userCollectInfoDo) Clauses(conds ...clause.Expression) *userCollectInfoDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userCollectInfoDo) Returning(value interface{}, columns ...string) *userCollectInfoDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userCollectInfoDo) Not(conds ...gen.Condition) *userCollectInfoDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userCollectInfoDo) Or(conds ...gen.Condition) *userCollectInfoDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userCollectInfoDo) Select(conds ...field.Expr) *userCollectInfoDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userCollectInfoDo) Where(conds ...gen.Condition) *userCollectInfoDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userCollectInfoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *userCollectInfoDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userCollectInfoDo) Order(conds ...field.Expr) *userCollectInfoDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userCollectInfoDo) Distinct(cols ...field.Expr) *userCollectInfoDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userCollectInfoDo) Omit(cols ...field.Expr) *userCollectInfoDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userCollectInfoDo) Join(table schema.Tabler, on ...field.Expr) *userCollectInfoDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userCollectInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userCollectInfoDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userCollectInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) *userCollectInfoDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userCollectInfoDo) Group(cols ...field.Expr) *userCollectInfoDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userCollectInfoDo) Having(conds ...gen.Condition) *userCollectInfoDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userCollectInfoDo) Limit(limit int) *userCollectInfoDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userCollectInfoDo) Offset(offset int) *userCollectInfoDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userCollectInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userCollectInfoDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userCollectInfoDo) Unscoped() *userCollectInfoDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userCollectInfoDo) Create(values ...*model.UserCollectInfo) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userCollectInfoDo) CreateInBatches(values []*model.UserCollectInfo, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userCollectInfoDo) Save(values ...*model.UserCollectInfo) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userCollectInfoDo) First() (*model.UserCollectInfo, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCollectInfo), nil
	}
}

func (u userCollectInfoDo) Take() (*model.UserCollectInfo, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCollectInfo), nil
	}
}

func (u userCollectInfoDo) Last() (*model.UserCollectInfo, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCollectInfo), nil
	}
}

func (u userCollectInfoDo) Find() ([]*model.UserCollectInfo, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserCollectInfo), err
}

func (u userCollectInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserCollectInfo, err error) {
	buf := make([]*model.UserCollectInfo, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userCollectInfoDo) FindInBatches(result *[]*model.UserCollectInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userCollectInfoDo) Attrs(attrs ...field.AssignExpr) *userCollectInfoDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userCollectInfoDo) Assign(attrs ...field.AssignExpr) *userCollectInfoDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userCollectInfoDo) Joins(fields ...field.RelationField) *userCollectInfoDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userCollectInfoDo) Preload(fields ...field.RelationField) *userCollectInfoDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userCollectInfoDo) FirstOrInit() (*model.UserCollectInfo, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCollectInfo), nil
	}
}

func (u userCollectInfoDo) FirstOrCreate() (*model.UserCollectInfo, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCollectInfo), nil
	}
}

func (u userCollectInfoDo) FindByPage(offset int, limit int) (result []*model.UserCollectInfo, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userCollectInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userCollectInfoDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userCollectInfoDo) Delete(models ...*model.UserCollectInfo) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userCollectInfoDo) withDO(do gen.Dao) *userCollectInfoDo {
	u.DO = *do.(*gen.DO)
	return u
}
