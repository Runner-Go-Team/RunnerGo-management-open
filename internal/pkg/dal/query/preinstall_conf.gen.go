// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Runner-Go-Team/RunnerGo-management-open/internal/pkg/dal/model"
)

func newPreinstallConf(db *gorm.DB, opts ...gen.DOOption) preinstallConf {
	_preinstallConf := preinstallConf{}

	_preinstallConf.preinstallConfDo.UseDB(db, opts...)
	_preinstallConf.preinstallConfDo.UseModel(&model.PreinstallConf{})

	tableName := _preinstallConf.preinstallConfDo.TableName()
	_preinstallConf.ALL = field.NewAsterisk(tableName)
	_preinstallConf.ID = field.NewInt32(tableName, "id")
	_preinstallConf.ConfName = field.NewString(tableName, "conf_name")
	_preinstallConf.TeamID = field.NewString(tableName, "team_id")
	_preinstallConf.UserID = field.NewString(tableName, "user_id")
	_preinstallConf.UserName = field.NewString(tableName, "user_name")
	_preinstallConf.TaskType = field.NewInt32(tableName, "task_type")
	_preinstallConf.TaskMode = field.NewInt32(tableName, "task_mode")
	_preinstallConf.ControlMode = field.NewInt32(tableName, "control_mode")
	_preinstallConf.DebugMode = field.NewString(tableName, "debug_mode")
	_preinstallConf.ModeConf = field.NewString(tableName, "mode_conf")
	_preinstallConf.TimedTaskConf = field.NewString(tableName, "timed_task_conf")
	_preinstallConf.IsOpenDistributed = field.NewInt32(tableName, "is_open_distributed")
	_preinstallConf.MachineDispatchModeConf = field.NewString(tableName, "machine_dispatch_mode_conf")
	_preinstallConf.CreatedAt = field.NewTime(tableName, "created_at")
	_preinstallConf.UpdatedAt = field.NewTime(tableName, "updated_at")
	_preinstallConf.DeletedAt = field.NewField(tableName, "deleted_at")

	_preinstallConf.fillFieldMap()

	return _preinstallConf
}

type preinstallConf struct {
	preinstallConfDo preinstallConfDo

	ALL                     field.Asterisk
	ID                      field.Int32  // 主键id
	ConfName                field.String // 配置名称
	TeamID                  field.String // 团队ID
	UserID                  field.String // 用户ID
	UserName                field.String // 用户名称
	TaskType                field.Int32  // 任务类型
	TaskMode                field.Int32  // 压测模式
	ControlMode             field.Int32  // 控制模式：0-集中模式，1-单独模式
	DebugMode               field.String // debug模式：stop-关闭，all-开启全部日志，only_success-开启仅成功日志，only_error-开启仅错误日志
	ModeConf                field.String // 压测配置详情
	TimedTaskConf           field.String // 定时任务相关配置
	IsOpenDistributed       field.Int32  // 是否开启分布式调度：0-关闭，1-开启
	MachineDispatchModeConf field.String // 分布式压力机配置
	CreatedAt               field.Time   // 创建时间
	UpdatedAt               field.Time   // 更新时间
	DeletedAt               field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (p preinstallConf) Table(newTableName string) *preinstallConf {
	p.preinstallConfDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p preinstallConf) As(alias string) *preinstallConf {
	p.preinstallConfDo.DO = *(p.preinstallConfDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *preinstallConf) updateTableName(table string) *preinstallConf {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt32(table, "id")
	p.ConfName = field.NewString(table, "conf_name")
	p.TeamID = field.NewString(table, "team_id")
	p.UserID = field.NewString(table, "user_id")
	p.UserName = field.NewString(table, "user_name")
	p.TaskType = field.NewInt32(table, "task_type")
	p.TaskMode = field.NewInt32(table, "task_mode")
	p.ControlMode = field.NewInt32(table, "control_mode")
	p.DebugMode = field.NewString(table, "debug_mode")
	p.ModeConf = field.NewString(table, "mode_conf")
	p.TimedTaskConf = field.NewString(table, "timed_task_conf")
	p.IsOpenDistributed = field.NewInt32(table, "is_open_distributed")
	p.MachineDispatchModeConf = field.NewString(table, "machine_dispatch_mode_conf")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")

	p.fillFieldMap()

	return p
}

func (p *preinstallConf) WithContext(ctx context.Context) *preinstallConfDo {
	return p.preinstallConfDo.WithContext(ctx)
}

func (p preinstallConf) TableName() string { return p.preinstallConfDo.TableName() }

func (p preinstallConf) Alias() string { return p.preinstallConfDo.Alias() }

func (p *preinstallConf) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *preinstallConf) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 16)
	p.fieldMap["id"] = p.ID
	p.fieldMap["conf_name"] = p.ConfName
	p.fieldMap["team_id"] = p.TeamID
	p.fieldMap["user_id"] = p.UserID
	p.fieldMap["user_name"] = p.UserName
	p.fieldMap["task_type"] = p.TaskType
	p.fieldMap["task_mode"] = p.TaskMode
	p.fieldMap["control_mode"] = p.ControlMode
	p.fieldMap["debug_mode"] = p.DebugMode
	p.fieldMap["mode_conf"] = p.ModeConf
	p.fieldMap["timed_task_conf"] = p.TimedTaskConf
	p.fieldMap["is_open_distributed"] = p.IsOpenDistributed
	p.fieldMap["machine_dispatch_mode_conf"] = p.MachineDispatchModeConf
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
}

func (p preinstallConf) clone(db *gorm.DB) preinstallConf {
	p.preinstallConfDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p preinstallConf) replaceDB(db *gorm.DB) preinstallConf {
	p.preinstallConfDo.ReplaceDB(db)
	return p
}

type preinstallConfDo struct{ gen.DO }

func (p preinstallConfDo) Debug() *preinstallConfDo {
	return p.withDO(p.DO.Debug())
}

func (p preinstallConfDo) WithContext(ctx context.Context) *preinstallConfDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p preinstallConfDo) ReadDB() *preinstallConfDo {
	return p.Clauses(dbresolver.Read)
}

func (p preinstallConfDo) WriteDB() *preinstallConfDo {
	return p.Clauses(dbresolver.Write)
}

func (p preinstallConfDo) Session(config *gorm.Session) *preinstallConfDo {
	return p.withDO(p.DO.Session(config))
}

func (p preinstallConfDo) Clauses(conds ...clause.Expression) *preinstallConfDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p preinstallConfDo) Returning(value interface{}, columns ...string) *preinstallConfDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p preinstallConfDo) Not(conds ...gen.Condition) *preinstallConfDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p preinstallConfDo) Or(conds ...gen.Condition) *preinstallConfDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p preinstallConfDo) Select(conds ...field.Expr) *preinstallConfDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p preinstallConfDo) Where(conds ...gen.Condition) *preinstallConfDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p preinstallConfDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *preinstallConfDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p preinstallConfDo) Order(conds ...field.Expr) *preinstallConfDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p preinstallConfDo) Distinct(cols ...field.Expr) *preinstallConfDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p preinstallConfDo) Omit(cols ...field.Expr) *preinstallConfDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p preinstallConfDo) Join(table schema.Tabler, on ...field.Expr) *preinstallConfDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p preinstallConfDo) LeftJoin(table schema.Tabler, on ...field.Expr) *preinstallConfDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p preinstallConfDo) RightJoin(table schema.Tabler, on ...field.Expr) *preinstallConfDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p preinstallConfDo) Group(cols ...field.Expr) *preinstallConfDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p preinstallConfDo) Having(conds ...gen.Condition) *preinstallConfDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p preinstallConfDo) Limit(limit int) *preinstallConfDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p preinstallConfDo) Offset(offset int) *preinstallConfDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p preinstallConfDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *preinstallConfDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p preinstallConfDo) Unscoped() *preinstallConfDo {
	return p.withDO(p.DO.Unscoped())
}

func (p preinstallConfDo) Create(values ...*model.PreinstallConf) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p preinstallConfDo) CreateInBatches(values []*model.PreinstallConf, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p preinstallConfDo) Save(values ...*model.PreinstallConf) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p preinstallConfDo) First() (*model.PreinstallConf, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PreinstallConf), nil
	}
}

func (p preinstallConfDo) Take() (*model.PreinstallConf, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PreinstallConf), nil
	}
}

func (p preinstallConfDo) Last() (*model.PreinstallConf, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PreinstallConf), nil
	}
}

func (p preinstallConfDo) Find() ([]*model.PreinstallConf, error) {
	result, err := p.DO.Find()
	return result.([]*model.PreinstallConf), err
}

func (p preinstallConfDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PreinstallConf, err error) {
	buf := make([]*model.PreinstallConf, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p preinstallConfDo) FindInBatches(result *[]*model.PreinstallConf, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p preinstallConfDo) Attrs(attrs ...field.AssignExpr) *preinstallConfDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p preinstallConfDo) Assign(attrs ...field.AssignExpr) *preinstallConfDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p preinstallConfDo) Joins(fields ...field.RelationField) *preinstallConfDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p preinstallConfDo) Preload(fields ...field.RelationField) *preinstallConfDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p preinstallConfDo) FirstOrInit() (*model.PreinstallConf, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PreinstallConf), nil
	}
}

func (p preinstallConfDo) FirstOrCreate() (*model.PreinstallConf, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PreinstallConf), nil
	}
}

func (p preinstallConfDo) FindByPage(offset int, limit int) (result []*model.PreinstallConf, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p preinstallConfDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p preinstallConfDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p preinstallConfDo) Delete(models ...*model.PreinstallConf) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *preinstallConfDo) withDO(do gen.Dao) *preinstallConfDo {
	p.DO = *do.(*gen.DO)
	return p
}
