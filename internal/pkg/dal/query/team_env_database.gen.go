// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Runner-Go-Team/RunnerGo-management-open/internal/pkg/dal/model"
)

func newTeamEnvDatabase(db *gorm.DB, opts ...gen.DOOption) teamEnvDatabase {
	_teamEnvDatabase := teamEnvDatabase{}

	_teamEnvDatabase.teamEnvDatabaseDo.UseDB(db, opts...)
	_teamEnvDatabase.teamEnvDatabaseDo.UseModel(&model.TeamEnvDatabase{})

	tableName := _teamEnvDatabase.teamEnvDatabaseDo.TableName()
	_teamEnvDatabase.ALL = field.NewAsterisk(tableName)
	_teamEnvDatabase.ID = field.NewInt64(tableName, "id")
	_teamEnvDatabase.TeamID = field.NewString(tableName, "team_id")
	_teamEnvDatabase.TeamEnvID = field.NewInt64(tableName, "team_env_id")
	_teamEnvDatabase.Type = field.NewString(tableName, "type")
	_teamEnvDatabase.ServerName = field.NewString(tableName, "server_name")
	_teamEnvDatabase.Host = field.NewString(tableName, "host")
	_teamEnvDatabase.Port = field.NewInt32(tableName, "port")
	_teamEnvDatabase.User = field.NewString(tableName, "user")
	_teamEnvDatabase.Password = field.NewString(tableName, "password")
	_teamEnvDatabase.DbName = field.NewString(tableName, "db_name")
	_teamEnvDatabase.Charset = field.NewString(tableName, "charset")
	_teamEnvDatabase.CreatedUserID = field.NewString(tableName, "created_user_id")
	_teamEnvDatabase.CreatedAt = field.NewTime(tableName, "created_at")
	_teamEnvDatabase.UpdatedAt = field.NewTime(tableName, "updated_at")
	_teamEnvDatabase.DeletedAt = field.NewField(tableName, "deleted_at")

	_teamEnvDatabase.fillFieldMap()

	return _teamEnvDatabase
}

type teamEnvDatabase struct {
	teamEnvDatabaseDo teamEnvDatabaseDo

	ALL           field.Asterisk
	ID            field.Int64  // 主键id
	TeamID        field.String // 团队id
	TeamEnvID     field.Int64  // 环境变量id
	Type          field.String // 数据库类型
	ServerName    field.String // mysql服务名称
	Host          field.String // 服务地址
	Port          field.Int32  // 端口号
	User          field.String // 账号
	Password      field.String // 密码
	DbName        field.String // 数据库名称
	Charset       field.String // 字符编码集
	CreatedUserID field.String // 创建人id
	CreatedAt     field.Time   // 创建时间
	UpdatedAt     field.Time   // 更新时间
	DeletedAt     field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (t teamEnvDatabase) Table(newTableName string) *teamEnvDatabase {
	t.teamEnvDatabaseDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t teamEnvDatabase) As(alias string) *teamEnvDatabase {
	t.teamEnvDatabaseDo.DO = *(t.teamEnvDatabaseDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *teamEnvDatabase) updateTableName(table string) *teamEnvDatabase {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.TeamID = field.NewString(table, "team_id")
	t.TeamEnvID = field.NewInt64(table, "team_env_id")
	t.Type = field.NewString(table, "type")
	t.ServerName = field.NewString(table, "server_name")
	t.Host = field.NewString(table, "host")
	t.Port = field.NewInt32(table, "port")
	t.User = field.NewString(table, "user")
	t.Password = field.NewString(table, "password")
	t.DbName = field.NewString(table, "db_name")
	t.Charset = field.NewString(table, "charset")
	t.CreatedUserID = field.NewString(table, "created_user_id")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *teamEnvDatabase) WithContext(ctx context.Context) *teamEnvDatabaseDo {
	return t.teamEnvDatabaseDo.WithContext(ctx)
}

func (t teamEnvDatabase) TableName() string { return t.teamEnvDatabaseDo.TableName() }

func (t teamEnvDatabase) Alias() string { return t.teamEnvDatabaseDo.Alias() }

func (t *teamEnvDatabase) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *teamEnvDatabase) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 15)
	t.fieldMap["id"] = t.ID
	t.fieldMap["team_id"] = t.TeamID
	t.fieldMap["team_env_id"] = t.TeamEnvID
	t.fieldMap["type"] = t.Type
	t.fieldMap["server_name"] = t.ServerName
	t.fieldMap["host"] = t.Host
	t.fieldMap["port"] = t.Port
	t.fieldMap["user"] = t.User
	t.fieldMap["password"] = t.Password
	t.fieldMap["db_name"] = t.DbName
	t.fieldMap["charset"] = t.Charset
	t.fieldMap["created_user_id"] = t.CreatedUserID
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t teamEnvDatabase) clone(db *gorm.DB) teamEnvDatabase {
	t.teamEnvDatabaseDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t teamEnvDatabase) replaceDB(db *gorm.DB) teamEnvDatabase {
	t.teamEnvDatabaseDo.ReplaceDB(db)
	return t
}

type teamEnvDatabaseDo struct{ gen.DO }

func (t teamEnvDatabaseDo) Debug() *teamEnvDatabaseDo {
	return t.withDO(t.DO.Debug())
}

func (t teamEnvDatabaseDo) WithContext(ctx context.Context) *teamEnvDatabaseDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t teamEnvDatabaseDo) ReadDB() *teamEnvDatabaseDo {
	return t.Clauses(dbresolver.Read)
}

func (t teamEnvDatabaseDo) WriteDB() *teamEnvDatabaseDo {
	return t.Clauses(dbresolver.Write)
}

func (t teamEnvDatabaseDo) Session(config *gorm.Session) *teamEnvDatabaseDo {
	return t.withDO(t.DO.Session(config))
}

func (t teamEnvDatabaseDo) Clauses(conds ...clause.Expression) *teamEnvDatabaseDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t teamEnvDatabaseDo) Returning(value interface{}, columns ...string) *teamEnvDatabaseDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t teamEnvDatabaseDo) Not(conds ...gen.Condition) *teamEnvDatabaseDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t teamEnvDatabaseDo) Or(conds ...gen.Condition) *teamEnvDatabaseDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t teamEnvDatabaseDo) Select(conds ...field.Expr) *teamEnvDatabaseDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t teamEnvDatabaseDo) Where(conds ...gen.Condition) *teamEnvDatabaseDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t teamEnvDatabaseDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *teamEnvDatabaseDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t teamEnvDatabaseDo) Order(conds ...field.Expr) *teamEnvDatabaseDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t teamEnvDatabaseDo) Distinct(cols ...field.Expr) *teamEnvDatabaseDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t teamEnvDatabaseDo) Omit(cols ...field.Expr) *teamEnvDatabaseDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t teamEnvDatabaseDo) Join(table schema.Tabler, on ...field.Expr) *teamEnvDatabaseDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t teamEnvDatabaseDo) LeftJoin(table schema.Tabler, on ...field.Expr) *teamEnvDatabaseDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t teamEnvDatabaseDo) RightJoin(table schema.Tabler, on ...field.Expr) *teamEnvDatabaseDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t teamEnvDatabaseDo) Group(cols ...field.Expr) *teamEnvDatabaseDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t teamEnvDatabaseDo) Having(conds ...gen.Condition) *teamEnvDatabaseDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t teamEnvDatabaseDo) Limit(limit int) *teamEnvDatabaseDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t teamEnvDatabaseDo) Offset(offset int) *teamEnvDatabaseDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t teamEnvDatabaseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *teamEnvDatabaseDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t teamEnvDatabaseDo) Unscoped() *teamEnvDatabaseDo {
	return t.withDO(t.DO.Unscoped())
}

func (t teamEnvDatabaseDo) Create(values ...*model.TeamEnvDatabase) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t teamEnvDatabaseDo) CreateInBatches(values []*model.TeamEnvDatabase, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t teamEnvDatabaseDo) Save(values ...*model.TeamEnvDatabase) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t teamEnvDatabaseDo) First() (*model.TeamEnvDatabase, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeamEnvDatabase), nil
	}
}

func (t teamEnvDatabaseDo) Take() (*model.TeamEnvDatabase, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeamEnvDatabase), nil
	}
}

func (t teamEnvDatabaseDo) Last() (*model.TeamEnvDatabase, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeamEnvDatabase), nil
	}
}

func (t teamEnvDatabaseDo) Find() ([]*model.TeamEnvDatabase, error) {
	result, err := t.DO.Find()
	return result.([]*model.TeamEnvDatabase), err
}

func (t teamEnvDatabaseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TeamEnvDatabase, err error) {
	buf := make([]*model.TeamEnvDatabase, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t teamEnvDatabaseDo) FindInBatches(result *[]*model.TeamEnvDatabase, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t teamEnvDatabaseDo) Attrs(attrs ...field.AssignExpr) *teamEnvDatabaseDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t teamEnvDatabaseDo) Assign(attrs ...field.AssignExpr) *teamEnvDatabaseDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t teamEnvDatabaseDo) Joins(fields ...field.RelationField) *teamEnvDatabaseDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t teamEnvDatabaseDo) Preload(fields ...field.RelationField) *teamEnvDatabaseDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t teamEnvDatabaseDo) FirstOrInit() (*model.TeamEnvDatabase, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeamEnvDatabase), nil
	}
}

func (t teamEnvDatabaseDo) FirstOrCreate() (*model.TeamEnvDatabase, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeamEnvDatabase), nil
	}
}

func (t teamEnvDatabaseDo) FindByPage(offset int, limit int) (result []*model.TeamEnvDatabase, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t teamEnvDatabaseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t teamEnvDatabaseDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t teamEnvDatabaseDo) Delete(models ...*model.TeamEnvDatabase) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *teamEnvDatabaseDo) withDO(do gen.Dao) *teamEnvDatabaseDo {
	t.DO = *do.(*gen.DO)
	return t
}
