// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Runner-Go-Team/RunnerGo-management-open/internal/pkg/dal/model"
)

func newElement(db *gorm.DB, opts ...gen.DOOption) element {
	_element := element{}

	_element.elementDo.UseDB(db, opts...)
	_element.elementDo.UseModel(&model.Element{})

	tableName := _element.elementDo.TableName()
	_element.ALL = field.NewAsterisk(tableName)
	_element.ID = field.NewInt64(tableName, "id")
	_element.ElementID = field.NewString(tableName, "element_id")
	_element.ElementType = field.NewString(tableName, "element_type")
	_element.TeamID = field.NewString(tableName, "team_id")
	_element.Name = field.NewString(tableName, "name")
	_element.ParentID = field.NewString(tableName, "parent_id")
	_element.Locators = field.NewString(tableName, "locators")
	_element.Sort = field.NewInt32(tableName, "sort")
	_element.Version = field.NewInt32(tableName, "version")
	_element.CreatedUserID = field.NewString(tableName, "created_user_id")
	_element.Description = field.NewString(tableName, "description")
	_element.Source = field.NewInt32(tableName, "source")
	_element.SourceID = field.NewString(tableName, "source_id")
	_element.CreatedAt = field.NewTime(tableName, "created_at")
	_element.UpdatedAt = field.NewTime(tableName, "updated_at")
	_element.DeletedAt = field.NewField(tableName, "deleted_at")

	_element.fillFieldMap()

	return _element
}

type element struct {
	elementDo elementDo

	ALL           field.Asterisk
	ID            field.Int64  // id
	ElementID     field.String // 全局唯一ID
	ElementType   field.String // 类型：文件夹，元素
	TeamID        field.String // 团队id
	Name          field.String // 名称
	ParentID      field.String // 父级ID
	Locators      field.String // 定位元素属性
	Sort          field.Int32  // 排序
	Version       field.Int32  // 产品版本号
	CreatedUserID field.String // 创建人ID
	Description   field.String // 备注
	Source        field.Int32  // 数据来源：0-元素管理，1-场景管理
	SourceID      field.String // 引用来源ID
	CreatedAt     field.Time   // 创建时间
	UpdatedAt     field.Time   // 更新时间
	DeletedAt     field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (e element) Table(newTableName string) *element {
	e.elementDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e element) As(alias string) *element {
	e.elementDo.DO = *(e.elementDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *element) updateTableName(table string) *element {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.ElementID = field.NewString(table, "element_id")
	e.ElementType = field.NewString(table, "element_type")
	e.TeamID = field.NewString(table, "team_id")
	e.Name = field.NewString(table, "name")
	e.ParentID = field.NewString(table, "parent_id")
	e.Locators = field.NewString(table, "locators")
	e.Sort = field.NewInt32(table, "sort")
	e.Version = field.NewInt32(table, "version")
	e.CreatedUserID = field.NewString(table, "created_user_id")
	e.Description = field.NewString(table, "description")
	e.Source = field.NewInt32(table, "source")
	e.SourceID = field.NewString(table, "source_id")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.UpdatedAt = field.NewTime(table, "updated_at")
	e.DeletedAt = field.NewField(table, "deleted_at")

	e.fillFieldMap()

	return e
}

func (e *element) WithContext(ctx context.Context) *elementDo { return e.elementDo.WithContext(ctx) }

func (e element) TableName() string { return e.elementDo.TableName() }

func (e element) Alias() string { return e.elementDo.Alias() }

func (e *element) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *element) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 16)
	e.fieldMap["id"] = e.ID
	e.fieldMap["element_id"] = e.ElementID
	e.fieldMap["element_type"] = e.ElementType
	e.fieldMap["team_id"] = e.TeamID
	e.fieldMap["name"] = e.Name
	e.fieldMap["parent_id"] = e.ParentID
	e.fieldMap["locators"] = e.Locators
	e.fieldMap["sort"] = e.Sort
	e.fieldMap["version"] = e.Version
	e.fieldMap["created_user_id"] = e.CreatedUserID
	e.fieldMap["description"] = e.Description
	e.fieldMap["source"] = e.Source
	e.fieldMap["source_id"] = e.SourceID
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
	e.fieldMap["deleted_at"] = e.DeletedAt
}

func (e element) clone(db *gorm.DB) element {
	e.elementDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e element) replaceDB(db *gorm.DB) element {
	e.elementDo.ReplaceDB(db)
	return e
}

type elementDo struct{ gen.DO }

func (e elementDo) Debug() *elementDo {
	return e.withDO(e.DO.Debug())
}

func (e elementDo) WithContext(ctx context.Context) *elementDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e elementDo) ReadDB() *elementDo {
	return e.Clauses(dbresolver.Read)
}

func (e elementDo) WriteDB() *elementDo {
	return e.Clauses(dbresolver.Write)
}

func (e elementDo) Session(config *gorm.Session) *elementDo {
	return e.withDO(e.DO.Session(config))
}

func (e elementDo) Clauses(conds ...clause.Expression) *elementDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e elementDo) Returning(value interface{}, columns ...string) *elementDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e elementDo) Not(conds ...gen.Condition) *elementDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e elementDo) Or(conds ...gen.Condition) *elementDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e elementDo) Select(conds ...field.Expr) *elementDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e elementDo) Where(conds ...gen.Condition) *elementDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e elementDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *elementDo {
	return e.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (e elementDo) Order(conds ...field.Expr) *elementDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e elementDo) Distinct(cols ...field.Expr) *elementDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e elementDo) Omit(cols ...field.Expr) *elementDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e elementDo) Join(table schema.Tabler, on ...field.Expr) *elementDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e elementDo) LeftJoin(table schema.Tabler, on ...field.Expr) *elementDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e elementDo) RightJoin(table schema.Tabler, on ...field.Expr) *elementDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e elementDo) Group(cols ...field.Expr) *elementDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e elementDo) Having(conds ...gen.Condition) *elementDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e elementDo) Limit(limit int) *elementDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e elementDo) Offset(offset int) *elementDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e elementDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *elementDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e elementDo) Unscoped() *elementDo {
	return e.withDO(e.DO.Unscoped())
}

func (e elementDo) Create(values ...*model.Element) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e elementDo) CreateInBatches(values []*model.Element, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e elementDo) Save(values ...*model.Element) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e elementDo) First() (*model.Element, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Element), nil
	}
}

func (e elementDo) Take() (*model.Element, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Element), nil
	}
}

func (e elementDo) Last() (*model.Element, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Element), nil
	}
}

func (e elementDo) Find() ([]*model.Element, error) {
	result, err := e.DO.Find()
	return result.([]*model.Element), err
}

func (e elementDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Element, err error) {
	buf := make([]*model.Element, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e elementDo) FindInBatches(result *[]*model.Element, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e elementDo) Attrs(attrs ...field.AssignExpr) *elementDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e elementDo) Assign(attrs ...field.AssignExpr) *elementDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e elementDo) Joins(fields ...field.RelationField) *elementDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e elementDo) Preload(fields ...field.RelationField) *elementDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e elementDo) FirstOrInit() (*model.Element, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Element), nil
	}
}

func (e elementDo) FirstOrCreate() (*model.Element, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Element), nil
	}
}

func (e elementDo) FindByPage(offset int, limit int) (result []*model.Element, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e elementDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e elementDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e elementDo) Delete(models ...*model.Element) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *elementDo) withDO(do gen.Dao) *elementDo {
	e.DO = *do.(*gen.DO)
	return e
}
