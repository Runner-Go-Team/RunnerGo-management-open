// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Runner-Go-Team/RunnerGo-management-open/internal/pkg/dal/model"
)

func newStressPlanEmail(db *gorm.DB, opts ...gen.DOOption) stressPlanEmail {
	_stressPlanEmail := stressPlanEmail{}

	_stressPlanEmail.stressPlanEmailDo.UseDB(db, opts...)
	_stressPlanEmail.stressPlanEmailDo.UseModel(&model.StressPlanEmail{})

	tableName := _stressPlanEmail.stressPlanEmailDo.TableName()
	_stressPlanEmail.ALL = field.NewAsterisk(tableName)
	_stressPlanEmail.ID = field.NewInt64(tableName, "id")
	_stressPlanEmail.PlanID = field.NewString(tableName, "plan_id")
	_stressPlanEmail.TeamID = field.NewString(tableName, "team_id")
	_stressPlanEmail.Email = field.NewString(tableName, "email")
	_stressPlanEmail.CreatedAt = field.NewTime(tableName, "created_at")
	_stressPlanEmail.UpdatedAt = field.NewTime(tableName, "updated_at")
	_stressPlanEmail.DeletedAt = field.NewField(tableName, "deleted_at")

	_stressPlanEmail.fillFieldMap()

	return _stressPlanEmail
}

type stressPlanEmail struct {
	stressPlanEmailDo stressPlanEmailDo

	ALL       field.Asterisk
	ID        field.Int64  // 主键
	PlanID    field.String // 计划ID
	TeamID    field.String // 团队ID
	Email     field.String // 邮箱
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 修改时间
	DeletedAt field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (s stressPlanEmail) Table(newTableName string) *stressPlanEmail {
	s.stressPlanEmailDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s stressPlanEmail) As(alias string) *stressPlanEmail {
	s.stressPlanEmailDo.DO = *(s.stressPlanEmailDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *stressPlanEmail) updateTableName(table string) *stressPlanEmail {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.PlanID = field.NewString(table, "plan_id")
	s.TeamID = field.NewString(table, "team_id")
	s.Email = field.NewString(table, "email")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *stressPlanEmail) WithContext(ctx context.Context) *stressPlanEmailDo {
	return s.stressPlanEmailDo.WithContext(ctx)
}

func (s stressPlanEmail) TableName() string { return s.stressPlanEmailDo.TableName() }

func (s stressPlanEmail) Alias() string { return s.stressPlanEmailDo.Alias() }

func (s *stressPlanEmail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *stressPlanEmail) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["id"] = s.ID
	s.fieldMap["plan_id"] = s.PlanID
	s.fieldMap["team_id"] = s.TeamID
	s.fieldMap["email"] = s.Email
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s stressPlanEmail) clone(db *gorm.DB) stressPlanEmail {
	s.stressPlanEmailDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s stressPlanEmail) replaceDB(db *gorm.DB) stressPlanEmail {
	s.stressPlanEmailDo.ReplaceDB(db)
	return s
}

type stressPlanEmailDo struct{ gen.DO }

func (s stressPlanEmailDo) Debug() *stressPlanEmailDo {
	return s.withDO(s.DO.Debug())
}

func (s stressPlanEmailDo) WithContext(ctx context.Context) *stressPlanEmailDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s stressPlanEmailDo) ReadDB() *stressPlanEmailDo {
	return s.Clauses(dbresolver.Read)
}

func (s stressPlanEmailDo) WriteDB() *stressPlanEmailDo {
	return s.Clauses(dbresolver.Write)
}

func (s stressPlanEmailDo) Session(config *gorm.Session) *stressPlanEmailDo {
	return s.withDO(s.DO.Session(config))
}

func (s stressPlanEmailDo) Clauses(conds ...clause.Expression) *stressPlanEmailDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s stressPlanEmailDo) Returning(value interface{}, columns ...string) *stressPlanEmailDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s stressPlanEmailDo) Not(conds ...gen.Condition) *stressPlanEmailDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s stressPlanEmailDo) Or(conds ...gen.Condition) *stressPlanEmailDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s stressPlanEmailDo) Select(conds ...field.Expr) *stressPlanEmailDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s stressPlanEmailDo) Where(conds ...gen.Condition) *stressPlanEmailDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s stressPlanEmailDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *stressPlanEmailDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s stressPlanEmailDo) Order(conds ...field.Expr) *stressPlanEmailDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s stressPlanEmailDo) Distinct(cols ...field.Expr) *stressPlanEmailDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s stressPlanEmailDo) Omit(cols ...field.Expr) *stressPlanEmailDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s stressPlanEmailDo) Join(table schema.Tabler, on ...field.Expr) *stressPlanEmailDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s stressPlanEmailDo) LeftJoin(table schema.Tabler, on ...field.Expr) *stressPlanEmailDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s stressPlanEmailDo) RightJoin(table schema.Tabler, on ...field.Expr) *stressPlanEmailDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s stressPlanEmailDo) Group(cols ...field.Expr) *stressPlanEmailDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s stressPlanEmailDo) Having(conds ...gen.Condition) *stressPlanEmailDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s stressPlanEmailDo) Limit(limit int) *stressPlanEmailDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s stressPlanEmailDo) Offset(offset int) *stressPlanEmailDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s stressPlanEmailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *stressPlanEmailDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s stressPlanEmailDo) Unscoped() *stressPlanEmailDo {
	return s.withDO(s.DO.Unscoped())
}

func (s stressPlanEmailDo) Create(values ...*model.StressPlanEmail) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s stressPlanEmailDo) CreateInBatches(values []*model.StressPlanEmail, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s stressPlanEmailDo) Save(values ...*model.StressPlanEmail) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s stressPlanEmailDo) First() (*model.StressPlanEmail, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.StressPlanEmail), nil
	}
}

func (s stressPlanEmailDo) Take() (*model.StressPlanEmail, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.StressPlanEmail), nil
	}
}

func (s stressPlanEmailDo) Last() (*model.StressPlanEmail, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.StressPlanEmail), nil
	}
}

func (s stressPlanEmailDo) Find() ([]*model.StressPlanEmail, error) {
	result, err := s.DO.Find()
	return result.([]*model.StressPlanEmail), err
}

func (s stressPlanEmailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StressPlanEmail, err error) {
	buf := make([]*model.StressPlanEmail, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s stressPlanEmailDo) FindInBatches(result *[]*model.StressPlanEmail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s stressPlanEmailDo) Attrs(attrs ...field.AssignExpr) *stressPlanEmailDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s stressPlanEmailDo) Assign(attrs ...field.AssignExpr) *stressPlanEmailDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s stressPlanEmailDo) Joins(fields ...field.RelationField) *stressPlanEmailDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s stressPlanEmailDo) Preload(fields ...field.RelationField) *stressPlanEmailDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s stressPlanEmailDo) FirstOrInit() (*model.StressPlanEmail, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.StressPlanEmail), nil
	}
}

func (s stressPlanEmailDo) FirstOrCreate() (*model.StressPlanEmail, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.StressPlanEmail), nil
	}
}

func (s stressPlanEmailDo) FindByPage(offset int, limit int) (result []*model.StressPlanEmail, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s stressPlanEmailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s stressPlanEmailDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s stressPlanEmailDo) Delete(models ...*model.StressPlanEmail) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *stressPlanEmailDo) withDO(do gen.Dao) *stressPlanEmailDo {
	s.DO = *do.(*gen.DO)
	return s
}
