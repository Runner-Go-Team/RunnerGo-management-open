// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Runner-Go-Team/RunnerGo-management-open/internal/pkg/dal/model"
)

func newRoleTypePermission(db *gorm.DB, opts ...gen.DOOption) roleTypePermission {
	_roleTypePermission := roleTypePermission{}

	_roleTypePermission.roleTypePermissionDo.UseDB(db, opts...)
	_roleTypePermission.roleTypePermissionDo.UseModel(&model.RoleTypePermission{})

	tableName := _roleTypePermission.roleTypePermissionDo.TableName()
	_roleTypePermission.ALL = field.NewAsterisk(tableName)
	_roleTypePermission.ID = field.NewInt64(tableName, "id")
	_roleTypePermission.RoleType = field.NewInt32(tableName, "role_type")
	_roleTypePermission.PermissionID = field.NewInt64(tableName, "permission_id")
	_roleTypePermission.CreatedAt = field.NewTime(tableName, "created_at")
	_roleTypePermission.UpdatedAt = field.NewTime(tableName, "updated_at")
	_roleTypePermission.DeletedAt = field.NewField(tableName, "deleted_at")

	_roleTypePermission.fillFieldMap()

	return _roleTypePermission
}

type roleTypePermission struct {
	roleTypePermissionDo roleTypePermissionDo

	ALL          field.Asterisk
	ID           field.Int64 // 主键id
	RoleType     field.Int32 // 角色分类（1：企业  2：团队）
	PermissionID field.Int64 // 权限id
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field

	fieldMap map[string]field.Expr
}

func (r roleTypePermission) Table(newTableName string) *roleTypePermission {
	r.roleTypePermissionDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r roleTypePermission) As(alias string) *roleTypePermission {
	r.roleTypePermissionDo.DO = *(r.roleTypePermissionDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *roleTypePermission) updateTableName(table string) *roleTypePermission {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.RoleType = field.NewInt32(table, "role_type")
	r.PermissionID = field.NewInt64(table, "permission_id")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")
	r.DeletedAt = field.NewField(table, "deleted_at")

	r.fillFieldMap()

	return r
}

func (r *roleTypePermission) WithContext(ctx context.Context) *roleTypePermissionDo {
	return r.roleTypePermissionDo.WithContext(ctx)
}

func (r roleTypePermission) TableName() string { return r.roleTypePermissionDo.TableName() }

func (r roleTypePermission) Alias() string { return r.roleTypePermissionDo.Alias() }

func (r *roleTypePermission) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *roleTypePermission) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 6)
	r.fieldMap["id"] = r.ID
	r.fieldMap["role_type"] = r.RoleType
	r.fieldMap["permission_id"] = r.PermissionID
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["deleted_at"] = r.DeletedAt
}

func (r roleTypePermission) clone(db *gorm.DB) roleTypePermission {
	r.roleTypePermissionDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r roleTypePermission) replaceDB(db *gorm.DB) roleTypePermission {
	r.roleTypePermissionDo.ReplaceDB(db)
	return r
}

type roleTypePermissionDo struct{ gen.DO }

func (r roleTypePermissionDo) Debug() *roleTypePermissionDo {
	return r.withDO(r.DO.Debug())
}

func (r roleTypePermissionDo) WithContext(ctx context.Context) *roleTypePermissionDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r roleTypePermissionDo) ReadDB() *roleTypePermissionDo {
	return r.Clauses(dbresolver.Read)
}

func (r roleTypePermissionDo) WriteDB() *roleTypePermissionDo {
	return r.Clauses(dbresolver.Write)
}

func (r roleTypePermissionDo) Session(config *gorm.Session) *roleTypePermissionDo {
	return r.withDO(r.DO.Session(config))
}

func (r roleTypePermissionDo) Clauses(conds ...clause.Expression) *roleTypePermissionDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r roleTypePermissionDo) Returning(value interface{}, columns ...string) *roleTypePermissionDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r roleTypePermissionDo) Not(conds ...gen.Condition) *roleTypePermissionDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r roleTypePermissionDo) Or(conds ...gen.Condition) *roleTypePermissionDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r roleTypePermissionDo) Select(conds ...field.Expr) *roleTypePermissionDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r roleTypePermissionDo) Where(conds ...gen.Condition) *roleTypePermissionDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r roleTypePermissionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *roleTypePermissionDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r roleTypePermissionDo) Order(conds ...field.Expr) *roleTypePermissionDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r roleTypePermissionDo) Distinct(cols ...field.Expr) *roleTypePermissionDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r roleTypePermissionDo) Omit(cols ...field.Expr) *roleTypePermissionDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r roleTypePermissionDo) Join(table schema.Tabler, on ...field.Expr) *roleTypePermissionDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r roleTypePermissionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *roleTypePermissionDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r roleTypePermissionDo) RightJoin(table schema.Tabler, on ...field.Expr) *roleTypePermissionDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r roleTypePermissionDo) Group(cols ...field.Expr) *roleTypePermissionDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r roleTypePermissionDo) Having(conds ...gen.Condition) *roleTypePermissionDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r roleTypePermissionDo) Limit(limit int) *roleTypePermissionDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r roleTypePermissionDo) Offset(offset int) *roleTypePermissionDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r roleTypePermissionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *roleTypePermissionDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r roleTypePermissionDo) Unscoped() *roleTypePermissionDo {
	return r.withDO(r.DO.Unscoped())
}

func (r roleTypePermissionDo) Create(values ...*model.RoleTypePermission) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r roleTypePermissionDo) CreateInBatches(values []*model.RoleTypePermission, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r roleTypePermissionDo) Save(values ...*model.RoleTypePermission) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r roleTypePermissionDo) First() (*model.RoleTypePermission, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleTypePermission), nil
	}
}

func (r roleTypePermissionDo) Take() (*model.RoleTypePermission, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleTypePermission), nil
	}
}

func (r roleTypePermissionDo) Last() (*model.RoleTypePermission, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleTypePermission), nil
	}
}

func (r roleTypePermissionDo) Find() ([]*model.RoleTypePermission, error) {
	result, err := r.DO.Find()
	return result.([]*model.RoleTypePermission), err
}

func (r roleTypePermissionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RoleTypePermission, err error) {
	buf := make([]*model.RoleTypePermission, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r roleTypePermissionDo) FindInBatches(result *[]*model.RoleTypePermission, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r roleTypePermissionDo) Attrs(attrs ...field.AssignExpr) *roleTypePermissionDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r roleTypePermissionDo) Assign(attrs ...field.AssignExpr) *roleTypePermissionDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r roleTypePermissionDo) Joins(fields ...field.RelationField) *roleTypePermissionDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r roleTypePermissionDo) Preload(fields ...field.RelationField) *roleTypePermissionDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r roleTypePermissionDo) FirstOrInit() (*model.RoleTypePermission, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleTypePermission), nil
	}
}

func (r roleTypePermissionDo) FirstOrCreate() (*model.RoleTypePermission, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleTypePermission), nil
	}
}

func (r roleTypePermissionDo) FindByPage(offset int, limit int) (result []*model.RoleTypePermission, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r roleTypePermissionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r roleTypePermissionDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r roleTypePermissionDo) Delete(models ...*model.RoleTypePermission) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *roleTypePermissionDo) withDO(do gen.Dao) *roleTypePermissionDo {
	r.DO = *do.(*gen.DO)
	return r
}
