// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Runner-Go-Team/RunnerGo-management-open/internal/pkg/dal/model"
)

func newRunPlanLog(db *gorm.DB, opts ...gen.DOOption) runPlanLog {
	_runPlanLog := runPlanLog{}

	_runPlanLog.runPlanLogDo.UseDB(db, opts...)
	_runPlanLog.runPlanLogDo.UseModel(&model.RunPlanLog{})

	tableName := _runPlanLog.runPlanLogDo.TableName()
	_runPlanLog.ALL = field.NewAsterisk(tableName)
	_runPlanLog.ID = field.NewInt64(tableName, "id")
	_runPlanLog.TeamID = field.NewString(tableName, "team_id")
	_runPlanLog.PlanID = field.NewString(tableName, "plan_id")
	_runPlanLog.PlanType = field.NewInt32(tableName, "plan_type")
	_runPlanLog.CreatedAt = field.NewTime(tableName, "created_at")
	_runPlanLog.UpdatedAt = field.NewTime(tableName, "updated_at")
	_runPlanLog.DeletedAt = field.NewField(tableName, "deleted_at")

	_runPlanLog.fillFieldMap()

	return _runPlanLog
}

type runPlanLog struct {
	runPlanLogDo runPlanLogDo

	ALL       field.Asterisk
	ID        field.Int64  // 主键ID
	TeamID    field.String // 团队ID
	PlanID    field.String // 计划ID
	PlanType  field.Int32  // 计划类型：1-性能，2-自动化
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间
	DeletedAt field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (r runPlanLog) Table(newTableName string) *runPlanLog {
	r.runPlanLogDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r runPlanLog) As(alias string) *runPlanLog {
	r.runPlanLogDo.DO = *(r.runPlanLogDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *runPlanLog) updateTableName(table string) *runPlanLog {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.TeamID = field.NewString(table, "team_id")
	r.PlanID = field.NewString(table, "plan_id")
	r.PlanType = field.NewInt32(table, "plan_type")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")
	r.DeletedAt = field.NewField(table, "deleted_at")

	r.fillFieldMap()

	return r
}

func (r *runPlanLog) WithContext(ctx context.Context) *runPlanLogDo {
	return r.runPlanLogDo.WithContext(ctx)
}

func (r runPlanLog) TableName() string { return r.runPlanLogDo.TableName() }

func (r runPlanLog) Alias() string { return r.runPlanLogDo.Alias() }

func (r *runPlanLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *runPlanLog) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 7)
	r.fieldMap["id"] = r.ID
	r.fieldMap["team_id"] = r.TeamID
	r.fieldMap["plan_id"] = r.PlanID
	r.fieldMap["plan_type"] = r.PlanType
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["deleted_at"] = r.DeletedAt
}

func (r runPlanLog) clone(db *gorm.DB) runPlanLog {
	r.runPlanLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r runPlanLog) replaceDB(db *gorm.DB) runPlanLog {
	r.runPlanLogDo.ReplaceDB(db)
	return r
}

type runPlanLogDo struct{ gen.DO }

func (r runPlanLogDo) Debug() *runPlanLogDo {
	return r.withDO(r.DO.Debug())
}

func (r runPlanLogDo) WithContext(ctx context.Context) *runPlanLogDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r runPlanLogDo) ReadDB() *runPlanLogDo {
	return r.Clauses(dbresolver.Read)
}

func (r runPlanLogDo) WriteDB() *runPlanLogDo {
	return r.Clauses(dbresolver.Write)
}

func (r runPlanLogDo) Session(config *gorm.Session) *runPlanLogDo {
	return r.withDO(r.DO.Session(config))
}

func (r runPlanLogDo) Clauses(conds ...clause.Expression) *runPlanLogDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r runPlanLogDo) Returning(value interface{}, columns ...string) *runPlanLogDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r runPlanLogDo) Not(conds ...gen.Condition) *runPlanLogDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r runPlanLogDo) Or(conds ...gen.Condition) *runPlanLogDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r runPlanLogDo) Select(conds ...field.Expr) *runPlanLogDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r runPlanLogDo) Where(conds ...gen.Condition) *runPlanLogDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r runPlanLogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *runPlanLogDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r runPlanLogDo) Order(conds ...field.Expr) *runPlanLogDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r runPlanLogDo) Distinct(cols ...field.Expr) *runPlanLogDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r runPlanLogDo) Omit(cols ...field.Expr) *runPlanLogDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r runPlanLogDo) Join(table schema.Tabler, on ...field.Expr) *runPlanLogDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r runPlanLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) *runPlanLogDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r runPlanLogDo) RightJoin(table schema.Tabler, on ...field.Expr) *runPlanLogDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r runPlanLogDo) Group(cols ...field.Expr) *runPlanLogDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r runPlanLogDo) Having(conds ...gen.Condition) *runPlanLogDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r runPlanLogDo) Limit(limit int) *runPlanLogDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r runPlanLogDo) Offset(offset int) *runPlanLogDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r runPlanLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *runPlanLogDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r runPlanLogDo) Unscoped() *runPlanLogDo {
	return r.withDO(r.DO.Unscoped())
}

func (r runPlanLogDo) Create(values ...*model.RunPlanLog) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r runPlanLogDo) CreateInBatches(values []*model.RunPlanLog, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r runPlanLogDo) Save(values ...*model.RunPlanLog) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r runPlanLogDo) First() (*model.RunPlanLog, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RunPlanLog), nil
	}
}

func (r runPlanLogDo) Take() (*model.RunPlanLog, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RunPlanLog), nil
	}
}

func (r runPlanLogDo) Last() (*model.RunPlanLog, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RunPlanLog), nil
	}
}

func (r runPlanLogDo) Find() ([]*model.RunPlanLog, error) {
	result, err := r.DO.Find()
	return result.([]*model.RunPlanLog), err
}

func (r runPlanLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RunPlanLog, err error) {
	buf := make([]*model.RunPlanLog, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r runPlanLogDo) FindInBatches(result *[]*model.RunPlanLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r runPlanLogDo) Attrs(attrs ...field.AssignExpr) *runPlanLogDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r runPlanLogDo) Assign(attrs ...field.AssignExpr) *runPlanLogDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r runPlanLogDo) Joins(fields ...field.RelationField) *runPlanLogDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r runPlanLogDo) Preload(fields ...field.RelationField) *runPlanLogDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r runPlanLogDo) FirstOrInit() (*model.RunPlanLog, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RunPlanLog), nil
	}
}

func (r runPlanLogDo) FirstOrCreate() (*model.RunPlanLog, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RunPlanLog), nil
	}
}

func (r runPlanLogDo) FindByPage(offset int, limit int) (result []*model.RunPlanLog, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r runPlanLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r runPlanLogDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r runPlanLogDo) Delete(models ...*model.RunPlanLog) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *runPlanLogDo) withDO(do gen.Dao) *runPlanLogDo {
	r.DO = *do.(*gen.DO)
	return r
}
