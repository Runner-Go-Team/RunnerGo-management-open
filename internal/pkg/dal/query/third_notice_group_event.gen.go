// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Runner-Go-Team/RunnerGo-management-open/internal/pkg/dal/model"
)

func newThirdNoticeGroupEvent(db *gorm.DB, opts ...gen.DOOption) thirdNoticeGroupEvent {
	_thirdNoticeGroupEvent := thirdNoticeGroupEvent{}

	_thirdNoticeGroupEvent.thirdNoticeGroupEventDo.UseDB(db, opts...)
	_thirdNoticeGroupEvent.thirdNoticeGroupEventDo.UseModel(&model.ThirdNoticeGroupEvent{})

	tableName := _thirdNoticeGroupEvent.thirdNoticeGroupEventDo.TableName()
	_thirdNoticeGroupEvent.ALL = field.NewAsterisk(tableName)
	_thirdNoticeGroupEvent.ID = field.NewInt64(tableName, "id")
	_thirdNoticeGroupEvent.GroupID = field.NewString(tableName, "group_id")
	_thirdNoticeGroupEvent.EventID = field.NewInt32(tableName, "event_id")
	_thirdNoticeGroupEvent.PlanID = field.NewString(tableName, "plan_id")
	_thirdNoticeGroupEvent.TeamID = field.NewString(tableName, "team_id")
	_thirdNoticeGroupEvent.CreatedAt = field.NewTime(tableName, "created_at")
	_thirdNoticeGroupEvent.UpdatedAt = field.NewTime(tableName, "updated_at")
	_thirdNoticeGroupEvent.DeletedAt = field.NewField(tableName, "deleted_at")

	_thirdNoticeGroupEvent.fillFieldMap()

	return _thirdNoticeGroupEvent
}

type thirdNoticeGroupEvent struct {
	thirdNoticeGroupEventDo thirdNoticeGroupEventDo

	ALL       field.Asterisk
	ID        field.Int64  // 主键id
	GroupID   field.String // 通知组id
	EventID   field.Int32  // 事件id
	PlanID    field.String // 计划ID
	TeamID    field.String // 团队ID
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (t thirdNoticeGroupEvent) Table(newTableName string) *thirdNoticeGroupEvent {
	t.thirdNoticeGroupEventDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t thirdNoticeGroupEvent) As(alias string) *thirdNoticeGroupEvent {
	t.thirdNoticeGroupEventDo.DO = *(t.thirdNoticeGroupEventDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *thirdNoticeGroupEvent) updateTableName(table string) *thirdNoticeGroupEvent {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.GroupID = field.NewString(table, "group_id")
	t.EventID = field.NewInt32(table, "event_id")
	t.PlanID = field.NewString(table, "plan_id")
	t.TeamID = field.NewString(table, "team_id")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *thirdNoticeGroupEvent) WithContext(ctx context.Context) *thirdNoticeGroupEventDo {
	return t.thirdNoticeGroupEventDo.WithContext(ctx)
}

func (t thirdNoticeGroupEvent) TableName() string { return t.thirdNoticeGroupEventDo.TableName() }

func (t thirdNoticeGroupEvent) Alias() string { return t.thirdNoticeGroupEventDo.Alias() }

func (t *thirdNoticeGroupEvent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *thirdNoticeGroupEvent) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 8)
	t.fieldMap["id"] = t.ID
	t.fieldMap["group_id"] = t.GroupID
	t.fieldMap["event_id"] = t.EventID
	t.fieldMap["plan_id"] = t.PlanID
	t.fieldMap["team_id"] = t.TeamID
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t thirdNoticeGroupEvent) clone(db *gorm.DB) thirdNoticeGroupEvent {
	t.thirdNoticeGroupEventDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t thirdNoticeGroupEvent) replaceDB(db *gorm.DB) thirdNoticeGroupEvent {
	t.thirdNoticeGroupEventDo.ReplaceDB(db)
	return t
}

type thirdNoticeGroupEventDo struct{ gen.DO }

func (t thirdNoticeGroupEventDo) Debug() *thirdNoticeGroupEventDo {
	return t.withDO(t.DO.Debug())
}

func (t thirdNoticeGroupEventDo) WithContext(ctx context.Context) *thirdNoticeGroupEventDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t thirdNoticeGroupEventDo) ReadDB() *thirdNoticeGroupEventDo {
	return t.Clauses(dbresolver.Read)
}

func (t thirdNoticeGroupEventDo) WriteDB() *thirdNoticeGroupEventDo {
	return t.Clauses(dbresolver.Write)
}

func (t thirdNoticeGroupEventDo) Session(config *gorm.Session) *thirdNoticeGroupEventDo {
	return t.withDO(t.DO.Session(config))
}

func (t thirdNoticeGroupEventDo) Clauses(conds ...clause.Expression) *thirdNoticeGroupEventDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t thirdNoticeGroupEventDo) Returning(value interface{}, columns ...string) *thirdNoticeGroupEventDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t thirdNoticeGroupEventDo) Not(conds ...gen.Condition) *thirdNoticeGroupEventDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t thirdNoticeGroupEventDo) Or(conds ...gen.Condition) *thirdNoticeGroupEventDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t thirdNoticeGroupEventDo) Select(conds ...field.Expr) *thirdNoticeGroupEventDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t thirdNoticeGroupEventDo) Where(conds ...gen.Condition) *thirdNoticeGroupEventDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t thirdNoticeGroupEventDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *thirdNoticeGroupEventDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t thirdNoticeGroupEventDo) Order(conds ...field.Expr) *thirdNoticeGroupEventDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t thirdNoticeGroupEventDo) Distinct(cols ...field.Expr) *thirdNoticeGroupEventDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t thirdNoticeGroupEventDo) Omit(cols ...field.Expr) *thirdNoticeGroupEventDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t thirdNoticeGroupEventDo) Join(table schema.Tabler, on ...field.Expr) *thirdNoticeGroupEventDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t thirdNoticeGroupEventDo) LeftJoin(table schema.Tabler, on ...field.Expr) *thirdNoticeGroupEventDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t thirdNoticeGroupEventDo) RightJoin(table schema.Tabler, on ...field.Expr) *thirdNoticeGroupEventDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t thirdNoticeGroupEventDo) Group(cols ...field.Expr) *thirdNoticeGroupEventDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t thirdNoticeGroupEventDo) Having(conds ...gen.Condition) *thirdNoticeGroupEventDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t thirdNoticeGroupEventDo) Limit(limit int) *thirdNoticeGroupEventDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t thirdNoticeGroupEventDo) Offset(offset int) *thirdNoticeGroupEventDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t thirdNoticeGroupEventDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *thirdNoticeGroupEventDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t thirdNoticeGroupEventDo) Unscoped() *thirdNoticeGroupEventDo {
	return t.withDO(t.DO.Unscoped())
}

func (t thirdNoticeGroupEventDo) Create(values ...*model.ThirdNoticeGroupEvent) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t thirdNoticeGroupEventDo) CreateInBatches(values []*model.ThirdNoticeGroupEvent, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t thirdNoticeGroupEventDo) Save(values ...*model.ThirdNoticeGroupEvent) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t thirdNoticeGroupEventDo) First() (*model.ThirdNoticeGroupEvent, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThirdNoticeGroupEvent), nil
	}
}

func (t thirdNoticeGroupEventDo) Take() (*model.ThirdNoticeGroupEvent, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThirdNoticeGroupEvent), nil
	}
}

func (t thirdNoticeGroupEventDo) Last() (*model.ThirdNoticeGroupEvent, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThirdNoticeGroupEvent), nil
	}
}

func (t thirdNoticeGroupEventDo) Find() ([]*model.ThirdNoticeGroupEvent, error) {
	result, err := t.DO.Find()
	return result.([]*model.ThirdNoticeGroupEvent), err
}

func (t thirdNoticeGroupEventDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ThirdNoticeGroupEvent, err error) {
	buf := make([]*model.ThirdNoticeGroupEvent, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t thirdNoticeGroupEventDo) FindInBatches(result *[]*model.ThirdNoticeGroupEvent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t thirdNoticeGroupEventDo) Attrs(attrs ...field.AssignExpr) *thirdNoticeGroupEventDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t thirdNoticeGroupEventDo) Assign(attrs ...field.AssignExpr) *thirdNoticeGroupEventDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t thirdNoticeGroupEventDo) Joins(fields ...field.RelationField) *thirdNoticeGroupEventDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t thirdNoticeGroupEventDo) Preload(fields ...field.RelationField) *thirdNoticeGroupEventDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t thirdNoticeGroupEventDo) FirstOrInit() (*model.ThirdNoticeGroupEvent, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThirdNoticeGroupEvent), nil
	}
}

func (t thirdNoticeGroupEventDo) FirstOrCreate() (*model.ThirdNoticeGroupEvent, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThirdNoticeGroupEvent), nil
	}
}

func (t thirdNoticeGroupEventDo) FindByPage(offset int, limit int) (result []*model.ThirdNoticeGroupEvent, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t thirdNoticeGroupEventDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t thirdNoticeGroupEventDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t thirdNoticeGroupEventDo) Delete(models ...*model.ThirdNoticeGroupEvent) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *thirdNoticeGroupEventDo) withDO(do gen.Dao) *thirdNoticeGroupEventDo {
	t.DO = *do.(*gen.DO)
	return t
}
