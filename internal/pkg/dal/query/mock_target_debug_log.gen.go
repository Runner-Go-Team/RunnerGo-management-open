// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Runner-Go-Team/RunnerGo-management-open/internal/pkg/dal/model"
)

func newMockTargetDebugLog(db *gorm.DB, opts ...gen.DOOption) mockTargetDebugLog {
	_mockTargetDebugLog := mockTargetDebugLog{}

	_mockTargetDebugLog.mockTargetDebugLogDo.UseDB(db, opts...)
	_mockTargetDebugLog.mockTargetDebugLogDo.UseModel(&model.MockTargetDebugLog{})

	tableName := _mockTargetDebugLog.mockTargetDebugLogDo.TableName()
	_mockTargetDebugLog.ALL = field.NewAsterisk(tableName)
	_mockTargetDebugLog.ID = field.NewInt64(tableName, "id")
	_mockTargetDebugLog.TargetID = field.NewString(tableName, "target_id")
	_mockTargetDebugLog.TargetType = field.NewInt32(tableName, "target_type")
	_mockTargetDebugLog.TeamID = field.NewString(tableName, "team_id")
	_mockTargetDebugLog.CreatedAt = field.NewTime(tableName, "created_at")
	_mockTargetDebugLog.UpdatedAt = field.NewTime(tableName, "updated_at")
	_mockTargetDebugLog.DeletedAt = field.NewField(tableName, "deleted_at")

	_mockTargetDebugLog.fillFieldMap()

	return _mockTargetDebugLog
}

type mockTargetDebugLog struct {
	mockTargetDebugLogDo mockTargetDebugLogDo

	ALL        field.Asterisk
	ID         field.Int64  // 主键ID
	TargetID   field.String // 目标唯一ID
	TargetType field.Int32  // 目标类型：1-api，2-scene
	TeamID     field.String // 团队ID
	CreatedAt  field.Time   // 创建时间
	UpdatedAt  field.Time   // 更新时间
	DeletedAt  field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (m mockTargetDebugLog) Table(newTableName string) *mockTargetDebugLog {
	m.mockTargetDebugLogDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m mockTargetDebugLog) As(alias string) *mockTargetDebugLog {
	m.mockTargetDebugLogDo.DO = *(m.mockTargetDebugLogDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *mockTargetDebugLog) updateTableName(table string) *mockTargetDebugLog {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt64(table, "id")
	m.TargetID = field.NewString(table, "target_id")
	m.TargetType = field.NewInt32(table, "target_type")
	m.TeamID = field.NewString(table, "team_id")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")
	m.DeletedAt = field.NewField(table, "deleted_at")

	m.fillFieldMap()

	return m
}

func (m *mockTargetDebugLog) WithContext(ctx context.Context) *mockTargetDebugLogDo {
	return m.mockTargetDebugLogDo.WithContext(ctx)
}

func (m mockTargetDebugLog) TableName() string { return m.mockTargetDebugLogDo.TableName() }

func (m mockTargetDebugLog) Alias() string { return m.mockTargetDebugLogDo.Alias() }

func (m *mockTargetDebugLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *mockTargetDebugLog) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 7)
	m.fieldMap["id"] = m.ID
	m.fieldMap["target_id"] = m.TargetID
	m.fieldMap["target_type"] = m.TargetType
	m.fieldMap["team_id"] = m.TeamID
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["deleted_at"] = m.DeletedAt
}

func (m mockTargetDebugLog) clone(db *gorm.DB) mockTargetDebugLog {
	m.mockTargetDebugLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m mockTargetDebugLog) replaceDB(db *gorm.DB) mockTargetDebugLog {
	m.mockTargetDebugLogDo.ReplaceDB(db)
	return m
}

type mockTargetDebugLogDo struct{ gen.DO }

func (m mockTargetDebugLogDo) Debug() *mockTargetDebugLogDo {
	return m.withDO(m.DO.Debug())
}

func (m mockTargetDebugLogDo) WithContext(ctx context.Context) *mockTargetDebugLogDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m mockTargetDebugLogDo) ReadDB() *mockTargetDebugLogDo {
	return m.Clauses(dbresolver.Read)
}

func (m mockTargetDebugLogDo) WriteDB() *mockTargetDebugLogDo {
	return m.Clauses(dbresolver.Write)
}

func (m mockTargetDebugLogDo) Session(config *gorm.Session) *mockTargetDebugLogDo {
	return m.withDO(m.DO.Session(config))
}

func (m mockTargetDebugLogDo) Clauses(conds ...clause.Expression) *mockTargetDebugLogDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m mockTargetDebugLogDo) Returning(value interface{}, columns ...string) *mockTargetDebugLogDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m mockTargetDebugLogDo) Not(conds ...gen.Condition) *mockTargetDebugLogDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m mockTargetDebugLogDo) Or(conds ...gen.Condition) *mockTargetDebugLogDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m mockTargetDebugLogDo) Select(conds ...field.Expr) *mockTargetDebugLogDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m mockTargetDebugLogDo) Where(conds ...gen.Condition) *mockTargetDebugLogDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m mockTargetDebugLogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *mockTargetDebugLogDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m mockTargetDebugLogDo) Order(conds ...field.Expr) *mockTargetDebugLogDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m mockTargetDebugLogDo) Distinct(cols ...field.Expr) *mockTargetDebugLogDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m mockTargetDebugLogDo) Omit(cols ...field.Expr) *mockTargetDebugLogDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m mockTargetDebugLogDo) Join(table schema.Tabler, on ...field.Expr) *mockTargetDebugLogDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m mockTargetDebugLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) *mockTargetDebugLogDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m mockTargetDebugLogDo) RightJoin(table schema.Tabler, on ...field.Expr) *mockTargetDebugLogDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m mockTargetDebugLogDo) Group(cols ...field.Expr) *mockTargetDebugLogDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m mockTargetDebugLogDo) Having(conds ...gen.Condition) *mockTargetDebugLogDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m mockTargetDebugLogDo) Limit(limit int) *mockTargetDebugLogDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m mockTargetDebugLogDo) Offset(offset int) *mockTargetDebugLogDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m mockTargetDebugLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *mockTargetDebugLogDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m mockTargetDebugLogDo) Unscoped() *mockTargetDebugLogDo {
	return m.withDO(m.DO.Unscoped())
}

func (m mockTargetDebugLogDo) Create(values ...*model.MockTargetDebugLog) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m mockTargetDebugLogDo) CreateInBatches(values []*model.MockTargetDebugLog, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m mockTargetDebugLogDo) Save(values ...*model.MockTargetDebugLog) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m mockTargetDebugLogDo) First() (*model.MockTargetDebugLog, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MockTargetDebugLog), nil
	}
}

func (m mockTargetDebugLogDo) Take() (*model.MockTargetDebugLog, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MockTargetDebugLog), nil
	}
}

func (m mockTargetDebugLogDo) Last() (*model.MockTargetDebugLog, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MockTargetDebugLog), nil
	}
}

func (m mockTargetDebugLogDo) Find() ([]*model.MockTargetDebugLog, error) {
	result, err := m.DO.Find()
	return result.([]*model.MockTargetDebugLog), err
}

func (m mockTargetDebugLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MockTargetDebugLog, err error) {
	buf := make([]*model.MockTargetDebugLog, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m mockTargetDebugLogDo) FindInBatches(result *[]*model.MockTargetDebugLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m mockTargetDebugLogDo) Attrs(attrs ...field.AssignExpr) *mockTargetDebugLogDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m mockTargetDebugLogDo) Assign(attrs ...field.AssignExpr) *mockTargetDebugLogDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m mockTargetDebugLogDo) Joins(fields ...field.RelationField) *mockTargetDebugLogDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m mockTargetDebugLogDo) Preload(fields ...field.RelationField) *mockTargetDebugLogDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m mockTargetDebugLogDo) FirstOrInit() (*model.MockTargetDebugLog, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MockTargetDebugLog), nil
	}
}

func (m mockTargetDebugLogDo) FirstOrCreate() (*model.MockTargetDebugLog, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MockTargetDebugLog), nil
	}
}

func (m mockTargetDebugLogDo) FindByPage(offset int, limit int) (result []*model.MockTargetDebugLog, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m mockTargetDebugLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m mockTargetDebugLogDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m mockTargetDebugLogDo) Delete(models ...*model.MockTargetDebugLog) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *mockTargetDebugLogDo) withDO(do gen.Dao) *mockTargetDebugLogDo {
	m.DO = *do.(*gen.DO)
	return m
}
