// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Runner-Go-Team/RunnerGo-management-open/internal/pkg/dal/model"
)

func newThirdNotice(db *gorm.DB, opts ...gen.DOOption) thirdNotice {
	_thirdNotice := thirdNotice{}

	_thirdNotice.thirdNoticeDo.UseDB(db, opts...)
	_thirdNotice.thirdNoticeDo.UseModel(&model.ThirdNotice{})

	tableName := _thirdNotice.thirdNoticeDo.TableName()
	_thirdNotice.ALL = field.NewAsterisk(tableName)
	_thirdNotice.ID = field.NewInt64(tableName, "id")
	_thirdNotice.NoticeID = field.NewString(tableName, "notice_id")
	_thirdNotice.Name = field.NewString(tableName, "name")
	_thirdNotice.ChannelID = field.NewInt64(tableName, "channel_id")
	_thirdNotice.Params = field.NewString(tableName, "params")
	_thirdNotice.Status = field.NewInt32(tableName, "status")
	_thirdNotice.CreatedAt = field.NewTime(tableName, "created_at")
	_thirdNotice.UpdatedAt = field.NewTime(tableName, "updated_at")
	_thirdNotice.DeletedAt = field.NewField(tableName, "deleted_at")

	_thirdNotice.fillFieldMap()

	return _thirdNotice
}

type thirdNotice struct {
	thirdNoticeDo thirdNoticeDo

	ALL       field.Asterisk
	ID        field.Int64  // 主键id
	NoticeID  field.String // 通知id
	Name      field.String // 通知名称
	ChannelID field.Int64  // 三方通知渠道id
	Params    field.String // 通知参数
	Status    field.Int32  // 1:启用 2:禁用
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (t thirdNotice) Table(newTableName string) *thirdNotice {
	t.thirdNoticeDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t thirdNotice) As(alias string) *thirdNotice {
	t.thirdNoticeDo.DO = *(t.thirdNoticeDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *thirdNotice) updateTableName(table string) *thirdNotice {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.NoticeID = field.NewString(table, "notice_id")
	t.Name = field.NewString(table, "name")
	t.ChannelID = field.NewInt64(table, "channel_id")
	t.Params = field.NewString(table, "params")
	t.Status = field.NewInt32(table, "status")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *thirdNotice) WithContext(ctx context.Context) *thirdNoticeDo {
	return t.thirdNoticeDo.WithContext(ctx)
}

func (t thirdNotice) TableName() string { return t.thirdNoticeDo.TableName() }

func (t thirdNotice) Alias() string { return t.thirdNoticeDo.Alias() }

func (t *thirdNotice) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *thirdNotice) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 9)
	t.fieldMap["id"] = t.ID
	t.fieldMap["notice_id"] = t.NoticeID
	t.fieldMap["name"] = t.Name
	t.fieldMap["channel_id"] = t.ChannelID
	t.fieldMap["params"] = t.Params
	t.fieldMap["status"] = t.Status
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t thirdNotice) clone(db *gorm.DB) thirdNotice {
	t.thirdNoticeDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t thirdNotice) replaceDB(db *gorm.DB) thirdNotice {
	t.thirdNoticeDo.ReplaceDB(db)
	return t
}

type thirdNoticeDo struct{ gen.DO }

func (t thirdNoticeDo) Debug() *thirdNoticeDo {
	return t.withDO(t.DO.Debug())
}

func (t thirdNoticeDo) WithContext(ctx context.Context) *thirdNoticeDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t thirdNoticeDo) ReadDB() *thirdNoticeDo {
	return t.Clauses(dbresolver.Read)
}

func (t thirdNoticeDo) WriteDB() *thirdNoticeDo {
	return t.Clauses(dbresolver.Write)
}

func (t thirdNoticeDo) Session(config *gorm.Session) *thirdNoticeDo {
	return t.withDO(t.DO.Session(config))
}

func (t thirdNoticeDo) Clauses(conds ...clause.Expression) *thirdNoticeDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t thirdNoticeDo) Returning(value interface{}, columns ...string) *thirdNoticeDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t thirdNoticeDo) Not(conds ...gen.Condition) *thirdNoticeDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t thirdNoticeDo) Or(conds ...gen.Condition) *thirdNoticeDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t thirdNoticeDo) Select(conds ...field.Expr) *thirdNoticeDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t thirdNoticeDo) Where(conds ...gen.Condition) *thirdNoticeDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t thirdNoticeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *thirdNoticeDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t thirdNoticeDo) Order(conds ...field.Expr) *thirdNoticeDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t thirdNoticeDo) Distinct(cols ...field.Expr) *thirdNoticeDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t thirdNoticeDo) Omit(cols ...field.Expr) *thirdNoticeDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t thirdNoticeDo) Join(table schema.Tabler, on ...field.Expr) *thirdNoticeDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t thirdNoticeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *thirdNoticeDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t thirdNoticeDo) RightJoin(table schema.Tabler, on ...field.Expr) *thirdNoticeDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t thirdNoticeDo) Group(cols ...field.Expr) *thirdNoticeDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t thirdNoticeDo) Having(conds ...gen.Condition) *thirdNoticeDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t thirdNoticeDo) Limit(limit int) *thirdNoticeDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t thirdNoticeDo) Offset(offset int) *thirdNoticeDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t thirdNoticeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *thirdNoticeDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t thirdNoticeDo) Unscoped() *thirdNoticeDo {
	return t.withDO(t.DO.Unscoped())
}

func (t thirdNoticeDo) Create(values ...*model.ThirdNotice) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t thirdNoticeDo) CreateInBatches(values []*model.ThirdNotice, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t thirdNoticeDo) Save(values ...*model.ThirdNotice) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t thirdNoticeDo) First() (*model.ThirdNotice, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThirdNotice), nil
	}
}

func (t thirdNoticeDo) Take() (*model.ThirdNotice, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThirdNotice), nil
	}
}

func (t thirdNoticeDo) Last() (*model.ThirdNotice, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThirdNotice), nil
	}
}

func (t thirdNoticeDo) Find() ([]*model.ThirdNotice, error) {
	result, err := t.DO.Find()
	return result.([]*model.ThirdNotice), err
}

func (t thirdNoticeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ThirdNotice, err error) {
	buf := make([]*model.ThirdNotice, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t thirdNoticeDo) FindInBatches(result *[]*model.ThirdNotice, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t thirdNoticeDo) Attrs(attrs ...field.AssignExpr) *thirdNoticeDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t thirdNoticeDo) Assign(attrs ...field.AssignExpr) *thirdNoticeDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t thirdNoticeDo) Joins(fields ...field.RelationField) *thirdNoticeDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t thirdNoticeDo) Preload(fields ...field.RelationField) *thirdNoticeDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t thirdNoticeDo) FirstOrInit() (*model.ThirdNotice, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThirdNotice), nil
	}
}

func (t thirdNoticeDo) FirstOrCreate() (*model.ThirdNotice, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThirdNotice), nil
	}
}

func (t thirdNoticeDo) FindByPage(offset int, limit int) (result []*model.ThirdNotice, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t thirdNoticeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t thirdNoticeDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t thirdNoticeDo) Delete(models ...*model.ThirdNotice) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *thirdNoticeDo) withDO(do gen.Dao) *thirdNoticeDo {
	t.DO = *do.(*gen.DO)
	return t
}
