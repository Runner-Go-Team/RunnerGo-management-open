// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Runner-Go-Team/RunnerGo-management-open/internal/pkg/dal/model"
)

func newUISceneSync(db *gorm.DB, opts ...gen.DOOption) uISceneSync {
	_uISceneSync := uISceneSync{}

	_uISceneSync.uISceneSyncDo.UseDB(db, opts...)
	_uISceneSync.uISceneSyncDo.UseModel(&model.UISceneSync{})

	tableName := _uISceneSync.uISceneSyncDo.TableName()
	_uISceneSync.ALL = field.NewAsterisk(tableName)
	_uISceneSync.ID = field.NewInt64(tableName, "id")
	_uISceneSync.SceneID = field.NewString(tableName, "scene_id")
	_uISceneSync.SourceSceneID = field.NewString(tableName, "source_scene_id")
	_uISceneSync.TeamID = field.NewString(tableName, "team_id")
	_uISceneSync.SyncMode = field.NewInt32(tableName, "sync_mode")
	_uISceneSync.CreatedAt = field.NewTime(tableName, "created_at")
	_uISceneSync.UpdatedAt = field.NewTime(tableName, "updated_at")
	_uISceneSync.DeletedAt = field.NewField(tableName, "deleted_at")

	_uISceneSync.fillFieldMap()

	return _uISceneSync
}

type uISceneSync struct {
	uISceneSyncDo uISceneSyncDo

	ALL           field.Asterisk
	ID            field.Int64  // 主键ID
	SceneID       field.String // 场景ID
	SourceSceneID field.String // 引用场景ID
	TeamID        field.String // 团队id
	SyncMode      field.Int32  // 状态：1-实时，2-手动,已场景为准   3-手动,已计划为准
	CreatedAt     field.Time   // 创建时间
	UpdatedAt     field.Time   // 修改时间
	DeletedAt     field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (u uISceneSync) Table(newTableName string) *uISceneSync {
	u.uISceneSyncDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u uISceneSync) As(alias string) *uISceneSync {
	u.uISceneSyncDo.DO = *(u.uISceneSyncDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *uISceneSync) updateTableName(table string) *uISceneSync {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.SceneID = field.NewString(table, "scene_id")
	u.SourceSceneID = field.NewString(table, "source_scene_id")
	u.TeamID = field.NewString(table, "team_id")
	u.SyncMode = field.NewInt32(table, "sync_mode")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")

	u.fillFieldMap()

	return u
}

func (u *uISceneSync) WithContext(ctx context.Context) *uISceneSyncDo {
	return u.uISceneSyncDo.WithContext(ctx)
}

func (u uISceneSync) TableName() string { return u.uISceneSyncDo.TableName() }

func (u uISceneSync) Alias() string { return u.uISceneSyncDo.Alias() }

func (u *uISceneSync) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *uISceneSync) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 8)
	u.fieldMap["id"] = u.ID
	u.fieldMap["scene_id"] = u.SceneID
	u.fieldMap["source_scene_id"] = u.SourceSceneID
	u.fieldMap["team_id"] = u.TeamID
	u.fieldMap["sync_mode"] = u.SyncMode
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
}

func (u uISceneSync) clone(db *gorm.DB) uISceneSync {
	u.uISceneSyncDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u uISceneSync) replaceDB(db *gorm.DB) uISceneSync {
	u.uISceneSyncDo.ReplaceDB(db)
	return u
}

type uISceneSyncDo struct{ gen.DO }

func (u uISceneSyncDo) Debug() *uISceneSyncDo {
	return u.withDO(u.DO.Debug())
}

func (u uISceneSyncDo) WithContext(ctx context.Context) *uISceneSyncDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u uISceneSyncDo) ReadDB() *uISceneSyncDo {
	return u.Clauses(dbresolver.Read)
}

func (u uISceneSyncDo) WriteDB() *uISceneSyncDo {
	return u.Clauses(dbresolver.Write)
}

func (u uISceneSyncDo) Session(config *gorm.Session) *uISceneSyncDo {
	return u.withDO(u.DO.Session(config))
}

func (u uISceneSyncDo) Clauses(conds ...clause.Expression) *uISceneSyncDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u uISceneSyncDo) Returning(value interface{}, columns ...string) *uISceneSyncDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u uISceneSyncDo) Not(conds ...gen.Condition) *uISceneSyncDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u uISceneSyncDo) Or(conds ...gen.Condition) *uISceneSyncDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u uISceneSyncDo) Select(conds ...field.Expr) *uISceneSyncDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u uISceneSyncDo) Where(conds ...gen.Condition) *uISceneSyncDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u uISceneSyncDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *uISceneSyncDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u uISceneSyncDo) Order(conds ...field.Expr) *uISceneSyncDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u uISceneSyncDo) Distinct(cols ...field.Expr) *uISceneSyncDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u uISceneSyncDo) Omit(cols ...field.Expr) *uISceneSyncDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u uISceneSyncDo) Join(table schema.Tabler, on ...field.Expr) *uISceneSyncDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u uISceneSyncDo) LeftJoin(table schema.Tabler, on ...field.Expr) *uISceneSyncDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u uISceneSyncDo) RightJoin(table schema.Tabler, on ...field.Expr) *uISceneSyncDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u uISceneSyncDo) Group(cols ...field.Expr) *uISceneSyncDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u uISceneSyncDo) Having(conds ...gen.Condition) *uISceneSyncDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u uISceneSyncDo) Limit(limit int) *uISceneSyncDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u uISceneSyncDo) Offset(offset int) *uISceneSyncDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u uISceneSyncDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *uISceneSyncDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u uISceneSyncDo) Unscoped() *uISceneSyncDo {
	return u.withDO(u.DO.Unscoped())
}

func (u uISceneSyncDo) Create(values ...*model.UISceneSync) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u uISceneSyncDo) CreateInBatches(values []*model.UISceneSync, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u uISceneSyncDo) Save(values ...*model.UISceneSync) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u uISceneSyncDo) First() (*model.UISceneSync, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UISceneSync), nil
	}
}

func (u uISceneSyncDo) Take() (*model.UISceneSync, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UISceneSync), nil
	}
}

func (u uISceneSyncDo) Last() (*model.UISceneSync, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UISceneSync), nil
	}
}

func (u uISceneSyncDo) Find() ([]*model.UISceneSync, error) {
	result, err := u.DO.Find()
	return result.([]*model.UISceneSync), err
}

func (u uISceneSyncDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UISceneSync, err error) {
	buf := make([]*model.UISceneSync, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u uISceneSyncDo) FindInBatches(result *[]*model.UISceneSync, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u uISceneSyncDo) Attrs(attrs ...field.AssignExpr) *uISceneSyncDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u uISceneSyncDo) Assign(attrs ...field.AssignExpr) *uISceneSyncDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u uISceneSyncDo) Joins(fields ...field.RelationField) *uISceneSyncDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u uISceneSyncDo) Preload(fields ...field.RelationField) *uISceneSyncDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u uISceneSyncDo) FirstOrInit() (*model.UISceneSync, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UISceneSync), nil
	}
}

func (u uISceneSyncDo) FirstOrCreate() (*model.UISceneSync, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UISceneSync), nil
	}
}

func (u uISceneSyncDo) FindByPage(offset int, limit int) (result []*model.UISceneSync, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u uISceneSyncDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u uISceneSyncDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u uISceneSyncDo) Delete(models ...*model.UISceneSync) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *uISceneSyncDo) withDO(do gen.Dao) *uISceneSyncDo {
	u.DO = *do.(*gen.DO)
	return u
}
