// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Runner-Go-Team/RunnerGo-management-open/internal/pkg/dal/model"
)

func newMockTarget(db *gorm.DB, opts ...gen.DOOption) mockTarget {
	_mockTarget := mockTarget{}

	_mockTarget.mockTargetDo.UseDB(db, opts...)
	_mockTarget.mockTargetDo.UseModel(&model.MockTarget{})

	tableName := _mockTarget.mockTargetDo.TableName()
	_mockTarget.ALL = field.NewAsterisk(tableName)
	_mockTarget.ID = field.NewInt64(tableName, "id")
	_mockTarget.TargetID = field.NewString(tableName, "target_id")
	_mockTarget.TeamID = field.NewString(tableName, "team_id")
	_mockTarget.TargetType = field.NewString(tableName, "target_type")
	_mockTarget.Name = field.NewString(tableName, "name")
	_mockTarget.ParentID = field.NewString(tableName, "parent_id")
	_mockTarget.Method = field.NewString(tableName, "method")
	_mockTarget.Sort = field.NewInt32(tableName, "sort")
	_mockTarget.TypeSort = field.NewInt32(tableName, "type_sort")
	_mockTarget.Status = field.NewInt32(tableName, "status")
	_mockTarget.Version = field.NewInt32(tableName, "version")
	_mockTarget.CreatedUserID = field.NewString(tableName, "created_user_id")
	_mockTarget.RecentUserID = field.NewString(tableName, "recent_user_id")
	_mockTarget.Description = field.NewString(tableName, "description")
	_mockTarget.Source = field.NewInt32(tableName, "source")
	_mockTarget.PlanID = field.NewString(tableName, "plan_id")
	_mockTarget.SourceID = field.NewString(tableName, "source_id")
	_mockTarget.IsChecked = field.NewInt32(tableName, "is_checked")
	_mockTarget.IsDisabled = field.NewInt32(tableName, "is_disabled")
	_mockTarget.CreatedAt = field.NewTime(tableName, "created_at")
	_mockTarget.UpdatedAt = field.NewTime(tableName, "updated_at")
	_mockTarget.DeletedAt = field.NewField(tableName, "deleted_at")

	_mockTarget.fillFieldMap()

	return _mockTarget
}

type mockTarget struct {
	mockTargetDo mockTargetDo

	ALL           field.Asterisk
	ID            field.Int64  // id
	TargetID      field.String // 全局唯一ID
	TeamID        field.String // 团队id
	TargetType    field.String // 类型：文件夹，接口，分组，场景,测试用例
	Name          field.String // 名称
	ParentID      field.String // 父级ID
	Method        field.String // 方法
	Sort          field.Int32  // 排序
	TypeSort      field.Int32  // 类型排序
	Status        field.Int32  // 回收站状态：1-正常，2-回收站
	Version       field.Int32  // 产品版本号
	CreatedUserID field.String // 创建人ID
	RecentUserID  field.String // 最近修改人ID
	Description   field.String // 备注
	Source        field.Int32  // 数据来源：0-mock管理
	PlanID        field.String // 计划id
	SourceID      field.String // 引用来源ID
	IsChecked     field.Int32  // 是否开启：1-开启，2-关闭
	IsDisabled    field.Int32  // 运行计划时是否禁用：0-不禁用，1-禁用
	CreatedAt     field.Time   // 创建时间
	UpdatedAt     field.Time   // 更新时间
	DeletedAt     field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (m mockTarget) Table(newTableName string) *mockTarget {
	m.mockTargetDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m mockTarget) As(alias string) *mockTarget {
	m.mockTargetDo.DO = *(m.mockTargetDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *mockTarget) updateTableName(table string) *mockTarget {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt64(table, "id")
	m.TargetID = field.NewString(table, "target_id")
	m.TeamID = field.NewString(table, "team_id")
	m.TargetType = field.NewString(table, "target_type")
	m.Name = field.NewString(table, "name")
	m.ParentID = field.NewString(table, "parent_id")
	m.Method = field.NewString(table, "method")
	m.Sort = field.NewInt32(table, "sort")
	m.TypeSort = field.NewInt32(table, "type_sort")
	m.Status = field.NewInt32(table, "status")
	m.Version = field.NewInt32(table, "version")
	m.CreatedUserID = field.NewString(table, "created_user_id")
	m.RecentUserID = field.NewString(table, "recent_user_id")
	m.Description = field.NewString(table, "description")
	m.Source = field.NewInt32(table, "source")
	m.PlanID = field.NewString(table, "plan_id")
	m.SourceID = field.NewString(table, "source_id")
	m.IsChecked = field.NewInt32(table, "is_checked")
	m.IsDisabled = field.NewInt32(table, "is_disabled")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")
	m.DeletedAt = field.NewField(table, "deleted_at")

	m.fillFieldMap()

	return m
}

func (m *mockTarget) WithContext(ctx context.Context) *mockTargetDo {
	return m.mockTargetDo.WithContext(ctx)
}

func (m mockTarget) TableName() string { return m.mockTargetDo.TableName() }

func (m mockTarget) Alias() string { return m.mockTargetDo.Alias() }

func (m *mockTarget) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *mockTarget) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 22)
	m.fieldMap["id"] = m.ID
	m.fieldMap["target_id"] = m.TargetID
	m.fieldMap["team_id"] = m.TeamID
	m.fieldMap["target_type"] = m.TargetType
	m.fieldMap["name"] = m.Name
	m.fieldMap["parent_id"] = m.ParentID
	m.fieldMap["method"] = m.Method
	m.fieldMap["sort"] = m.Sort
	m.fieldMap["type_sort"] = m.TypeSort
	m.fieldMap["status"] = m.Status
	m.fieldMap["version"] = m.Version
	m.fieldMap["created_user_id"] = m.CreatedUserID
	m.fieldMap["recent_user_id"] = m.RecentUserID
	m.fieldMap["description"] = m.Description
	m.fieldMap["source"] = m.Source
	m.fieldMap["plan_id"] = m.PlanID
	m.fieldMap["source_id"] = m.SourceID
	m.fieldMap["is_checked"] = m.IsChecked
	m.fieldMap["is_disabled"] = m.IsDisabled
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["deleted_at"] = m.DeletedAt
}

func (m mockTarget) clone(db *gorm.DB) mockTarget {
	m.mockTargetDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m mockTarget) replaceDB(db *gorm.DB) mockTarget {
	m.mockTargetDo.ReplaceDB(db)
	return m
}

type mockTargetDo struct{ gen.DO }

func (m mockTargetDo) Debug() *mockTargetDo {
	return m.withDO(m.DO.Debug())
}

func (m mockTargetDo) WithContext(ctx context.Context) *mockTargetDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m mockTargetDo) ReadDB() *mockTargetDo {
	return m.Clauses(dbresolver.Read)
}

func (m mockTargetDo) WriteDB() *mockTargetDo {
	return m.Clauses(dbresolver.Write)
}

func (m mockTargetDo) Session(config *gorm.Session) *mockTargetDo {
	return m.withDO(m.DO.Session(config))
}

func (m mockTargetDo) Clauses(conds ...clause.Expression) *mockTargetDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m mockTargetDo) Returning(value interface{}, columns ...string) *mockTargetDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m mockTargetDo) Not(conds ...gen.Condition) *mockTargetDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m mockTargetDo) Or(conds ...gen.Condition) *mockTargetDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m mockTargetDo) Select(conds ...field.Expr) *mockTargetDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m mockTargetDo) Where(conds ...gen.Condition) *mockTargetDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m mockTargetDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *mockTargetDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m mockTargetDo) Order(conds ...field.Expr) *mockTargetDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m mockTargetDo) Distinct(cols ...field.Expr) *mockTargetDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m mockTargetDo) Omit(cols ...field.Expr) *mockTargetDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m mockTargetDo) Join(table schema.Tabler, on ...field.Expr) *mockTargetDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m mockTargetDo) LeftJoin(table schema.Tabler, on ...field.Expr) *mockTargetDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m mockTargetDo) RightJoin(table schema.Tabler, on ...field.Expr) *mockTargetDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m mockTargetDo) Group(cols ...field.Expr) *mockTargetDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m mockTargetDo) Having(conds ...gen.Condition) *mockTargetDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m mockTargetDo) Limit(limit int) *mockTargetDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m mockTargetDo) Offset(offset int) *mockTargetDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m mockTargetDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *mockTargetDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m mockTargetDo) Unscoped() *mockTargetDo {
	return m.withDO(m.DO.Unscoped())
}

func (m mockTargetDo) Create(values ...*model.MockTarget) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m mockTargetDo) CreateInBatches(values []*model.MockTarget, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m mockTargetDo) Save(values ...*model.MockTarget) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m mockTargetDo) First() (*model.MockTarget, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MockTarget), nil
	}
}

func (m mockTargetDo) Take() (*model.MockTarget, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MockTarget), nil
	}
}

func (m mockTargetDo) Last() (*model.MockTarget, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MockTarget), nil
	}
}

func (m mockTargetDo) Find() ([]*model.MockTarget, error) {
	result, err := m.DO.Find()
	return result.([]*model.MockTarget), err
}

func (m mockTargetDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MockTarget, err error) {
	buf := make([]*model.MockTarget, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m mockTargetDo) FindInBatches(result *[]*model.MockTarget, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m mockTargetDo) Attrs(attrs ...field.AssignExpr) *mockTargetDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m mockTargetDo) Assign(attrs ...field.AssignExpr) *mockTargetDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m mockTargetDo) Joins(fields ...field.RelationField) *mockTargetDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m mockTargetDo) Preload(fields ...field.RelationField) *mockTargetDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m mockTargetDo) FirstOrInit() (*model.MockTarget, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MockTarget), nil
	}
}

func (m mockTargetDo) FirstOrCreate() (*model.MockTarget, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MockTarget), nil
	}
}

func (m mockTargetDo) FindByPage(offset int, limit int) (result []*model.MockTarget, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m mockTargetDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m mockTargetDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m mockTargetDo) Delete(models ...*model.MockTarget) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *mockTargetDo) withDO(do gen.Dao) *mockTargetDo {
	m.DO = *do.(*gen.DO)
	return m
}
