// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Runner-Go-Team/RunnerGo-management-open/internal/pkg/dal/model"
)

func newAutoPlanReport(db *gorm.DB, opts ...gen.DOOption) autoPlanReport {
	_autoPlanReport := autoPlanReport{}

	_autoPlanReport.autoPlanReportDo.UseDB(db, opts...)
	_autoPlanReport.autoPlanReportDo.UseModel(&model.AutoPlanReport{})

	tableName := _autoPlanReport.autoPlanReportDo.TableName()
	_autoPlanReport.ALL = field.NewAsterisk(tableName)
	_autoPlanReport.ID = field.NewInt64(tableName, "id")
	_autoPlanReport.ReportID = field.NewString(tableName, "report_id")
	_autoPlanReport.ReportName = field.NewString(tableName, "report_name")
	_autoPlanReport.PlanID = field.NewString(tableName, "plan_id")
	_autoPlanReport.RankID = field.NewInt64(tableName, "rank_id")
	_autoPlanReport.PlanName = field.NewString(tableName, "plan_name")
	_autoPlanReport.TeamID = field.NewString(tableName, "team_id")
	_autoPlanReport.TaskType = field.NewInt32(tableName, "task_type")
	_autoPlanReport.TaskMode = field.NewInt32(tableName, "task_mode")
	_autoPlanReport.ControlMode = field.NewInt32(tableName, "control_mode")
	_autoPlanReport.SceneRunOrder = field.NewInt32(tableName, "scene_run_order")
	_autoPlanReport.TestCaseRunOrder = field.NewInt32(tableName, "test_case_run_order")
	_autoPlanReport.RunDurationTime = field.NewInt64(tableName, "run_duration_time")
	_autoPlanReport.Status = field.NewInt32(tableName, "status")
	_autoPlanReport.RunUserID = field.NewString(tableName, "run_user_id")
	_autoPlanReport.Remark = field.NewString(tableName, "remark")
	_autoPlanReport.CreatedAt = field.NewTime(tableName, "created_at")
	_autoPlanReport.UpdatedAt = field.NewTime(tableName, "updated_at")
	_autoPlanReport.DeletedAt = field.NewField(tableName, "deleted_at")

	_autoPlanReport.fillFieldMap()

	return _autoPlanReport
}

type autoPlanReport struct {
	autoPlanReportDo autoPlanReportDo

	ALL              field.Asterisk
	ID               field.Int64
	ReportID         field.String // 报告ID
	ReportName       field.String // 报告名称
	PlanID           field.String // 计划ID
	RankID           field.Int64  // 序号ID
	PlanName         field.String // 计划名称
	TeamID           field.String // 团队ID
	TaskType         field.Int32  // 任务类型
	TaskMode         field.Int32  // 运行模式：1-按测试用例运行
	ControlMode      field.Int32  // 控制模式：0-集中模式，1-单独模式
	SceneRunOrder    field.Int32  // 场景运行次序：1-顺序执行，2-同时执行
	TestCaseRunOrder field.Int32  // 测试用例运行次序：1-顺序执行，2-同时执行
	RunDurationTime  field.Int64  // 任务运行持续时长
	Status           field.Int32  // 报告状态1:进行中，2:已完成
	RunUserID        field.String // 启动人id
	Remark           field.String // 备注
	CreatedAt        field.Time   // 创建时间（执行时间）
	UpdatedAt        field.Time   // 更新时间
	DeletedAt        field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (a autoPlanReport) Table(newTableName string) *autoPlanReport {
	a.autoPlanReportDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a autoPlanReport) As(alias string) *autoPlanReport {
	a.autoPlanReportDo.DO = *(a.autoPlanReportDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *autoPlanReport) updateTableName(table string) *autoPlanReport {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.ReportID = field.NewString(table, "report_id")
	a.ReportName = field.NewString(table, "report_name")
	a.PlanID = field.NewString(table, "plan_id")
	a.RankID = field.NewInt64(table, "rank_id")
	a.PlanName = field.NewString(table, "plan_name")
	a.TeamID = field.NewString(table, "team_id")
	a.TaskType = field.NewInt32(table, "task_type")
	a.TaskMode = field.NewInt32(table, "task_mode")
	a.ControlMode = field.NewInt32(table, "control_mode")
	a.SceneRunOrder = field.NewInt32(table, "scene_run_order")
	a.TestCaseRunOrder = field.NewInt32(table, "test_case_run_order")
	a.RunDurationTime = field.NewInt64(table, "run_duration_time")
	a.Status = field.NewInt32(table, "status")
	a.RunUserID = field.NewString(table, "run_user_id")
	a.Remark = field.NewString(table, "remark")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.DeletedAt = field.NewField(table, "deleted_at")

	a.fillFieldMap()

	return a
}

func (a *autoPlanReport) WithContext(ctx context.Context) *autoPlanReportDo {
	return a.autoPlanReportDo.WithContext(ctx)
}

func (a autoPlanReport) TableName() string { return a.autoPlanReportDo.TableName() }

func (a autoPlanReport) Alias() string { return a.autoPlanReportDo.Alias() }

func (a *autoPlanReport) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *autoPlanReport) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 19)
	a.fieldMap["id"] = a.ID
	a.fieldMap["report_id"] = a.ReportID
	a.fieldMap["report_name"] = a.ReportName
	a.fieldMap["plan_id"] = a.PlanID
	a.fieldMap["rank_id"] = a.RankID
	a.fieldMap["plan_name"] = a.PlanName
	a.fieldMap["team_id"] = a.TeamID
	a.fieldMap["task_type"] = a.TaskType
	a.fieldMap["task_mode"] = a.TaskMode
	a.fieldMap["control_mode"] = a.ControlMode
	a.fieldMap["scene_run_order"] = a.SceneRunOrder
	a.fieldMap["test_case_run_order"] = a.TestCaseRunOrder
	a.fieldMap["run_duration_time"] = a.RunDurationTime
	a.fieldMap["status"] = a.Status
	a.fieldMap["run_user_id"] = a.RunUserID
	a.fieldMap["remark"] = a.Remark
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
}

func (a autoPlanReport) clone(db *gorm.DB) autoPlanReport {
	a.autoPlanReportDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a autoPlanReport) replaceDB(db *gorm.DB) autoPlanReport {
	a.autoPlanReportDo.ReplaceDB(db)
	return a
}

type autoPlanReportDo struct{ gen.DO }

func (a autoPlanReportDo) Debug() *autoPlanReportDo {
	return a.withDO(a.DO.Debug())
}

func (a autoPlanReportDo) WithContext(ctx context.Context) *autoPlanReportDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a autoPlanReportDo) ReadDB() *autoPlanReportDo {
	return a.Clauses(dbresolver.Read)
}

func (a autoPlanReportDo) WriteDB() *autoPlanReportDo {
	return a.Clauses(dbresolver.Write)
}

func (a autoPlanReportDo) Session(config *gorm.Session) *autoPlanReportDo {
	return a.withDO(a.DO.Session(config))
}

func (a autoPlanReportDo) Clauses(conds ...clause.Expression) *autoPlanReportDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a autoPlanReportDo) Returning(value interface{}, columns ...string) *autoPlanReportDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a autoPlanReportDo) Not(conds ...gen.Condition) *autoPlanReportDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a autoPlanReportDo) Or(conds ...gen.Condition) *autoPlanReportDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a autoPlanReportDo) Select(conds ...field.Expr) *autoPlanReportDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a autoPlanReportDo) Where(conds ...gen.Condition) *autoPlanReportDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a autoPlanReportDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *autoPlanReportDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a autoPlanReportDo) Order(conds ...field.Expr) *autoPlanReportDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a autoPlanReportDo) Distinct(cols ...field.Expr) *autoPlanReportDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a autoPlanReportDo) Omit(cols ...field.Expr) *autoPlanReportDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a autoPlanReportDo) Join(table schema.Tabler, on ...field.Expr) *autoPlanReportDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a autoPlanReportDo) LeftJoin(table schema.Tabler, on ...field.Expr) *autoPlanReportDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a autoPlanReportDo) RightJoin(table schema.Tabler, on ...field.Expr) *autoPlanReportDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a autoPlanReportDo) Group(cols ...field.Expr) *autoPlanReportDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a autoPlanReportDo) Having(conds ...gen.Condition) *autoPlanReportDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a autoPlanReportDo) Limit(limit int) *autoPlanReportDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a autoPlanReportDo) Offset(offset int) *autoPlanReportDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a autoPlanReportDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *autoPlanReportDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a autoPlanReportDo) Unscoped() *autoPlanReportDo {
	return a.withDO(a.DO.Unscoped())
}

func (a autoPlanReportDo) Create(values ...*model.AutoPlanReport) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a autoPlanReportDo) CreateInBatches(values []*model.AutoPlanReport, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a autoPlanReportDo) Save(values ...*model.AutoPlanReport) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a autoPlanReportDo) First() (*model.AutoPlanReport, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoPlanReport), nil
	}
}

func (a autoPlanReportDo) Take() (*model.AutoPlanReport, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoPlanReport), nil
	}
}

func (a autoPlanReportDo) Last() (*model.AutoPlanReport, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoPlanReport), nil
	}
}

func (a autoPlanReportDo) Find() ([]*model.AutoPlanReport, error) {
	result, err := a.DO.Find()
	return result.([]*model.AutoPlanReport), err
}

func (a autoPlanReportDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AutoPlanReport, err error) {
	buf := make([]*model.AutoPlanReport, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a autoPlanReportDo) FindInBatches(result *[]*model.AutoPlanReport, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a autoPlanReportDo) Attrs(attrs ...field.AssignExpr) *autoPlanReportDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a autoPlanReportDo) Assign(attrs ...field.AssignExpr) *autoPlanReportDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a autoPlanReportDo) Joins(fields ...field.RelationField) *autoPlanReportDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a autoPlanReportDo) Preload(fields ...field.RelationField) *autoPlanReportDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a autoPlanReportDo) FirstOrInit() (*model.AutoPlanReport, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoPlanReport), nil
	}
}

func (a autoPlanReportDo) FirstOrCreate() (*model.AutoPlanReport, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoPlanReport), nil
	}
}

func (a autoPlanReportDo) FindByPage(offset int, limit int) (result []*model.AutoPlanReport, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a autoPlanReportDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a autoPlanReportDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a autoPlanReportDo) Delete(models ...*model.AutoPlanReport) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *autoPlanReportDo) withDO(do gen.Dao) *autoPlanReportDo {
	a.DO = *do.(*gen.DO)
	return a
}
