// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Runner-Go-Team/RunnerGo-management-open/internal/pkg/dal/model"
)

func newUISceneOperator(db *gorm.DB, opts ...gen.DOOption) uISceneOperator {
	_uISceneOperator := uISceneOperator{}

	_uISceneOperator.uISceneOperatorDo.UseDB(db, opts...)
	_uISceneOperator.uISceneOperatorDo.UseModel(&model.UISceneOperator{})

	tableName := _uISceneOperator.uISceneOperatorDo.TableName()
	_uISceneOperator.ALL = field.NewAsterisk(tableName)
	_uISceneOperator.ID = field.NewInt64(tableName, "id")
	_uISceneOperator.OperatorID = field.NewString(tableName, "operator_id")
	_uISceneOperator.SceneID = field.NewString(tableName, "scene_id")
	_uISceneOperator.Name = field.NewString(tableName, "name")
	_uISceneOperator.ParentID = field.NewString(tableName, "parent_id")
	_uISceneOperator.Sort = field.NewInt32(tableName, "sort")
	_uISceneOperator.Status = field.NewInt32(tableName, "status")
	_uISceneOperator.Type = field.NewString(tableName, "type")
	_uISceneOperator.Action = field.NewString(tableName, "action")
	_uISceneOperator.CreatedAt = field.NewTime(tableName, "created_at")
	_uISceneOperator.UpdatedAt = field.NewTime(tableName, "updated_at")
	_uISceneOperator.DeletedAt = field.NewField(tableName, "deleted_at")

	_uISceneOperator.fillFieldMap()

	return _uISceneOperator
}

type uISceneOperator struct {
	uISceneOperatorDo uISceneOperatorDo

	ALL        field.Asterisk
	ID         field.Int64  // id
	OperatorID field.String // 全局唯一ID
	SceneID    field.String // 场景ID
	Name       field.String // 名称
	ParentID   field.String // 父级ID
	Sort       field.Int32  // 排序
	Status     field.Int32  // 状态：1-正常，2-禁用
	Type       field.String // 步骤类型
	Action     field.String // 步骤方法
	CreatedAt  field.Time   // 创建时间
	UpdatedAt  field.Time   // 更新时间
	DeletedAt  field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (u uISceneOperator) Table(newTableName string) *uISceneOperator {
	u.uISceneOperatorDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u uISceneOperator) As(alias string) *uISceneOperator {
	u.uISceneOperatorDo.DO = *(u.uISceneOperatorDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *uISceneOperator) updateTableName(table string) *uISceneOperator {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.OperatorID = field.NewString(table, "operator_id")
	u.SceneID = field.NewString(table, "scene_id")
	u.Name = field.NewString(table, "name")
	u.ParentID = field.NewString(table, "parent_id")
	u.Sort = field.NewInt32(table, "sort")
	u.Status = field.NewInt32(table, "status")
	u.Type = field.NewString(table, "type")
	u.Action = field.NewString(table, "action")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")

	u.fillFieldMap()

	return u
}

func (u *uISceneOperator) WithContext(ctx context.Context) *uISceneOperatorDo {
	return u.uISceneOperatorDo.WithContext(ctx)
}

func (u uISceneOperator) TableName() string { return u.uISceneOperatorDo.TableName() }

func (u uISceneOperator) Alias() string { return u.uISceneOperatorDo.Alias() }

func (u *uISceneOperator) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *uISceneOperator) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 12)
	u.fieldMap["id"] = u.ID
	u.fieldMap["operator_id"] = u.OperatorID
	u.fieldMap["scene_id"] = u.SceneID
	u.fieldMap["name"] = u.Name
	u.fieldMap["parent_id"] = u.ParentID
	u.fieldMap["sort"] = u.Sort
	u.fieldMap["status"] = u.Status
	u.fieldMap["type"] = u.Type
	u.fieldMap["action"] = u.Action
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
}

func (u uISceneOperator) clone(db *gorm.DB) uISceneOperator {
	u.uISceneOperatorDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u uISceneOperator) replaceDB(db *gorm.DB) uISceneOperator {
	u.uISceneOperatorDo.ReplaceDB(db)
	return u
}

type uISceneOperatorDo struct{ gen.DO }

func (u uISceneOperatorDo) Debug() *uISceneOperatorDo {
	return u.withDO(u.DO.Debug())
}

func (u uISceneOperatorDo) WithContext(ctx context.Context) *uISceneOperatorDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u uISceneOperatorDo) ReadDB() *uISceneOperatorDo {
	return u.Clauses(dbresolver.Read)
}

func (u uISceneOperatorDo) WriteDB() *uISceneOperatorDo {
	return u.Clauses(dbresolver.Write)
}

func (u uISceneOperatorDo) Session(config *gorm.Session) *uISceneOperatorDo {
	return u.withDO(u.DO.Session(config))
}

func (u uISceneOperatorDo) Clauses(conds ...clause.Expression) *uISceneOperatorDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u uISceneOperatorDo) Returning(value interface{}, columns ...string) *uISceneOperatorDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u uISceneOperatorDo) Not(conds ...gen.Condition) *uISceneOperatorDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u uISceneOperatorDo) Or(conds ...gen.Condition) *uISceneOperatorDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u uISceneOperatorDo) Select(conds ...field.Expr) *uISceneOperatorDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u uISceneOperatorDo) Where(conds ...gen.Condition) *uISceneOperatorDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u uISceneOperatorDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *uISceneOperatorDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u uISceneOperatorDo) Order(conds ...field.Expr) *uISceneOperatorDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u uISceneOperatorDo) Distinct(cols ...field.Expr) *uISceneOperatorDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u uISceneOperatorDo) Omit(cols ...field.Expr) *uISceneOperatorDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u uISceneOperatorDo) Join(table schema.Tabler, on ...field.Expr) *uISceneOperatorDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u uISceneOperatorDo) LeftJoin(table schema.Tabler, on ...field.Expr) *uISceneOperatorDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u uISceneOperatorDo) RightJoin(table schema.Tabler, on ...field.Expr) *uISceneOperatorDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u uISceneOperatorDo) Group(cols ...field.Expr) *uISceneOperatorDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u uISceneOperatorDo) Having(conds ...gen.Condition) *uISceneOperatorDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u uISceneOperatorDo) Limit(limit int) *uISceneOperatorDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u uISceneOperatorDo) Offset(offset int) *uISceneOperatorDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u uISceneOperatorDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *uISceneOperatorDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u uISceneOperatorDo) Unscoped() *uISceneOperatorDo {
	return u.withDO(u.DO.Unscoped())
}

func (u uISceneOperatorDo) Create(values ...*model.UISceneOperator) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u uISceneOperatorDo) CreateInBatches(values []*model.UISceneOperator, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u uISceneOperatorDo) Save(values ...*model.UISceneOperator) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u uISceneOperatorDo) First() (*model.UISceneOperator, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UISceneOperator), nil
	}
}

func (u uISceneOperatorDo) Take() (*model.UISceneOperator, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UISceneOperator), nil
	}
}

func (u uISceneOperatorDo) Last() (*model.UISceneOperator, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UISceneOperator), nil
	}
}

func (u uISceneOperatorDo) Find() ([]*model.UISceneOperator, error) {
	result, err := u.DO.Find()
	return result.([]*model.UISceneOperator), err
}

func (u uISceneOperatorDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UISceneOperator, err error) {
	buf := make([]*model.UISceneOperator, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u uISceneOperatorDo) FindInBatches(result *[]*model.UISceneOperator, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u uISceneOperatorDo) Attrs(attrs ...field.AssignExpr) *uISceneOperatorDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u uISceneOperatorDo) Assign(attrs ...field.AssignExpr) *uISceneOperatorDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u uISceneOperatorDo) Joins(fields ...field.RelationField) *uISceneOperatorDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u uISceneOperatorDo) Preload(fields ...field.RelationField) *uISceneOperatorDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u uISceneOperatorDo) FirstOrInit() (*model.UISceneOperator, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UISceneOperator), nil
	}
}

func (u uISceneOperatorDo) FirstOrCreate() (*model.UISceneOperator, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UISceneOperator), nil
	}
}

func (u uISceneOperatorDo) FindByPage(offset int, limit int) (result []*model.UISceneOperator, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u uISceneOperatorDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u uISceneOperatorDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u uISceneOperatorDo) Delete(models ...*model.UISceneOperator) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *uISceneOperatorDo) withDO(do gen.Dao) *uISceneOperatorDo {
	u.DO = *do.(*gen.DO)
	return u
}
