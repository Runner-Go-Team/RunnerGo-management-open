// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Runner-Go-Team/RunnerGo-management-open/internal/pkg/dal/model"
)

func newUIPlanTimedTaskConf(db *gorm.DB, opts ...gen.DOOption) uIPlanTimedTaskConf {
	_uIPlanTimedTaskConf := uIPlanTimedTaskConf{}

	_uIPlanTimedTaskConf.uIPlanTimedTaskConfDo.UseDB(db, opts...)
	_uIPlanTimedTaskConf.uIPlanTimedTaskConfDo.UseModel(&model.UIPlanTimedTaskConf{})

	tableName := _uIPlanTimedTaskConf.uIPlanTimedTaskConfDo.TableName()
	_uIPlanTimedTaskConf.ALL = field.NewAsterisk(tableName)
	_uIPlanTimedTaskConf.ID = field.NewInt32(tableName, "id")
	_uIPlanTimedTaskConf.PlanID = field.NewString(tableName, "plan_id")
	_uIPlanTimedTaskConf.TeamID = field.NewString(tableName, "team_id")
	_uIPlanTimedTaskConf.Frequency = field.NewInt32(tableName, "frequency")
	_uIPlanTimedTaskConf.TaskExecTime = field.NewInt64(tableName, "task_exec_time")
	_uIPlanTimedTaskConf.TaskCloseTime = field.NewInt64(tableName, "task_close_time")
	_uIPlanTimedTaskConf.FixedIntervalStartTime = field.NewInt64(tableName, "fixed_interval_start_time")
	_uIPlanTimedTaskConf.FixedIntervalTime = field.NewInt32(tableName, "fixed_interval_time")
	_uIPlanTimedTaskConf.FixedRunNum = field.NewInt32(tableName, "fixed_run_num")
	_uIPlanTimedTaskConf.FixedIntervalTimeType = field.NewInt32(tableName, "fixed_interval_time_type")
	_uIPlanTimedTaskConf.TaskType = field.NewInt32(tableName, "task_type")
	_uIPlanTimedTaskConf.SceneRunOrder = field.NewInt32(tableName, "scene_run_order")
	_uIPlanTimedTaskConf.Status = field.NewInt32(tableName, "status")
	_uIPlanTimedTaskConf.RunUserID = field.NewString(tableName, "run_user_id")
	_uIPlanTimedTaskConf.CreatedAt = field.NewTime(tableName, "created_at")
	_uIPlanTimedTaskConf.UpdatedAt = field.NewTime(tableName, "updated_at")
	_uIPlanTimedTaskConf.DeletedAt = field.NewField(tableName, "deleted_at")

	_uIPlanTimedTaskConf.fillFieldMap()

	return _uIPlanTimedTaskConf
}

type uIPlanTimedTaskConf struct {
	uIPlanTimedTaskConfDo uIPlanTimedTaskConfDo

	ALL                    field.Asterisk
	ID                     field.Int32  // 表id
	PlanID                 field.String // 计划id
	TeamID                 field.String // 团队id
	Frequency              field.Int32  // 任务执行频次: 0-一次，1-每天，2-每周，3-每月，4-固定时间间隔
	TaskExecTime           field.Int64  // 任务执行时间
	TaskCloseTime          field.Int64  // 任务结束时间
	FixedIntervalStartTime field.Int64  // 固定时间间隔开始时间
	FixedIntervalTime      field.Int32  // 固定间隔时间
	FixedRunNum            field.Int32  // 固定执行次数
	FixedIntervalTimeType  field.Int32  // 固定间隔时间类型：0-分钟，1-小时
	TaskType               field.Int32  // 任务类型：1-普通任务，2-定时任务
	SceneRunOrder          field.Int32  // 场景运行次序：1-顺序执行，2-同时执行
	Status                 field.Int32  // 任务状态：0-未启用，1-运行中，2-已过期
	RunUserID              field.String // 运行人用户ID
	CreatedAt              field.Time   // 创建时间
	UpdatedAt              field.Time   // 更新时间
	DeletedAt              field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (u uIPlanTimedTaskConf) Table(newTableName string) *uIPlanTimedTaskConf {
	u.uIPlanTimedTaskConfDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u uIPlanTimedTaskConf) As(alias string) *uIPlanTimedTaskConf {
	u.uIPlanTimedTaskConfDo.DO = *(u.uIPlanTimedTaskConfDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *uIPlanTimedTaskConf) updateTableName(table string) *uIPlanTimedTaskConf {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.PlanID = field.NewString(table, "plan_id")
	u.TeamID = field.NewString(table, "team_id")
	u.Frequency = field.NewInt32(table, "frequency")
	u.TaskExecTime = field.NewInt64(table, "task_exec_time")
	u.TaskCloseTime = field.NewInt64(table, "task_close_time")
	u.FixedIntervalStartTime = field.NewInt64(table, "fixed_interval_start_time")
	u.FixedIntervalTime = field.NewInt32(table, "fixed_interval_time")
	u.FixedRunNum = field.NewInt32(table, "fixed_run_num")
	u.FixedIntervalTimeType = field.NewInt32(table, "fixed_interval_time_type")
	u.TaskType = field.NewInt32(table, "task_type")
	u.SceneRunOrder = field.NewInt32(table, "scene_run_order")
	u.Status = field.NewInt32(table, "status")
	u.RunUserID = field.NewString(table, "run_user_id")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")

	u.fillFieldMap()

	return u
}

func (u *uIPlanTimedTaskConf) WithContext(ctx context.Context) *uIPlanTimedTaskConfDo {
	return u.uIPlanTimedTaskConfDo.WithContext(ctx)
}

func (u uIPlanTimedTaskConf) TableName() string { return u.uIPlanTimedTaskConfDo.TableName() }

func (u uIPlanTimedTaskConf) Alias() string { return u.uIPlanTimedTaskConfDo.Alias() }

func (u *uIPlanTimedTaskConf) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *uIPlanTimedTaskConf) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 17)
	u.fieldMap["id"] = u.ID
	u.fieldMap["plan_id"] = u.PlanID
	u.fieldMap["team_id"] = u.TeamID
	u.fieldMap["frequency"] = u.Frequency
	u.fieldMap["task_exec_time"] = u.TaskExecTime
	u.fieldMap["task_close_time"] = u.TaskCloseTime
	u.fieldMap["fixed_interval_start_time"] = u.FixedIntervalStartTime
	u.fieldMap["fixed_interval_time"] = u.FixedIntervalTime
	u.fieldMap["fixed_run_num"] = u.FixedRunNum
	u.fieldMap["fixed_interval_time_type"] = u.FixedIntervalTimeType
	u.fieldMap["task_type"] = u.TaskType
	u.fieldMap["scene_run_order"] = u.SceneRunOrder
	u.fieldMap["status"] = u.Status
	u.fieldMap["run_user_id"] = u.RunUserID
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
}

func (u uIPlanTimedTaskConf) clone(db *gorm.DB) uIPlanTimedTaskConf {
	u.uIPlanTimedTaskConfDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u uIPlanTimedTaskConf) replaceDB(db *gorm.DB) uIPlanTimedTaskConf {
	u.uIPlanTimedTaskConfDo.ReplaceDB(db)
	return u
}

type uIPlanTimedTaskConfDo struct{ gen.DO }

func (u uIPlanTimedTaskConfDo) Debug() *uIPlanTimedTaskConfDo {
	return u.withDO(u.DO.Debug())
}

func (u uIPlanTimedTaskConfDo) WithContext(ctx context.Context) *uIPlanTimedTaskConfDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u uIPlanTimedTaskConfDo) ReadDB() *uIPlanTimedTaskConfDo {
	return u.Clauses(dbresolver.Read)
}

func (u uIPlanTimedTaskConfDo) WriteDB() *uIPlanTimedTaskConfDo {
	return u.Clauses(dbresolver.Write)
}

func (u uIPlanTimedTaskConfDo) Session(config *gorm.Session) *uIPlanTimedTaskConfDo {
	return u.withDO(u.DO.Session(config))
}

func (u uIPlanTimedTaskConfDo) Clauses(conds ...clause.Expression) *uIPlanTimedTaskConfDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u uIPlanTimedTaskConfDo) Returning(value interface{}, columns ...string) *uIPlanTimedTaskConfDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u uIPlanTimedTaskConfDo) Not(conds ...gen.Condition) *uIPlanTimedTaskConfDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u uIPlanTimedTaskConfDo) Or(conds ...gen.Condition) *uIPlanTimedTaskConfDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u uIPlanTimedTaskConfDo) Select(conds ...field.Expr) *uIPlanTimedTaskConfDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u uIPlanTimedTaskConfDo) Where(conds ...gen.Condition) *uIPlanTimedTaskConfDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u uIPlanTimedTaskConfDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *uIPlanTimedTaskConfDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u uIPlanTimedTaskConfDo) Order(conds ...field.Expr) *uIPlanTimedTaskConfDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u uIPlanTimedTaskConfDo) Distinct(cols ...field.Expr) *uIPlanTimedTaskConfDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u uIPlanTimedTaskConfDo) Omit(cols ...field.Expr) *uIPlanTimedTaskConfDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u uIPlanTimedTaskConfDo) Join(table schema.Tabler, on ...field.Expr) *uIPlanTimedTaskConfDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u uIPlanTimedTaskConfDo) LeftJoin(table schema.Tabler, on ...field.Expr) *uIPlanTimedTaskConfDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u uIPlanTimedTaskConfDo) RightJoin(table schema.Tabler, on ...field.Expr) *uIPlanTimedTaskConfDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u uIPlanTimedTaskConfDo) Group(cols ...field.Expr) *uIPlanTimedTaskConfDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u uIPlanTimedTaskConfDo) Having(conds ...gen.Condition) *uIPlanTimedTaskConfDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u uIPlanTimedTaskConfDo) Limit(limit int) *uIPlanTimedTaskConfDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u uIPlanTimedTaskConfDo) Offset(offset int) *uIPlanTimedTaskConfDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u uIPlanTimedTaskConfDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *uIPlanTimedTaskConfDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u uIPlanTimedTaskConfDo) Unscoped() *uIPlanTimedTaskConfDo {
	return u.withDO(u.DO.Unscoped())
}

func (u uIPlanTimedTaskConfDo) Create(values ...*model.UIPlanTimedTaskConf) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u uIPlanTimedTaskConfDo) CreateInBatches(values []*model.UIPlanTimedTaskConf, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u uIPlanTimedTaskConfDo) Save(values ...*model.UIPlanTimedTaskConf) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u uIPlanTimedTaskConfDo) First() (*model.UIPlanTimedTaskConf, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UIPlanTimedTaskConf), nil
	}
}

func (u uIPlanTimedTaskConfDo) Take() (*model.UIPlanTimedTaskConf, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UIPlanTimedTaskConf), nil
	}
}

func (u uIPlanTimedTaskConfDo) Last() (*model.UIPlanTimedTaskConf, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UIPlanTimedTaskConf), nil
	}
}

func (u uIPlanTimedTaskConfDo) Find() ([]*model.UIPlanTimedTaskConf, error) {
	result, err := u.DO.Find()
	return result.([]*model.UIPlanTimedTaskConf), err
}

func (u uIPlanTimedTaskConfDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UIPlanTimedTaskConf, err error) {
	buf := make([]*model.UIPlanTimedTaskConf, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u uIPlanTimedTaskConfDo) FindInBatches(result *[]*model.UIPlanTimedTaskConf, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u uIPlanTimedTaskConfDo) Attrs(attrs ...field.AssignExpr) *uIPlanTimedTaskConfDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u uIPlanTimedTaskConfDo) Assign(attrs ...field.AssignExpr) *uIPlanTimedTaskConfDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u uIPlanTimedTaskConfDo) Joins(fields ...field.RelationField) *uIPlanTimedTaskConfDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u uIPlanTimedTaskConfDo) Preload(fields ...field.RelationField) *uIPlanTimedTaskConfDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u uIPlanTimedTaskConfDo) FirstOrInit() (*model.UIPlanTimedTaskConf, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UIPlanTimedTaskConf), nil
	}
}

func (u uIPlanTimedTaskConfDo) FirstOrCreate() (*model.UIPlanTimedTaskConf, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UIPlanTimedTaskConf), nil
	}
}

func (u uIPlanTimedTaskConfDo) FindByPage(offset int, limit int) (result []*model.UIPlanTimedTaskConf, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u uIPlanTimedTaskConfDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u uIPlanTimedTaskConfDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u uIPlanTimedTaskConfDo) Delete(models ...*model.UIPlanTimedTaskConf) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *uIPlanTimedTaskConfDo) withDO(do gen.Dao) *uIPlanTimedTaskConfDo {
	u.DO = *do.(*gen.DO)
	return u
}
