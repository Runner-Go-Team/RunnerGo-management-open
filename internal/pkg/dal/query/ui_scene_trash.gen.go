// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Runner-Go-Team/RunnerGo-management-open/internal/pkg/dal/model"
)

func newUISceneTrash(db *gorm.DB, opts ...gen.DOOption) uISceneTrash {
	_uISceneTrash := uISceneTrash{}

	_uISceneTrash.uISceneTrashDo.UseDB(db, opts...)
	_uISceneTrash.uISceneTrashDo.UseModel(&model.UISceneTrash{})

	tableName := _uISceneTrash.uISceneTrashDo.TableName()
	_uISceneTrash.ALL = field.NewAsterisk(tableName)
	_uISceneTrash.ID = field.NewInt64(tableName, "id")
	_uISceneTrash.SceneID = field.NewString(tableName, "scene_id")
	_uISceneTrash.TeamID = field.NewString(tableName, "team_id")
	_uISceneTrash.CreatedUserID = field.NewString(tableName, "created_user_id")
	_uISceneTrash.CreatedAt = field.NewTime(tableName, "created_at")
	_uISceneTrash.UpdatedAt = field.NewTime(tableName, "updated_at")
	_uISceneTrash.DeletedAt = field.NewField(tableName, "deleted_at")

	_uISceneTrash.fillFieldMap()

	return _uISceneTrash
}

type uISceneTrash struct {
	uISceneTrashDo uISceneTrashDo

	ALL           field.Asterisk
	ID            field.Int64  // id
	SceneID       field.String // 场景ID
	TeamID        field.String // 团队id
	CreatedUserID field.String // 创建人ID
	CreatedAt     field.Time   // 创建时间
	UpdatedAt     field.Time   // 更新时间
	DeletedAt     field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (u uISceneTrash) Table(newTableName string) *uISceneTrash {
	u.uISceneTrashDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u uISceneTrash) As(alias string) *uISceneTrash {
	u.uISceneTrashDo.DO = *(u.uISceneTrashDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *uISceneTrash) updateTableName(table string) *uISceneTrash {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.SceneID = field.NewString(table, "scene_id")
	u.TeamID = field.NewString(table, "team_id")
	u.CreatedUserID = field.NewString(table, "created_user_id")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")

	u.fillFieldMap()

	return u
}

func (u *uISceneTrash) WithContext(ctx context.Context) *uISceneTrashDo {
	return u.uISceneTrashDo.WithContext(ctx)
}

func (u uISceneTrash) TableName() string { return u.uISceneTrashDo.TableName() }

func (u uISceneTrash) Alias() string { return u.uISceneTrashDo.Alias() }

func (u *uISceneTrash) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *uISceneTrash) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 7)
	u.fieldMap["id"] = u.ID
	u.fieldMap["scene_id"] = u.SceneID
	u.fieldMap["team_id"] = u.TeamID
	u.fieldMap["created_user_id"] = u.CreatedUserID
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
}

func (u uISceneTrash) clone(db *gorm.DB) uISceneTrash {
	u.uISceneTrashDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u uISceneTrash) replaceDB(db *gorm.DB) uISceneTrash {
	u.uISceneTrashDo.ReplaceDB(db)
	return u
}

type uISceneTrashDo struct{ gen.DO }

func (u uISceneTrashDo) Debug() *uISceneTrashDo {
	return u.withDO(u.DO.Debug())
}

func (u uISceneTrashDo) WithContext(ctx context.Context) *uISceneTrashDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u uISceneTrashDo) ReadDB() *uISceneTrashDo {
	return u.Clauses(dbresolver.Read)
}

func (u uISceneTrashDo) WriteDB() *uISceneTrashDo {
	return u.Clauses(dbresolver.Write)
}

func (u uISceneTrashDo) Session(config *gorm.Session) *uISceneTrashDo {
	return u.withDO(u.DO.Session(config))
}

func (u uISceneTrashDo) Clauses(conds ...clause.Expression) *uISceneTrashDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u uISceneTrashDo) Returning(value interface{}, columns ...string) *uISceneTrashDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u uISceneTrashDo) Not(conds ...gen.Condition) *uISceneTrashDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u uISceneTrashDo) Or(conds ...gen.Condition) *uISceneTrashDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u uISceneTrashDo) Select(conds ...field.Expr) *uISceneTrashDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u uISceneTrashDo) Where(conds ...gen.Condition) *uISceneTrashDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u uISceneTrashDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *uISceneTrashDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u uISceneTrashDo) Order(conds ...field.Expr) *uISceneTrashDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u uISceneTrashDo) Distinct(cols ...field.Expr) *uISceneTrashDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u uISceneTrashDo) Omit(cols ...field.Expr) *uISceneTrashDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u uISceneTrashDo) Join(table schema.Tabler, on ...field.Expr) *uISceneTrashDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u uISceneTrashDo) LeftJoin(table schema.Tabler, on ...field.Expr) *uISceneTrashDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u uISceneTrashDo) RightJoin(table schema.Tabler, on ...field.Expr) *uISceneTrashDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u uISceneTrashDo) Group(cols ...field.Expr) *uISceneTrashDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u uISceneTrashDo) Having(conds ...gen.Condition) *uISceneTrashDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u uISceneTrashDo) Limit(limit int) *uISceneTrashDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u uISceneTrashDo) Offset(offset int) *uISceneTrashDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u uISceneTrashDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *uISceneTrashDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u uISceneTrashDo) Unscoped() *uISceneTrashDo {
	return u.withDO(u.DO.Unscoped())
}

func (u uISceneTrashDo) Create(values ...*model.UISceneTrash) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u uISceneTrashDo) CreateInBatches(values []*model.UISceneTrash, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u uISceneTrashDo) Save(values ...*model.UISceneTrash) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u uISceneTrashDo) First() (*model.UISceneTrash, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UISceneTrash), nil
	}
}

func (u uISceneTrashDo) Take() (*model.UISceneTrash, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UISceneTrash), nil
	}
}

func (u uISceneTrashDo) Last() (*model.UISceneTrash, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UISceneTrash), nil
	}
}

func (u uISceneTrashDo) Find() ([]*model.UISceneTrash, error) {
	result, err := u.DO.Find()
	return result.([]*model.UISceneTrash), err
}

func (u uISceneTrashDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UISceneTrash, err error) {
	buf := make([]*model.UISceneTrash, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u uISceneTrashDo) FindInBatches(result *[]*model.UISceneTrash, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u uISceneTrashDo) Attrs(attrs ...field.AssignExpr) *uISceneTrashDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u uISceneTrashDo) Assign(attrs ...field.AssignExpr) *uISceneTrashDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u uISceneTrashDo) Joins(fields ...field.RelationField) *uISceneTrashDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u uISceneTrashDo) Preload(fields ...field.RelationField) *uISceneTrashDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u uISceneTrashDo) FirstOrInit() (*model.UISceneTrash, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UISceneTrash), nil
	}
}

func (u uISceneTrashDo) FirstOrCreate() (*model.UISceneTrash, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UISceneTrash), nil
	}
}

func (u uISceneTrashDo) FindByPage(offset int, limit int) (result []*model.UISceneTrash, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u uISceneTrashDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u uISceneTrashDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u uISceneTrashDo) Delete(models ...*model.UISceneTrash) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *uISceneTrashDo) withDO(do gen.Dao) *uISceneTrashDo {
	u.DO = *do.(*gen.DO)
	return u
}
