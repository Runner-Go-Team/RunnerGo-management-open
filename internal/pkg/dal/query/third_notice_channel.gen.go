// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Runner-Go-Team/RunnerGo-management-open/internal/pkg/dal/model"
)

func newThirdNoticeChannel(db *gorm.DB, opts ...gen.DOOption) thirdNoticeChannel {
	_thirdNoticeChannel := thirdNoticeChannel{}

	_thirdNoticeChannel.thirdNoticeChannelDo.UseDB(db, opts...)
	_thirdNoticeChannel.thirdNoticeChannelDo.UseModel(&model.ThirdNoticeChannel{})

	tableName := _thirdNoticeChannel.thirdNoticeChannelDo.TableName()
	_thirdNoticeChannel.ALL = field.NewAsterisk(tableName)
	_thirdNoticeChannel.ID = field.NewInt64(tableName, "id")
	_thirdNoticeChannel.Name = field.NewString(tableName, "name")
	_thirdNoticeChannel.Type = field.NewInt32(tableName, "type")
	_thirdNoticeChannel.CreatedAt = field.NewTime(tableName, "created_at")
	_thirdNoticeChannel.UpdatedAt = field.NewTime(tableName, "updated_at")
	_thirdNoticeChannel.DeletedAt = field.NewField(tableName, "deleted_at")

	_thirdNoticeChannel.fillFieldMap()

	return _thirdNoticeChannel
}

type thirdNoticeChannel struct {
	thirdNoticeChannelDo thirdNoticeChannelDo

	ALL       field.Asterisk
	ID        field.Int64  // 主键id
	Name      field.String // 名称
	Type      field.Int32  // 类型 1:飞书  2:企业微信  3:邮箱  4:钉钉
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (t thirdNoticeChannel) Table(newTableName string) *thirdNoticeChannel {
	t.thirdNoticeChannelDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t thirdNoticeChannel) As(alias string) *thirdNoticeChannel {
	t.thirdNoticeChannelDo.DO = *(t.thirdNoticeChannelDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *thirdNoticeChannel) updateTableName(table string) *thirdNoticeChannel {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.Name = field.NewString(table, "name")
	t.Type = field.NewInt32(table, "type")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *thirdNoticeChannel) WithContext(ctx context.Context) *thirdNoticeChannelDo {
	return t.thirdNoticeChannelDo.WithContext(ctx)
}

func (t thirdNoticeChannel) TableName() string { return t.thirdNoticeChannelDo.TableName() }

func (t thirdNoticeChannel) Alias() string { return t.thirdNoticeChannelDo.Alias() }

func (t *thirdNoticeChannel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *thirdNoticeChannel) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 6)
	t.fieldMap["id"] = t.ID
	t.fieldMap["name"] = t.Name
	t.fieldMap["type"] = t.Type
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t thirdNoticeChannel) clone(db *gorm.DB) thirdNoticeChannel {
	t.thirdNoticeChannelDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t thirdNoticeChannel) replaceDB(db *gorm.DB) thirdNoticeChannel {
	t.thirdNoticeChannelDo.ReplaceDB(db)
	return t
}

type thirdNoticeChannelDo struct{ gen.DO }

func (t thirdNoticeChannelDo) Debug() *thirdNoticeChannelDo {
	return t.withDO(t.DO.Debug())
}

func (t thirdNoticeChannelDo) WithContext(ctx context.Context) *thirdNoticeChannelDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t thirdNoticeChannelDo) ReadDB() *thirdNoticeChannelDo {
	return t.Clauses(dbresolver.Read)
}

func (t thirdNoticeChannelDo) WriteDB() *thirdNoticeChannelDo {
	return t.Clauses(dbresolver.Write)
}

func (t thirdNoticeChannelDo) Session(config *gorm.Session) *thirdNoticeChannelDo {
	return t.withDO(t.DO.Session(config))
}

func (t thirdNoticeChannelDo) Clauses(conds ...clause.Expression) *thirdNoticeChannelDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t thirdNoticeChannelDo) Returning(value interface{}, columns ...string) *thirdNoticeChannelDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t thirdNoticeChannelDo) Not(conds ...gen.Condition) *thirdNoticeChannelDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t thirdNoticeChannelDo) Or(conds ...gen.Condition) *thirdNoticeChannelDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t thirdNoticeChannelDo) Select(conds ...field.Expr) *thirdNoticeChannelDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t thirdNoticeChannelDo) Where(conds ...gen.Condition) *thirdNoticeChannelDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t thirdNoticeChannelDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *thirdNoticeChannelDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t thirdNoticeChannelDo) Order(conds ...field.Expr) *thirdNoticeChannelDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t thirdNoticeChannelDo) Distinct(cols ...field.Expr) *thirdNoticeChannelDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t thirdNoticeChannelDo) Omit(cols ...field.Expr) *thirdNoticeChannelDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t thirdNoticeChannelDo) Join(table schema.Tabler, on ...field.Expr) *thirdNoticeChannelDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t thirdNoticeChannelDo) LeftJoin(table schema.Tabler, on ...field.Expr) *thirdNoticeChannelDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t thirdNoticeChannelDo) RightJoin(table schema.Tabler, on ...field.Expr) *thirdNoticeChannelDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t thirdNoticeChannelDo) Group(cols ...field.Expr) *thirdNoticeChannelDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t thirdNoticeChannelDo) Having(conds ...gen.Condition) *thirdNoticeChannelDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t thirdNoticeChannelDo) Limit(limit int) *thirdNoticeChannelDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t thirdNoticeChannelDo) Offset(offset int) *thirdNoticeChannelDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t thirdNoticeChannelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *thirdNoticeChannelDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t thirdNoticeChannelDo) Unscoped() *thirdNoticeChannelDo {
	return t.withDO(t.DO.Unscoped())
}

func (t thirdNoticeChannelDo) Create(values ...*model.ThirdNoticeChannel) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t thirdNoticeChannelDo) CreateInBatches(values []*model.ThirdNoticeChannel, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t thirdNoticeChannelDo) Save(values ...*model.ThirdNoticeChannel) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t thirdNoticeChannelDo) First() (*model.ThirdNoticeChannel, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThirdNoticeChannel), nil
	}
}

func (t thirdNoticeChannelDo) Take() (*model.ThirdNoticeChannel, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThirdNoticeChannel), nil
	}
}

func (t thirdNoticeChannelDo) Last() (*model.ThirdNoticeChannel, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThirdNoticeChannel), nil
	}
}

func (t thirdNoticeChannelDo) Find() ([]*model.ThirdNoticeChannel, error) {
	result, err := t.DO.Find()
	return result.([]*model.ThirdNoticeChannel), err
}

func (t thirdNoticeChannelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ThirdNoticeChannel, err error) {
	buf := make([]*model.ThirdNoticeChannel, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t thirdNoticeChannelDo) FindInBatches(result *[]*model.ThirdNoticeChannel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t thirdNoticeChannelDo) Attrs(attrs ...field.AssignExpr) *thirdNoticeChannelDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t thirdNoticeChannelDo) Assign(attrs ...field.AssignExpr) *thirdNoticeChannelDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t thirdNoticeChannelDo) Joins(fields ...field.RelationField) *thirdNoticeChannelDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t thirdNoticeChannelDo) Preload(fields ...field.RelationField) *thirdNoticeChannelDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t thirdNoticeChannelDo) FirstOrInit() (*model.ThirdNoticeChannel, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThirdNoticeChannel), nil
	}
}

func (t thirdNoticeChannelDo) FirstOrCreate() (*model.ThirdNoticeChannel, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThirdNoticeChannel), nil
	}
}

func (t thirdNoticeChannelDo) FindByPage(offset int, limit int) (result []*model.ThirdNoticeChannel, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t thirdNoticeChannelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t thirdNoticeChannelDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t thirdNoticeChannelDo) Delete(models ...*model.ThirdNoticeChannel) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *thirdNoticeChannelDo) withDO(do gen.Dao) *thirdNoticeChannelDo {
	t.DO = *do.(*gen.DO)
	return t
}
