// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Runner-Go-Team/RunnerGo-management-open/internal/pkg/dal/model"
)

func newUISceneElement(db *gorm.DB, opts ...gen.DOOption) uISceneElement {
	_uISceneElement := uISceneElement{}

	_uISceneElement.uISceneElementDo.UseDB(db, opts...)
	_uISceneElement.uISceneElementDo.UseModel(&model.UISceneElement{})

	tableName := _uISceneElement.uISceneElementDo.TableName()
	_uISceneElement.ALL = field.NewAsterisk(tableName)
	_uISceneElement.ID = field.NewInt64(tableName, "id")
	_uISceneElement.SceneID = field.NewString(tableName, "scene_id")
	_uISceneElement.OperatorID = field.NewString(tableName, "operator_id")
	_uISceneElement.ElementID = field.NewString(tableName, "element_id")
	_uISceneElement.TeamID = field.NewString(tableName, "team_id")
	_uISceneElement.Status = field.NewInt32(tableName, "status")
	_uISceneElement.CreatedAt = field.NewTime(tableName, "created_at")
	_uISceneElement.UpdatedAt = field.NewTime(tableName, "updated_at")
	_uISceneElement.DeletedAt = field.NewField(tableName, "deleted_at")

	_uISceneElement.fillFieldMap()

	return _uISceneElement
}

type uISceneElement struct {
	uISceneElementDo uISceneElementDo

	ALL        field.Asterisk
	ID         field.Int64  // id
	SceneID    field.String // 场景ID
	OperatorID field.String // 操作ID
	ElementID  field.String // 元素ID
	TeamID     field.String // 团队id
	Status     field.Int32  // 状态 1：正常  2：回收站
	CreatedAt  field.Time   // 创建时间
	UpdatedAt  field.Time   // 更新时间
	DeletedAt  field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (u uISceneElement) Table(newTableName string) *uISceneElement {
	u.uISceneElementDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u uISceneElement) As(alias string) *uISceneElement {
	u.uISceneElementDo.DO = *(u.uISceneElementDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *uISceneElement) updateTableName(table string) *uISceneElement {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.SceneID = field.NewString(table, "scene_id")
	u.OperatorID = field.NewString(table, "operator_id")
	u.ElementID = field.NewString(table, "element_id")
	u.TeamID = field.NewString(table, "team_id")
	u.Status = field.NewInt32(table, "status")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")

	u.fillFieldMap()

	return u
}

func (u *uISceneElement) WithContext(ctx context.Context) *uISceneElementDo {
	return u.uISceneElementDo.WithContext(ctx)
}

func (u uISceneElement) TableName() string { return u.uISceneElementDo.TableName() }

func (u uISceneElement) Alias() string { return u.uISceneElementDo.Alias() }

func (u *uISceneElement) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *uISceneElement) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 9)
	u.fieldMap["id"] = u.ID
	u.fieldMap["scene_id"] = u.SceneID
	u.fieldMap["operator_id"] = u.OperatorID
	u.fieldMap["element_id"] = u.ElementID
	u.fieldMap["team_id"] = u.TeamID
	u.fieldMap["status"] = u.Status
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
}

func (u uISceneElement) clone(db *gorm.DB) uISceneElement {
	u.uISceneElementDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u uISceneElement) replaceDB(db *gorm.DB) uISceneElement {
	u.uISceneElementDo.ReplaceDB(db)
	return u
}

type uISceneElementDo struct{ gen.DO }

func (u uISceneElementDo) Debug() *uISceneElementDo {
	return u.withDO(u.DO.Debug())
}

func (u uISceneElementDo) WithContext(ctx context.Context) *uISceneElementDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u uISceneElementDo) ReadDB() *uISceneElementDo {
	return u.Clauses(dbresolver.Read)
}

func (u uISceneElementDo) WriteDB() *uISceneElementDo {
	return u.Clauses(dbresolver.Write)
}

func (u uISceneElementDo) Session(config *gorm.Session) *uISceneElementDo {
	return u.withDO(u.DO.Session(config))
}

func (u uISceneElementDo) Clauses(conds ...clause.Expression) *uISceneElementDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u uISceneElementDo) Returning(value interface{}, columns ...string) *uISceneElementDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u uISceneElementDo) Not(conds ...gen.Condition) *uISceneElementDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u uISceneElementDo) Or(conds ...gen.Condition) *uISceneElementDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u uISceneElementDo) Select(conds ...field.Expr) *uISceneElementDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u uISceneElementDo) Where(conds ...gen.Condition) *uISceneElementDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u uISceneElementDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *uISceneElementDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u uISceneElementDo) Order(conds ...field.Expr) *uISceneElementDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u uISceneElementDo) Distinct(cols ...field.Expr) *uISceneElementDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u uISceneElementDo) Omit(cols ...field.Expr) *uISceneElementDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u uISceneElementDo) Join(table schema.Tabler, on ...field.Expr) *uISceneElementDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u uISceneElementDo) LeftJoin(table schema.Tabler, on ...field.Expr) *uISceneElementDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u uISceneElementDo) RightJoin(table schema.Tabler, on ...field.Expr) *uISceneElementDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u uISceneElementDo) Group(cols ...field.Expr) *uISceneElementDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u uISceneElementDo) Having(conds ...gen.Condition) *uISceneElementDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u uISceneElementDo) Limit(limit int) *uISceneElementDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u uISceneElementDo) Offset(offset int) *uISceneElementDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u uISceneElementDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *uISceneElementDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u uISceneElementDo) Unscoped() *uISceneElementDo {
	return u.withDO(u.DO.Unscoped())
}

func (u uISceneElementDo) Create(values ...*model.UISceneElement) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u uISceneElementDo) CreateInBatches(values []*model.UISceneElement, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u uISceneElementDo) Save(values ...*model.UISceneElement) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u uISceneElementDo) First() (*model.UISceneElement, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UISceneElement), nil
	}
}

func (u uISceneElementDo) Take() (*model.UISceneElement, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UISceneElement), nil
	}
}

func (u uISceneElementDo) Last() (*model.UISceneElement, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UISceneElement), nil
	}
}

func (u uISceneElementDo) Find() ([]*model.UISceneElement, error) {
	result, err := u.DO.Find()
	return result.([]*model.UISceneElement), err
}

func (u uISceneElementDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UISceneElement, err error) {
	buf := make([]*model.UISceneElement, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u uISceneElementDo) FindInBatches(result *[]*model.UISceneElement, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u uISceneElementDo) Attrs(attrs ...field.AssignExpr) *uISceneElementDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u uISceneElementDo) Assign(attrs ...field.AssignExpr) *uISceneElementDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u uISceneElementDo) Joins(fields ...field.RelationField) *uISceneElementDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u uISceneElementDo) Preload(fields ...field.RelationField) *uISceneElementDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u uISceneElementDo) FirstOrInit() (*model.UISceneElement, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UISceneElement), nil
	}
}

func (u uISceneElementDo) FirstOrCreate() (*model.UISceneElement, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UISceneElement), nil
	}
}

func (u uISceneElementDo) FindByPage(offset int, limit int) (result []*model.UISceneElement, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u uISceneElementDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u uISceneElementDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u uISceneElementDo) Delete(models ...*model.UISceneElement) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *uISceneElementDo) withDO(do gen.Dao) *uISceneElementDo {
	u.DO = *do.(*gen.DO)
	return u
}
