// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.1
// source: apis.proto

package v1alpha1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// * [ Conditions ]
// ** Javascript:
// function (request: Request): bool {}
// ** Target:
// Header, Body, Query, Param
// ** Operator(WithNot):
// Exists, Contains, Equal, MatchRegexp, ><=,
// Match   xxx|xxx|xxx|xxx
// ---
// * [ Placeholder ]
// {{ $request.header.userAgent }}
// {{ $request.body.xxxxx }}
// {{ $request.ip }}
// {{ $fake.nickname }}
// {{ $fake.phoneNumber }}   lk
// {{ $fake.address }}
// {{ $fake.imageUrl }}
// Go Template ?
// ...
//
// ---
// * [ Response ]
// Header
// Body
// Grpc Code
// Latency
// ---
// * //
type MockAPI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UniqueKey string          `protobuf:"bytes,1,opt,name=uniqueKey,proto3" json:"uniqueKey,omitempty"`
	Path      string          `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Method    string          `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
	Host      string          `protobuf:"bytes,4,opt,name=host,proto3" json:"host,omitempty"`
	Cases     []*MockAPI_Case `protobuf:"bytes,5,rep,name=cases,proto3" json:"cases,omitempty"`
}

func (x *MockAPI) Reset() {
	*x = MockAPI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MockAPI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MockAPI) ProtoMessage() {}

func (x *MockAPI) ProtoReflect() protoreflect.Message {
	mi := &file_apis_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MockAPI.ProtoReflect.Descriptor instead.
func (*MockAPI) Descriptor() ([]byte, []int) {
	return file_apis_proto_rawDescGZIP(), []int{0}
}

func (x *MockAPI) GetUniqueKey() string {
	if x != nil {
		return x.UniqueKey
	}
	return ""
}

func (x *MockAPI) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *MockAPI) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *MockAPI) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *MockAPI) GetCases() []*MockAPI_Case {
	if x != nil {
		return x.Cases
	}
	return nil
}

type SaveMockAPIRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *MockAPI `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SaveMockAPIRequest) Reset() {
	*x = SaveMockAPIRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveMockAPIRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveMockAPIRequest) ProtoMessage() {}

func (x *SaveMockAPIRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveMockAPIRequest.ProtoReflect.Descriptor instead.
func (*SaveMockAPIRequest) Descriptor() ([]byte, []int) {
	return file_apis_proto_rawDescGZIP(), []int{1}
}

func (x *SaveMockAPIRequest) GetData() *MockAPI {
	if x != nil {
		return x.Data
	}
	return nil
}

type SaveMockAPIResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SaveMockAPIResponse) Reset() {
	*x = SaveMockAPIResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveMockAPIResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveMockAPIResponse) ProtoMessage() {}

func (x *SaveMockAPIResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveMockAPIResponse.ProtoReflect.Descriptor instead.
func (*SaveMockAPIResponse) Descriptor() ([]byte, []int) {
	return file_apis_proto_rawDescGZIP(), []int{2}
}

type DeleteMockAPIRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UniqueKey string `protobuf:"bytes,1,opt,name=uniqueKey,proto3" json:"uniqueKey,omitempty"`
}

func (x *DeleteMockAPIRequest) Reset() {
	*x = DeleteMockAPIRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMockAPIRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMockAPIRequest) ProtoMessage() {}

func (x *DeleteMockAPIRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMockAPIRequest.ProtoReflect.Descriptor instead.
func (*DeleteMockAPIRequest) Descriptor() ([]byte, []int) {
	return file_apis_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteMockAPIRequest) GetUniqueKey() string {
	if x != nil {
		return x.UniqueKey
	}
	return ""
}

type DeleteMockAPIResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteMockAPIResponse) Reset() {
	*x = DeleteMockAPIResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMockAPIResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMockAPIResponse) ProtoMessage() {}

func (x *DeleteMockAPIResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMockAPIResponse.ProtoReflect.Descriptor instead.
func (*DeleteMockAPIResponse) Descriptor() ([]byte, []int) {
	return file_apis_proto_rawDescGZIP(), []int{4}
}

type ListOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page  uint64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit uint64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ListOptions) Reset() {
	*x = ListOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOptions) ProtoMessage() {}

func (x *ListOptions) ProtoReflect() protoreflect.Message {
	mi := &file_apis_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOptions.ProtoReflect.Descriptor instead.
func (*ListOptions) Descriptor() ([]byte, []int) {
	return file_apis_proto_rawDescGZIP(), []int{5}
}

func (x *ListOptions) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListOptions) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ListResponse) Reset() {
	*x = ListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResponse) ProtoMessage() {}

func (x *ListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResponse.ProtoReflect.Descriptor instead.
func (*ListResponse) Descriptor() ([]byte, []int) {
	return file_apis_proto_rawDescGZIP(), []int{6}
}

func (x *ListResponse) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ListMockAPIRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keywords   string       `protobuf:"bytes,1,opt,name=keywords,proto3" json:"keywords,omitempty"`
	Pagination *ListOptions `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListMockAPIRequest) Reset() {
	*x = ListMockAPIRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMockAPIRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMockAPIRequest) ProtoMessage() {}

func (x *ListMockAPIRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMockAPIRequest.ProtoReflect.Descriptor instead.
func (*ListMockAPIRequest) Descriptor() ([]byte, []int) {
	return file_apis_proto_rawDescGZIP(), []int{7}
}

func (x *ListMockAPIRequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *ListMockAPIRequest) GetPagination() *ListOptions {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type ListMockAPIResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data       []*MockAPI    `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Pagination *ListResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListMockAPIResponse) Reset() {
	*x = ListMockAPIResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMockAPIResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMockAPIResponse) ProtoMessage() {}

func (x *ListMockAPIResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMockAPIResponse.ProtoReflect.Descriptor instead.
func (*ListMockAPIResponse) Descriptor() ([]byte, []int) {
	return file_apis_proto_rawDescGZIP(), []int{8}
}

func (x *ListMockAPIResponse) GetData() []*MockAPI {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListMockAPIResponse) GetPagination() *ListResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type MockAPI_Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Condition:
	//	*MockAPI_Condition_Simple
	//	*MockAPI_Condition_Script
	Condition isMockAPI_Condition_Condition `protobuf_oneof:"Condition"`
}

func (x *MockAPI_Condition) Reset() {
	*x = MockAPI_Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MockAPI_Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MockAPI_Condition) ProtoMessage() {}

func (x *MockAPI_Condition) ProtoReflect() protoreflect.Message {
	mi := &file_apis_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MockAPI_Condition.ProtoReflect.Descriptor instead.
func (*MockAPI_Condition) Descriptor() ([]byte, []int) {
	return file_apis_proto_rawDescGZIP(), []int{0, 0}
}

func (m *MockAPI_Condition) GetCondition() isMockAPI_Condition_Condition {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (x *MockAPI_Condition) GetSimple() *MockAPI_Condition_SimpleCondition {
	if x, ok := x.GetCondition().(*MockAPI_Condition_Simple); ok {
		return x.Simple
	}
	return nil
}

func (x *MockAPI_Condition) GetScript() *MockAPI_Condition_ScriptCondition {
	if x, ok := x.GetCondition().(*MockAPI_Condition_Script); ok {
		return x.Script
	}
	return nil
}

type isMockAPI_Condition_Condition interface {
	isMockAPI_Condition_Condition()
}

type MockAPI_Condition_Simple struct {
	Simple *MockAPI_Condition_SimpleCondition `protobuf:"bytes,1,opt,name=simple,proto3,oneof"`
}

type MockAPI_Condition_Script struct {
	Script *MockAPI_Condition_ScriptCondition `protobuf:"bytes,2,opt,name=script,proto3,oneof"`
}

func (*MockAPI_Condition_Simple) isMockAPI_Condition_Condition() {}

func (*MockAPI_Condition_Script) isMockAPI_Condition_Condition() {}

type MockAPI_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//	*MockAPI_Response_Simple
	//	*MockAPI_Response_Script
	Response isMockAPI_Response_Response `protobuf_oneof:"Response"`
}

func (x *MockAPI_Response) Reset() {
	*x = MockAPI_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MockAPI_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MockAPI_Response) ProtoMessage() {}

func (x *MockAPI_Response) ProtoReflect() protoreflect.Message {
	mi := &file_apis_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MockAPI_Response.ProtoReflect.Descriptor instead.
func (*MockAPI_Response) Descriptor() ([]byte, []int) {
	return file_apis_proto_rawDescGZIP(), []int{0, 1}
}

func (m *MockAPI_Response) GetResponse() isMockAPI_Response_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *MockAPI_Response) GetSimple() *MockAPI_Response_SimpleResponse {
	if x, ok := x.GetResponse().(*MockAPI_Response_Simple); ok {
		return x.Simple
	}
	return nil
}

func (x *MockAPI_Response) GetScript() *MockAPI_Response_ScriptResponse {
	if x, ok := x.GetResponse().(*MockAPI_Response_Script); ok {
		return x.Script
	}
	return nil
}

type isMockAPI_Response_Response interface {
	isMockAPI_Response_Response()
}

type MockAPI_Response_Simple struct {
	Simple *MockAPI_Response_SimpleResponse `protobuf:"bytes,1,opt,name=simple,proto3,oneof"`
}

type MockAPI_Response_Script struct {
	Script *MockAPI_Response_ScriptResponse `protobuf:"bytes,2,opt,name=script,proto3,oneof"`
}

func (*MockAPI_Response_Simple) isMockAPI_Response_Response() {}

func (*MockAPI_Response_Script) isMockAPI_Response_Response() {}

type MockAPI_Case struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Condition *MockAPI_Condition `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
	Response  *MockAPI_Response  `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *MockAPI_Case) Reset() {
	*x = MockAPI_Case{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MockAPI_Case) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MockAPI_Case) ProtoMessage() {}

func (x *MockAPI_Case) ProtoReflect() protoreflect.Message {
	mi := &file_apis_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MockAPI_Case.ProtoReflect.Descriptor instead.
func (*MockAPI_Case) Descriptor() ([]byte, []int) {
	return file_apis_proto_rawDescGZIP(), []int{0, 2}
}

func (x *MockAPI_Case) GetCondition() *MockAPI_Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *MockAPI_Case) GetResponse() *MockAPI_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type MockAPI_Condition_SimpleCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items           []*MockAPI_Condition_SimpleCondition_Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	UseOrAmongItems bool                                      `protobuf:"varint,2,opt,name=useOrAmongItems,proto3" json:"useOrAmongItems,omitempty"`
}

func (x *MockAPI_Condition_SimpleCondition) Reset() {
	*x = MockAPI_Condition_SimpleCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MockAPI_Condition_SimpleCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MockAPI_Condition_SimpleCondition) ProtoMessage() {}

func (x *MockAPI_Condition_SimpleCondition) ProtoReflect() protoreflect.Message {
	mi := &file_apis_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MockAPI_Condition_SimpleCondition.ProtoReflect.Descriptor instead.
func (*MockAPI_Condition_SimpleCondition) Descriptor() ([]byte, []int) {
	return file_apis_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *MockAPI_Condition_SimpleCondition) GetItems() []*MockAPI_Condition_SimpleCondition_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *MockAPI_Condition_SimpleCondition) GetUseOrAmongItems() bool {
	if x != nil {
		return x.UseOrAmongItems
	}
	return false
}

type MockAPI_Condition_ScriptCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lang    string `protobuf:"bytes,1,opt,name=lang,proto3" json:"lang,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *MockAPI_Condition_ScriptCondition) Reset() {
	*x = MockAPI_Condition_ScriptCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MockAPI_Condition_ScriptCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MockAPI_Condition_ScriptCondition) ProtoMessage() {}

func (x *MockAPI_Condition_ScriptCondition) ProtoReflect() protoreflect.Message {
	mi := &file_apis_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MockAPI_Condition_ScriptCondition.ProtoReflect.Descriptor instead.
func (*MockAPI_Condition_ScriptCondition) Descriptor() ([]byte, []int) {
	return file_apis_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *MockAPI_Condition_ScriptCondition) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *MockAPI_Condition_ScriptCondition) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type MockAPI_Condition_SimpleCondition_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperandX string `protobuf:"bytes,1,opt,name=operandX,proto3" json:"operandX,omitempty"`
	Operator string `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	OperandY string `protobuf:"bytes,3,opt,name=operandY,proto3" json:"operandY,omitempty"`
	Opposite bool   `protobuf:"varint,4,opt,name=opposite,proto3" json:"opposite,omitempty"`
}

func (x *MockAPI_Condition_SimpleCondition_Item) Reset() {
	*x = MockAPI_Condition_SimpleCondition_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MockAPI_Condition_SimpleCondition_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MockAPI_Condition_SimpleCondition_Item) ProtoMessage() {}

func (x *MockAPI_Condition_SimpleCondition_Item) ProtoReflect() protoreflect.Message {
	mi := &file_apis_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MockAPI_Condition_SimpleCondition_Item.ProtoReflect.Descriptor instead.
func (*MockAPI_Condition_SimpleCondition_Item) Descriptor() ([]byte, []int) {
	return file_apis_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *MockAPI_Condition_SimpleCondition_Item) GetOperandX() string {
	if x != nil {
		return x.OperandX
	}
	return ""
}

func (x *MockAPI_Condition_SimpleCondition_Item) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *MockAPI_Condition_SimpleCondition_Item) GetOperandY() string {
	if x != nil {
		return x.OperandY
	}
	return ""
}

func (x *MockAPI_Condition_SimpleCondition_Item) GetOpposite() bool {
	if x != nil {
		return x.Opposite
	}
	return false
}

type MockAPI_Response_SimpleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Header  map[string]string `protobuf:"bytes,2,rep,name=header,proto3" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Trailer map[string]string `protobuf:"bytes,3,rep,name=trailer,proto3" json:"trailer,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Body    string            `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *MockAPI_Response_SimpleResponse) Reset() {
	*x = MockAPI_Response_SimpleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MockAPI_Response_SimpleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MockAPI_Response_SimpleResponse) ProtoMessage() {}

func (x *MockAPI_Response_SimpleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MockAPI_Response_SimpleResponse.ProtoReflect.Descriptor instead.
func (*MockAPI_Response_SimpleResponse) Descriptor() ([]byte, []int) {
	return file_apis_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *MockAPI_Response_SimpleResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *MockAPI_Response_SimpleResponse) GetHeader() map[string]string {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *MockAPI_Response_SimpleResponse) GetTrailer() map[string]string {
	if x != nil {
		return x.Trailer
	}
	return nil
}

func (x *MockAPI_Response_SimpleResponse) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

type MockAPI_Response_ScriptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lang    string               `protobuf:"bytes,1,opt,name=lang,proto3" json:"lang,omitempty"`
	Content string               `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Timeout *durationpb.Duration `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *MockAPI_Response_ScriptResponse) Reset() {
	*x = MockAPI_Response_ScriptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MockAPI_Response_ScriptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MockAPI_Response_ScriptResponse) ProtoMessage() {}

func (x *MockAPI_Response_ScriptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MockAPI_Response_ScriptResponse.ProtoReflect.Descriptor instead.
func (*MockAPI_Response_ScriptResponse) Descriptor() ([]byte, []int) {
	return file_apis_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *MockAPI_Response_ScriptResponse) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *MockAPI_Response_ScriptResponse) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *MockAPI_Response_ScriptResponse) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

var File_apis_proto protoreflect.FileDescriptor

var file_apis_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x6d, 0x6f, 0x63, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xfa, 0x0b, 0x0a, 0x07, 0x4d, 0x6f, 0x63, 0x6b, 0x41, 0x50, 0x49, 0x12,
	0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x3b, 0x0a,
	0x05, 0x63, 0x61, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x6d, 0x6f, 0x63, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x6f, 0x63, 0x6b, 0x41, 0x50, 0x49, 0x2e, 0x43,
	0x61, 0x73, 0x65, 0x52, 0x05, 0x63, 0x61, 0x73, 0x65, 0x73, 0x1a, 0x92, 0x04, 0x0a, 0x09, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x06, 0x73, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x6d, 0x6f, 0x63, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4d, 0x6f, 0x63, 0x6b, 0x41, 0x50, 0x49, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x54,
	0x0a, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x6d, 0x6f, 0x63, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x6f, 0x63, 0x6b, 0x41, 0x50, 0x49,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x1a, 0x8a, 0x02, 0x0a, 0x0f, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x6d,
	0x6f, 0x63, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4d, 0x6f, 0x63, 0x6b, 0x41, 0x50, 0x49, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12,
	0x28, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x4f, 0x72, 0x41, 0x6d, 0x6f, 0x6e, 0x67, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x4f, 0x72, 0x41,
	0x6d, 0x6f, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x76, 0x0a, 0x04, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x58, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x58, 0x12, 0x1a, 0x0a,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x59, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x59, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x70, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x65, 0x1a, 0x3f, 0x0a, 0x0f, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0xa4, 0x05, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x06,
	0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x6d, 0x6f, 0x63, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x6f, 0x63, 0x6b, 0x41, 0x50, 0x49, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x12, 0x52, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x6d, 0x6f, 0x63, 0x6b, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x6f, 0x63, 0x6b, 0x41,
	0x50, 0x49, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x06, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x1a, 0xee, 0x02, 0x0a, 0x0e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x5c, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x6d, 0x6f, 0x63, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x6f, 0x63, 0x6b, 0x41, 0x50, 0x49, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x5f, 0x0a, 0x07, 0x74, 0x72, 0x61,
	0x69, 0x6c, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x6d, 0x6f, 0x63, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x6f, 0x63, 0x6b, 0x41, 0x50, 0x49, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x1a, 0x39,
	0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x54, 0x72, 0x61,
	0x69, 0x6c, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x73, 0x0a, 0x0e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x97, 0x01, 0x0a, 0x04, 0x43, 0x61, 0x73, 0x65, 0x12,
	0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x6d, 0x6f, 0x63, 0x6b, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x6f, 0x63,
	0x6b, 0x41, 0x50, 0x49, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x6d, 0x6f, 0x63, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x6f, 0x63, 0x6b, 0x41, 0x50, 0x49, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x4a, 0x0a, 0x12, 0x53, 0x61, 0x76, 0x65, 0x4d, 0x6f, 0x63, 0x6b, 0x41, 0x50, 0x49, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x6d, 0x6f, 0x63, 0x6b,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d,
	0x6f, 0x63, 0x6b, 0x41, 0x50, 0x49, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x15, 0x0a, 0x13,
	0x53, 0x61, 0x76, 0x65, 0x4d, 0x6f, 0x63, 0x6b, 0x41, 0x50, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x34, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x63,
	0x6b, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x17, 0x0a, 0x15, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4d, 0x6f, 0x63, 0x6b, 0x41, 0x50, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x37, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x24, 0x0a, 0x0c, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x22, 0x76, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x63, 0x6b, 0x41, 0x50, 0x49,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x73, 0x12, 0x44, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x6d,
	0x6f, 0x63, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x92, 0x01, 0x0a, 0x13, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x6f, 0x63, 0x6b, 0x41, 0x50, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x6d, 0x6f, 0x63, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x6f, 0x63, 0x6b, 0x41, 0x50,
	0x49, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x6d, 0x6f, 0x63, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x92,
	0x03, 0x0a, 0x04, 0x4d, 0x6f, 0x63, 0x6b, 0x12, 0x7f, 0x0a, 0x0b, 0x53, 0x61, 0x76, 0x65, 0x4d,
	0x6f, 0x63, 0x6b, 0x41, 0x50, 0x49, 0x12, 0x2b, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x6d, 0x6f,
	0x63, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x53, 0x61, 0x76, 0x65, 0x4d, 0x6f, 0x63, 0x6b, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x6d, 0x6f, 0x63, 0x6b, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x61,
	0x76, 0x65, 0x4d, 0x6f, 0x63, 0x6b, 0x41, 0x50, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x22, 0x0a, 0x2f, 0x6d, 0x6f, 0x63, 0x6b,
	0x2f, 0x73, 0x61, 0x76, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x87, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4d, 0x6f, 0x63, 0x6b, 0x41, 0x50, 0x49, 0x12, 0x2d, 0x2e, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x6d, 0x6f, 0x63, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x63, 0x6b, 0x41,
	0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x6d, 0x6f, 0x63, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x63, 0x6b, 0x41, 0x50,
	0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x11, 0x22, 0x0c, 0x2f, 0x6d, 0x6f, 0x63, 0x6b, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x3a,
	0x01, 0x2a, 0x12, 0x7f, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x63, 0x6b, 0x41, 0x50,
	0x49, 0x12, 0x2b, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x6d, 0x6f, 0x63, 0x6b, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x6f, 0x63, 0x6b, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x6d, 0x6f, 0x63, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x63,
	0x6b, 0x41, 0x50, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0f, 0x22, 0x0a, 0x2f, 0x6d, 0x6f, 0x63, 0x6b, 0x2f, 0x6c, 0x69, 0x73, 0x74,
	0x3a, 0x01, 0x2a, 0x42, 0x18, 0x5a, 0x16, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x3b, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_apis_proto_rawDescOnce sync.Once
	file_apis_proto_rawDescData = file_apis_proto_rawDesc
)

func file_apis_proto_rawDescGZIP() []byte {
	file_apis_proto_rawDescOnce.Do(func() {
		file_apis_proto_rawDescData = protoimpl.X.CompressGZIP(file_apis_proto_rawDescData)
	})
	return file_apis_proto_rawDescData
}

var file_apis_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_apis_proto_goTypes = []interface{}{
	(*MockAPI)(nil),                                // 0: powermock.apis.v1alpha1.MockAPI
	(*SaveMockAPIRequest)(nil),                     // 1: powermock.apis.v1alpha1.SaveMockAPIRequest
	(*SaveMockAPIResponse)(nil),                    // 2: powermock.apis.v1alpha1.SaveMockAPIResponse
	(*DeleteMockAPIRequest)(nil),                   // 3: powermock.apis.v1alpha1.DeleteMockAPIRequest
	(*DeleteMockAPIResponse)(nil),                  // 4: powermock.apis.v1alpha1.DeleteMockAPIResponse
	(*ListOptions)(nil),                            // 5: powermock.apis.v1alpha1.ListOptions
	(*ListResponse)(nil),                           // 6: powermock.apis.v1alpha1.ListResponse
	(*ListMockAPIRequest)(nil),                     // 7: powermock.apis.v1alpha1.ListMockAPIRequest
	(*ListMockAPIResponse)(nil),                    // 8: powermock.apis.v1alpha1.ListMockAPIResponse
	(*MockAPI_Condition)(nil),                      // 9: powermock.apis.v1alpha1.MockAPI.Condition
	(*MockAPI_Response)(nil),                       // 10: powermock.apis.v1alpha1.MockAPI.Response
	(*MockAPI_Case)(nil),                           // 11: powermock.apis.v1alpha1.MockAPI.Case
	(*MockAPI_Condition_SimpleCondition)(nil),      // 12: powermock.apis.v1alpha1.MockAPI.Condition.SimpleCondition
	(*MockAPI_Condition_ScriptCondition)(nil),      // 13: powermock.apis.v1alpha1.MockAPI.Condition.ScriptCondition
	(*MockAPI_Condition_SimpleCondition_Item)(nil), // 14: powermock.apis.v1alpha1.MockAPI.Condition.SimpleCondition.Item
	(*MockAPI_Response_SimpleResponse)(nil),        // 15: powermock.apis.v1alpha1.MockAPI.Response.SimpleResponse
	(*MockAPI_Response_ScriptResponse)(nil),        // 16: powermock.apis.v1alpha1.MockAPI.Response.ScriptResponse
	nil,                                            // 17: powermock.apis.v1alpha1.MockAPI.Response.SimpleResponse.HeaderEntry
	nil,                                            // 18: powermock.apis.v1alpha1.MockAPI.Response.SimpleResponse.TrailerEntry
	(*durationpb.Duration)(nil),                    // 19: google.protobuf.Duration
}
var file_apis_proto_depIdxs = []int32{
	11, // 0: powermock.apis.v1alpha1.MockAPI.cases:type_name -> powermock.apis.v1alpha1.MockAPI.Case
	0,  // 1: powermock.apis.v1alpha1.SaveMockAPIRequest.data:type_name -> powermock.apis.v1alpha1.MockAPI
	5,  // 2: powermock.apis.v1alpha1.ListMockAPIRequest.pagination:type_name -> powermock.apis.v1alpha1.ListOptions
	0,  // 3: powermock.apis.v1alpha1.ListMockAPIResponse.data:type_name -> powermock.apis.v1alpha1.MockAPI
	6,  // 4: powermock.apis.v1alpha1.ListMockAPIResponse.pagination:type_name -> powermock.apis.v1alpha1.ListResponse
	12, // 5: powermock.apis.v1alpha1.MockAPI.Condition.simple:type_name -> powermock.apis.v1alpha1.MockAPI.Condition.SimpleCondition
	13, // 6: powermock.apis.v1alpha1.MockAPI.Condition.script:type_name -> powermock.apis.v1alpha1.MockAPI.Condition.ScriptCondition
	15, // 7: powermock.apis.v1alpha1.MockAPI.Response.simple:type_name -> powermock.apis.v1alpha1.MockAPI.Response.SimpleResponse
	16, // 8: powermock.apis.v1alpha1.MockAPI.Response.script:type_name -> powermock.apis.v1alpha1.MockAPI.Response.ScriptResponse
	9,  // 9: powermock.apis.v1alpha1.MockAPI.Case.condition:type_name -> powermock.apis.v1alpha1.MockAPI.Condition
	10, // 10: powermock.apis.v1alpha1.MockAPI.Case.response:type_name -> powermock.apis.v1alpha1.MockAPI.Response
	14, // 11: powermock.apis.v1alpha1.MockAPI.Condition.SimpleCondition.items:type_name -> powermock.apis.v1alpha1.MockAPI.Condition.SimpleCondition.Item
	17, // 12: powermock.apis.v1alpha1.MockAPI.Response.SimpleResponse.header:type_name -> powermock.apis.v1alpha1.MockAPI.Response.SimpleResponse.HeaderEntry
	18, // 13: powermock.apis.v1alpha1.MockAPI.Response.SimpleResponse.trailer:type_name -> powermock.apis.v1alpha1.MockAPI.Response.SimpleResponse.TrailerEntry
	19, // 14: powermock.apis.v1alpha1.MockAPI.Response.ScriptResponse.timeout:type_name -> google.protobuf.Duration
	1,  // 15: powermock.apis.v1alpha1.Mock.SaveMockAPI:input_type -> powermock.apis.v1alpha1.SaveMockAPIRequest
	3,  // 16: powermock.apis.v1alpha1.Mock.DeleteMockAPI:input_type -> powermock.apis.v1alpha1.DeleteMockAPIRequest
	7,  // 17: powermock.apis.v1alpha1.Mock.ListMockAPI:input_type -> powermock.apis.v1alpha1.ListMockAPIRequest
	2,  // 18: powermock.apis.v1alpha1.Mock.SaveMockAPI:output_type -> powermock.apis.v1alpha1.SaveMockAPIResponse
	4,  // 19: powermock.apis.v1alpha1.Mock.DeleteMockAPI:output_type -> powermock.apis.v1alpha1.DeleteMockAPIResponse
	8,  // 20: powermock.apis.v1alpha1.Mock.ListMockAPI:output_type -> powermock.apis.v1alpha1.ListMockAPIResponse
	18, // [18:21] is the sub-list for method output_type
	15, // [15:18] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_apis_proto_init() }
func file_apis_proto_init() {
	if File_apis_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_apis_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MockAPI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveMockAPIRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveMockAPIResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMockAPIRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMockAPIResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMockAPIRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMockAPIResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MockAPI_Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MockAPI_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MockAPI_Case); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MockAPI_Condition_SimpleCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MockAPI_Condition_ScriptCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MockAPI_Condition_SimpleCondition_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MockAPI_Response_SimpleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MockAPI_Response_ScriptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_apis_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*MockAPI_Condition_Simple)(nil),
		(*MockAPI_Condition_Script)(nil),
	}
	file_apis_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*MockAPI_Response_Simple)(nil),
		(*MockAPI_Response_Script)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_apis_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_apis_proto_goTypes,
		DependencyIndexes: file_apis_proto_depIdxs,
		MessageInfos:      file_apis_proto_msgTypes,
	}.Build()
	File_apis_proto = out.File
	file_apis_proto_rawDesc = nil
	file_apis_proto_goTypes = nil
	file_apis_proto_depIdxs = nil
}
