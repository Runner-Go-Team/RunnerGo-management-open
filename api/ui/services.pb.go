// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.1
// source: services.proto

package ui

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    map[string]string `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RunResponse) Reset() {
	*x = RunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunResponse) ProtoMessage() {}

func (x *RunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunResponse.ProtoReflect.Descriptor instead.
func (*RunResponse) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{0}
}

func (x *RunResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RunResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RunResponse) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

type RunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic         string     `protobuf:"bytes,4,opt,name=topic,proto3" json:"topic,omitempty"`
	SceneRunOrder int32      `protobuf:"varint,5,opt,name=scene_run_order,json=sceneRunOrder,proto3" json:"scene_run_order,omitempty"` // 场景运行次序：1-顺序执行，2-同时执行
	UserId        string     `protobuf:"bytes,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Browsers      []*Browser `protobuf:"bytes,7,rep,name=browsers,proto3" json:"browsers,omitempty"`
	Scenes        []*Scene   `protobuf:"bytes,8,rep,name=scenes,proto3" json:"scenes,omitempty"`
}

func (x *RunRequest) Reset() {
	*x = RunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunRequest) ProtoMessage() {}

func (x *RunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunRequest.ProtoReflect.Descriptor instead.
func (*RunRequest) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{1}
}

func (x *RunRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *RunRequest) GetSceneRunOrder() int32 {
	if x != nil {
		return x.SceneRunOrder
	}
	return 0
}

func (x *RunRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RunRequest) GetBrowsers() []*Browser {
	if x != nil {
		return x.Browsers
	}
	return nil
}

func (x *RunRequest) GetScenes() []*Scene {
	if x != nil {
		return x.Scenes
	}
	return nil
}

type Browser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Headless    bool        `protobuf:"varint,1,opt,name=headless,proto3" json:"headless,omitempty"`
	BrowserType string      `protobuf:"bytes,2,opt,name=browser_type,json=browserType,proto3" json:"browser_type,omitempty"`
	SizeType    string      `protobuf:"bytes,3,opt,name=size_type,json=sizeType,proto3" json:"size_type,omitempty"`
	SetSize     *WindowSize `protobuf:"bytes,4,opt,name=set_size,json=setSize,proto3" json:"set_size,omitempty"`
}

func (x *Browser) Reset() {
	*x = Browser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Browser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Browser) ProtoMessage() {}

func (x *Browser) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Browser.ProtoReflect.Descriptor instead.
func (*Browser) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{2}
}

func (x *Browser) GetHeadless() bool {
	if x != nil {
		return x.Headless
	}
	return false
}

func (x *Browser) GetBrowserType() string {
	if x != nil {
		return x.BrowserType
	}
	return ""
}

func (x *Browser) GetSizeType() string {
	if x != nil {
		return x.SizeType
	}
	return ""
}

func (x *Browser) GetSetSize() *WindowSize {
	if x != nil {
		return x.SetSize
	}
	return nil
}

type Scene struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SceneId   string      `protobuf:"bytes,1,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
	SceneName string      `protobuf:"bytes,2,opt,name=scene_name,json=sceneName,proto3" json:"scene_name,omitempty"`
	Operators []*Operator `protobuf:"bytes,3,rep,name=operators,proto3" json:"operators,omitempty"`
}

func (x *Scene) Reset() {
	*x = Scene{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scene) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scene) ProtoMessage() {}

func (x *Scene) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scene.ProtoReflect.Descriptor instead.
func (*Scene) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{3}
}

func (x *Scene) GetSceneId() string {
	if x != nil {
		return x.SceneId
	}
	return ""
}

func (x *Scene) GetSceneName() string {
	if x != nil {
		return x.SceneName
	}
	return ""
}

func (x *Scene) GetOperators() []*Operator {
	if x != nil {
		return x.Operators
	}
	return nil
}

type Operator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorId      string           `protobuf:"bytes,1,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	Sort            int32            `protobuf:"varint,2,opt,name=sort,proto3" json:"sort,omitempty"`
	OperatorType    string           `protobuf:"bytes,3,opt,name=operator_type,json=operatorType,proto3" json:"operator_type,omitempty"`
	Action          string           `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
	ParentId        string           `protobuf:"bytes,5,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Settings        *Settings        `protobuf:"bytes,6,opt,name=settings,proto3" json:"settings,omitempty"`
	Asserts         []*Assert        `protobuf:"bytes,7,rep,name=asserts,proto3" json:"asserts,omitempty"`
	OpenPage        *OpenPage        `protobuf:"bytes,8,opt,name=open_page,json=openPage,proto3" json:"open_page,omitempty"`
	ClosePage       *ClosePage       `protobuf:"bytes,9,opt,name=close_page,json=closePage,proto3" json:"close_page,omitempty"`
	ToggleWindow    *ToggleWindow    `protobuf:"bytes,10,opt,name=toggle_window,json=toggleWindow,proto3" json:"toggle_window,omitempty"`
	SetWindowSize   *SetWindowSize   `protobuf:"bytes,11,opt,name=set_window_size,json=setWindowSize,proto3" json:"set_window_size,omitempty"`
	Forward         *Forward         `protobuf:"bytes,12,opt,name=forward,proto3" json:"forward,omitempty"`
	Back            *Back            `protobuf:"bytes,13,opt,name=back,proto3" json:"back,omitempty"`
	Refresh         *Refresh         `protobuf:"bytes,14,opt,name=refresh,proto3" json:"refresh,omitempty"`
	MouseClicking   *MouseClick      `protobuf:"bytes,16,opt,name=mouse_clicking,json=mouseClicking,proto3" json:"mouse_clicking,omitempty"`
	MouseScrolling  *MouseScroll     `protobuf:"bytes,17,opt,name=mouse_scrolling,json=mouseScrolling,proto3" json:"mouse_scrolling,omitempty"`
	MouseMovement   *MouseMove       `protobuf:"bytes,18,opt,name=mouse_movement,json=mouseMovement,proto3" json:"mouse_movement,omitempty"`
	MouseDragging   *MouseDrag       `protobuf:"bytes,19,opt,name=mouse_dragging,json=mouseDragging,proto3" json:"mouse_dragging,omitempty"`
	InputOperations *InputOperations `protobuf:"bytes,20,opt,name=input_operations,json=inputOperations,proto3" json:"input_operations,omitempty"`
	WaitEvents      *WaitEvent       `protobuf:"bytes,21,opt,name=wait_events,json=waitEvents,proto3" json:"wait_events,omitempty"`
	IfCondition     *IfCondition     `protobuf:"bytes,22,opt,name=if_condition,json=ifCondition,proto3" json:"if_condition,omitempty"`
	AssertInfo      *Assert          `protobuf:"bytes,23,opt,name=assert_info,json=assertInfo,proto3" json:"assert_info,omitempty"`
	ForLoop         *ForLoop         `protobuf:"bytes,24,opt,name=for_loop,json=forLoop,proto3" json:"for_loop,omitempty"`
	WhileLoop       *WhileLoop       `protobuf:"bytes,25,opt,name=while_loop,json=whileLoop,proto3" json:"while_loop,omitempty"`
	DataWithdraw    *DataWithdraw    `protobuf:"bytes,26,opt,name=data_withdraw,json=dataWithdraw,proto3" json:"data_withdraw,omitempty"`
	Operators       []*Operator      `protobuf:"bytes,27,rep,name=operators,proto3" json:"operators,omitempty"`
	DataWithdraws   []*DataWithdraw  `protobuf:"bytes,28,rep,name=data_withdraws,json=dataWithdraws,proto3" json:"data_withdraws,omitempty"`
	CodeOperation   *CodeOperation   `protobuf:"bytes,29,opt,name=code_operation,json=codeOperation,proto3" json:"code_operation,omitempty"`
}

func (x *Operator) Reset() {
	*x = Operator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator) ProtoMessage() {}

func (x *Operator) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator.ProtoReflect.Descriptor instead.
func (*Operator) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{4}
}

func (x *Operator) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *Operator) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *Operator) GetOperatorType() string {
	if x != nil {
		return x.OperatorType
	}
	return ""
}

func (x *Operator) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *Operator) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *Operator) GetSettings() *Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *Operator) GetAsserts() []*Assert {
	if x != nil {
		return x.Asserts
	}
	return nil
}

func (x *Operator) GetOpenPage() *OpenPage {
	if x != nil {
		return x.OpenPage
	}
	return nil
}

func (x *Operator) GetClosePage() *ClosePage {
	if x != nil {
		return x.ClosePage
	}
	return nil
}

func (x *Operator) GetToggleWindow() *ToggleWindow {
	if x != nil {
		return x.ToggleWindow
	}
	return nil
}

func (x *Operator) GetSetWindowSize() *SetWindowSize {
	if x != nil {
		return x.SetWindowSize
	}
	return nil
}

func (x *Operator) GetForward() *Forward {
	if x != nil {
		return x.Forward
	}
	return nil
}

func (x *Operator) GetBack() *Back {
	if x != nil {
		return x.Back
	}
	return nil
}

func (x *Operator) GetRefresh() *Refresh {
	if x != nil {
		return x.Refresh
	}
	return nil
}

func (x *Operator) GetMouseClicking() *MouseClick {
	if x != nil {
		return x.MouseClicking
	}
	return nil
}

func (x *Operator) GetMouseScrolling() *MouseScroll {
	if x != nil {
		return x.MouseScrolling
	}
	return nil
}

func (x *Operator) GetMouseMovement() *MouseMove {
	if x != nil {
		return x.MouseMovement
	}
	return nil
}

func (x *Operator) GetMouseDragging() *MouseDrag {
	if x != nil {
		return x.MouseDragging
	}
	return nil
}

func (x *Operator) GetInputOperations() *InputOperations {
	if x != nil {
		return x.InputOperations
	}
	return nil
}

func (x *Operator) GetWaitEvents() *WaitEvent {
	if x != nil {
		return x.WaitEvents
	}
	return nil
}

func (x *Operator) GetIfCondition() *IfCondition {
	if x != nil {
		return x.IfCondition
	}
	return nil
}

func (x *Operator) GetAssertInfo() *Assert {
	if x != nil {
		return x.AssertInfo
	}
	return nil
}

func (x *Operator) GetForLoop() *ForLoop {
	if x != nil {
		return x.ForLoop
	}
	return nil
}

func (x *Operator) GetWhileLoop() *WhileLoop {
	if x != nil {
		return x.WhileLoop
	}
	return nil
}

func (x *Operator) GetDataWithdraw() *DataWithdraw {
	if x != nil {
		return x.DataWithdraw
	}
	return nil
}

func (x *Operator) GetOperators() []*Operator {
	if x != nil {
		return x.Operators
	}
	return nil
}

func (x *Operator) GetDataWithdraws() []*DataWithdraw {
	if x != nil {
		return x.DataWithdraws
	}
	return nil
}

func (x *Operator) GetCodeOperation() *CodeOperation {
	if x != nil {
		return x.CodeOperation
	}
	return nil
}

type OpenPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url       string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	IsNewPage bool   `protobuf:"varint,2,opt,name=is_new_page,json=isNewPage,proto3" json:"is_new_page,omitempty"`
}

func (x *OpenPage) Reset() {
	*x = OpenPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenPage) ProtoMessage() {}

func (x *OpenPage) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenPage.ProtoReflect.Descriptor instead.
func (*OpenPage) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{5}
}

func (x *OpenPage) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *OpenPage) GetIsNewPage() bool {
	if x != nil {
		return x.IsNewPage
	}
	return false
}

type ClosePage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WindowAction string `protobuf:"bytes,1,opt,name=window_action,json=windowAction,proto3" json:"window_action,omitempty"`
	InputContent string `protobuf:"bytes,2,opt,name=input_content,json=inputContent,proto3" json:"input_content,omitempty"`
	CustomIndex  int32  `protobuf:"varint,3,opt,name=custom_index,json=customIndex,proto3" json:"custom_index,omitempty"`
}

func (x *ClosePage) Reset() {
	*x = ClosePage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClosePage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClosePage) ProtoMessage() {}

func (x *ClosePage) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClosePage.ProtoReflect.Descriptor instead.
func (*ClosePage) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{6}
}

func (x *ClosePage) GetWindowAction() string {
	if x != nil {
		return x.WindowAction
	}
	return ""
}

func (x *ClosePage) GetInputContent() string {
	if x != nil {
		return x.InputContent
	}
	return ""
}

func (x *ClosePage) GetCustomIndex() int32 {
	if x != nil {
		return x.CustomIndex
	}
	return 0
}

type ToggleWindow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                 string                `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	SwitchPage           *SwitchPage           `protobuf:"bytes,2,opt,name=switch_page,json=switchPage,proto3" json:"switch_page,omitempty"`
	ExitFrame            *ExitFrame            `protobuf:"bytes,3,opt,name=exit_frame,json=exitFrame,proto3" json:"exit_frame,omitempty"`
	SwitchFrameByIndex   *SwitchFrameByIndex   `protobuf:"bytes,4,opt,name=switch_frame_by_index,json=switchFrameByIndex,proto3" json:"switch_frame_by_index,omitempty"`
	SwitchToParentFrame  *SwitchToParentFrame  `protobuf:"bytes,5,opt,name=switch_to_parent_frame,json=switchToParentFrame,proto3" json:"switch_to_parent_frame,omitempty"`
	SwitchFrameByLocator *SwitchFrameByLocator `protobuf:"bytes,6,opt,name=switch_frame_by_locator,json=switchFrameByLocator,proto3" json:"switch_frame_by_locator,omitempty"`
}

func (x *ToggleWindow) Reset() {
	*x = ToggleWindow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToggleWindow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleWindow) ProtoMessage() {}

func (x *ToggleWindow) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleWindow.ProtoReflect.Descriptor instead.
func (*ToggleWindow) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{7}
}

func (x *ToggleWindow) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ToggleWindow) GetSwitchPage() *SwitchPage {
	if x != nil {
		return x.SwitchPage
	}
	return nil
}

func (x *ToggleWindow) GetExitFrame() *ExitFrame {
	if x != nil {
		return x.ExitFrame
	}
	return nil
}

func (x *ToggleWindow) GetSwitchFrameByIndex() *SwitchFrameByIndex {
	if x != nil {
		return x.SwitchFrameByIndex
	}
	return nil
}

func (x *ToggleWindow) GetSwitchToParentFrame() *SwitchToParentFrame {
	if x != nil {
		return x.SwitchToParentFrame
	}
	return nil
}

func (x *ToggleWindow) GetSwitchFrameByLocator() *SwitchFrameByLocator {
	if x != nil {
		return x.SwitchFrameByLocator
	}
	return nil
}

type Forward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Forward) Reset() {
	*x = Forward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Forward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Forward) ProtoMessage() {}

func (x *Forward) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Forward.ProtoReflect.Descriptor instead.
func (*Forward) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{8}
}

type Back struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Back) Reset() {
	*x = Back{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Back) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Back) ProtoMessage() {}

func (x *Back) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Back.ProtoReflect.Descriptor instead.
func (*Back) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{9}
}

type Refresh struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Refresh) Reset() {
	*x = Refresh{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Refresh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Refresh) ProtoMessage() {}

func (x *Refresh) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Refresh.ProtoReflect.Descriptor instead.
func (*Refresh) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{10}
}

type SwitchPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WindowAction string `protobuf:"bytes,1,opt,name=window_action,json=windowAction,proto3" json:"window_action,omitempty"`
	InputContent string `protobuf:"bytes,2,opt,name=input_content,json=inputContent,proto3" json:"input_content,omitempty"`
}

func (x *SwitchPage) Reset() {
	*x = SwitchPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchPage) ProtoMessage() {}

func (x *SwitchPage) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchPage.ProtoReflect.Descriptor instead.
func (*SwitchPage) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{11}
}

func (x *SwitchPage) GetWindowAction() string {
	if x != nil {
		return x.WindowAction
	}
	return ""
}

func (x *SwitchPage) GetInputContent() string {
	if x != nil {
		return x.InputContent
	}
	return ""
}

type ExitFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExitFrame) Reset() {
	*x = ExitFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExitFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExitFrame) ProtoMessage() {}

func (x *ExitFrame) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExitFrame.ProtoReflect.Descriptor instead.
func (*ExitFrame) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{12}
}

type SwitchFrameByIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrameIndex int32 `protobuf:"varint,1,opt,name=frame_index,json=frameIndex,proto3" json:"frame_index,omitempty"`
}

func (x *SwitchFrameByIndex) Reset() {
	*x = SwitchFrameByIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchFrameByIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchFrameByIndex) ProtoMessage() {}

func (x *SwitchFrameByIndex) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchFrameByIndex.ProtoReflect.Descriptor instead.
func (*SwitchFrameByIndex) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{13}
}

func (x *SwitchFrameByIndex) GetFrameIndex() int32 {
	if x != nil {
		return x.FrameIndex
	}
	return 0
}

type SwitchToParentFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SwitchToParentFrame) Reset() {
	*x = SwitchToParentFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchToParentFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchToParentFrame) ProtoMessage() {}

func (x *SwitchToParentFrame) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchToParentFrame.ProtoReflect.Descriptor instead.
func (*SwitchToParentFrame) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{14}
}

type SwitchFrameByLocator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Element *Element `protobuf:"bytes,1,opt,name=element,proto3" json:"element,omitempty"`
}

func (x *SwitchFrameByLocator) Reset() {
	*x = SwitchFrameByLocator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchFrameByLocator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchFrameByLocator) ProtoMessage() {}

func (x *SwitchFrameByLocator) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchFrameByLocator.ProtoReflect.Descriptor instead.
func (*SwitchFrameByLocator) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{15}
}

func (x *SwitchFrameByLocator) GetElement() *Element {
	if x != nil {
		return x.Element
	}
	return nil
}

type SetWindowSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    string      `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	SetSize *WindowSize `protobuf:"bytes,2,opt,name=set_size,json=setSize,proto3" json:"set_size,omitempty"`
}

func (x *SetWindowSize) Reset() {
	*x = SetWindowSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetWindowSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetWindowSize) ProtoMessage() {}

func (x *SetWindowSize) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetWindowSize.ProtoReflect.Descriptor instead.
func (*SetWindowSize) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{16}
}

func (x *SetWindowSize) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SetWindowSize) GetSetSize() *WindowSize {
	if x != nil {
		return x.SetSize
	}
	return nil
}

type WindowSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *WindowSize) Reset() {
	*x = WindowSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowSize) ProtoMessage() {}

func (x *WindowSize) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowSize.ProtoReflect.Descriptor instead.
func (*WindowSize) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{17}
}

func (x *WindowSize) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *WindowSize) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type Settings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WaitBeforeExec   int32  `protobuf:"varint,1,opt,name=wait_before_exec,json=waitBeforeExec,proto3" json:"wait_before_exec,omitempty"`
	Timeout          int32  `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	ErrorHandling    string `protobuf:"bytes,3,opt,name=error_handling,json=errorHandling,proto3" json:"error_handling,omitempty"`
	ScreenshotConfig string `protobuf:"bytes,4,opt,name=screenshot_config,json=screenshotConfig,proto3" json:"screenshot_config,omitempty"`
}

func (x *Settings) Reset() {
	*x = Settings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Settings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings) ProtoMessage() {}

func (x *Settings) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings.ProtoReflect.Descriptor instead.
func (*Settings) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{18}
}

func (x *Settings) GetWaitBeforeExec() int32 {
	if x != nil {
		return x.WaitBeforeExec
	}
	return 0
}

func (x *Settings) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *Settings) GetErrorHandling() string {
	if x != nil {
		return x.ErrorHandling
	}
	return ""
}

func (x *Settings) GetScreenshotConfig() string {
	if x != nil {
		return x.ScreenshotConfig
	}
	return ""
}

type Assert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                      string                  `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	ElementExists             *ElementAssertion       `protobuf:"bytes,2,opt,name=element_exists,json=elementExists,proto3" json:"element_exists,omitempty"`
	ElementNotExists          *ElementAssertion       `protobuf:"bytes,3,opt,name=element_not_exists,json=elementNotExists,proto3" json:"element_not_exists,omitempty"`
	ElementDisplayed          *ElementAssertion       `protobuf:"bytes,4,opt,name=element_displayed,json=elementDisplayed,proto3" json:"element_displayed,omitempty"`
	ElementNotDisplayed       *ElementAssertion       `protobuf:"bytes,5,opt,name=element_not_displayed,json=elementNotDisplayed,proto3" json:"element_not_displayed,omitempty"`
	TextExists                *TextExists             `protobuf:"bytes,6,opt,name=text_exists,json=textExists,proto3" json:"text_exists,omitempty"`
	TextNotExists             *TextNotExists          `protobuf:"bytes,7,opt,name=text_not_exists,json=textNotExists,proto3" json:"text_not_exists,omitempty"`
	VariableAssertion         *VariableAssertion      `protobuf:"bytes,8,opt,name=variable_assertion,json=variableAssertion,proto3" json:"variable_assertion,omitempty"`
	ExpressionAssertion       *ExpressionAssertion    `protobuf:"bytes,9,opt,name=expression_assertion,json=expressionAssertion,proto3" json:"expression_assertion,omitempty"`
	ElementAttributeAssertion *ElementAttributeAssert `protobuf:"bytes,10,opt,name=element_attribute_assertion,json=elementAttributeAssertion,proto3" json:"element_attribute_assertion,omitempty"`
	PageAttributeAssertion    *PageAttributeAssert    `protobuf:"bytes,11,opt,name=page_attribute_assertion,json=pageAttributeAssertion,proto3" json:"page_attribute_assertion,omitempty"`
}

func (x *Assert) Reset() {
	*x = Assert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Assert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Assert) ProtoMessage() {}

func (x *Assert) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Assert.ProtoReflect.Descriptor instead.
func (*Assert) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{19}
}

func (x *Assert) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Assert) GetElementExists() *ElementAssertion {
	if x != nil {
		return x.ElementExists
	}
	return nil
}

func (x *Assert) GetElementNotExists() *ElementAssertion {
	if x != nil {
		return x.ElementNotExists
	}
	return nil
}

func (x *Assert) GetElementDisplayed() *ElementAssertion {
	if x != nil {
		return x.ElementDisplayed
	}
	return nil
}

func (x *Assert) GetElementNotDisplayed() *ElementAssertion {
	if x != nil {
		return x.ElementNotDisplayed
	}
	return nil
}

func (x *Assert) GetTextExists() *TextExists {
	if x != nil {
		return x.TextExists
	}
	return nil
}

func (x *Assert) GetTextNotExists() *TextNotExists {
	if x != nil {
		return x.TextNotExists
	}
	return nil
}

func (x *Assert) GetVariableAssertion() *VariableAssertion {
	if x != nil {
		return x.VariableAssertion
	}
	return nil
}

func (x *Assert) GetExpressionAssertion() *ExpressionAssertion {
	if x != nil {
		return x.ExpressionAssertion
	}
	return nil
}

func (x *Assert) GetElementAttributeAssertion() *ElementAttributeAssert {
	if x != nil {
		return x.ElementAttributeAssertion
	}
	return nil
}

func (x *Assert) GetPageAttributeAssertion() *PageAttributeAssert {
	if x != nil {
		return x.PageAttributeAssertion
	}
	return nil
}

type DataWithdraw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	VariableType    string                   `protobuf:"bytes,2,opt,name=variable_type,json=variableType,proto3" json:"variable_type,omitempty"`
	WithdrawType    string                   `protobuf:"bytes,3,opt,name=withdraw_type,json=withdrawType,proto3" json:"withdraw_type,omitempty"`
	ElementMethod   *WithdrawElementMethod   `protobuf:"bytes,4,opt,name=element_method,json=elementMethod,proto3" json:"element_method,omitempty"`
	WebpageMethod   *WithdrawWebpageMethod   `protobuf:"bytes,5,opt,name=webpage_method,json=webpageMethod,proto3" json:"webpage_method,omitempty"`
	ScrollBarMethod *WithdrawScrollBarMethod `protobuf:"bytes,6,opt,name=scroll_bar_method,json=scrollBarMethod,proto3" json:"scroll_bar_method,omitempty"`
}

func (x *DataWithdraw) Reset() {
	*x = DataWithdraw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataWithdraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataWithdraw) ProtoMessage() {}

func (x *DataWithdraw) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataWithdraw.ProtoReflect.Descriptor instead.
func (*DataWithdraw) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{20}
}

func (x *DataWithdraw) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DataWithdraw) GetVariableType() string {
	if x != nil {
		return x.VariableType
	}
	return ""
}

func (x *DataWithdraw) GetWithdrawType() string {
	if x != nil {
		return x.WithdrawType
	}
	return ""
}

func (x *DataWithdraw) GetElementMethod() *WithdrawElementMethod {
	if x != nil {
		return x.ElementMethod
	}
	return nil
}

func (x *DataWithdraw) GetWebpageMethod() *WithdrawWebpageMethod {
	if x != nil {
		return x.WebpageMethod
	}
	return nil
}

func (x *DataWithdraw) GetScrollBarMethod() *WithdrawScrollBarMethod {
	if x != nil {
		return x.ScrollBarMethod
	}
	return nil
}

type WithdrawElementMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method        string   `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	Element       *Element `protobuf:"bytes,2,opt,name=element,proto3" json:"element,omitempty"`
	AttributeName string   `protobuf:"bytes,3,opt,name=attribute_name,json=attributeName,proto3" json:"attribute_name,omitempty"`
	PositionType  string   `protobuf:"bytes,4,opt,name=position_type,json=positionType,proto3" json:"position_type,omitempty"`
}

func (x *WithdrawElementMethod) Reset() {
	*x = WithdrawElementMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawElementMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawElementMethod) ProtoMessage() {}

func (x *WithdrawElementMethod) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawElementMethod.ProtoReflect.Descriptor instead.
func (*WithdrawElementMethod) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{21}
}

func (x *WithdrawElementMethod) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *WithdrawElementMethod) GetElement() *Element {
	if x != nil {
		return x.Element
	}
	return nil
}

func (x *WithdrawElementMethod) GetAttributeName() string {
	if x != nil {
		return x.AttributeName
	}
	return ""
}

func (x *WithdrawElementMethod) GetPositionType() string {
	if x != nil {
		return x.PositionType
	}
	return ""
}

type WithdrawWebpageMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	Value  string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *WithdrawWebpageMethod) Reset() {
	*x = WithdrawWebpageMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawWebpageMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawWebpageMethod) ProtoMessage() {}

func (x *WithdrawWebpageMethod) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawWebpageMethod.ProtoReflect.Descriptor instead.
func (*WithdrawWebpageMethod) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{22}
}

func (x *WithdrawWebpageMethod) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *WithdrawWebpageMethod) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type WithdrawScrollBarMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method         string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	ScrollPosition string `protobuf:"bytes,2,opt,name=scroll_position,json=scrollPosition,proto3" json:"scroll_position,omitempty"`
}

func (x *WithdrawScrollBarMethod) Reset() {
	*x = WithdrawScrollBarMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawScrollBarMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawScrollBarMethod) ProtoMessage() {}

func (x *WithdrawScrollBarMethod) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawScrollBarMethod.ProtoReflect.Descriptor instead.
func (*WithdrawScrollBarMethod) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{23}
}

func (x *WithdrawScrollBarMethod) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *WithdrawScrollBarMethod) GetScrollPosition() string {
	if x != nil {
		return x.ScrollPosition
	}
	return ""
}

type ElementAssertion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Element *Element `protobuf:"bytes,1,opt,name=element,proto3" json:"element,omitempty"`
}

func (x *ElementAssertion) Reset() {
	*x = ElementAssertion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementAssertion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementAssertion) ProtoMessage() {}

func (x *ElementAssertion) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementAssertion.ProtoReflect.Descriptor instead.
func (*ElementAssertion) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{24}
}

func (x *ElementAssertion) GetElement() *Element {
	if x != nil {
		return x.Element
	}
	return nil
}

type TextExists struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetTexts []string `protobuf:"bytes,1,rep,name=target_texts,json=targetTexts,proto3" json:"target_texts,omitempty"`
}

func (x *TextExists) Reset() {
	*x = TextExists{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextExists) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextExists) ProtoMessage() {}

func (x *TextExists) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextExists.ProtoReflect.Descriptor instead.
func (*TextExists) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{25}
}

func (x *TextExists) GetTargetTexts() []string {
	if x != nil {
		return x.TargetTexts
	}
	return nil
}

type TextNotExists struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetTexts []string `protobuf:"bytes,1,rep,name=target_texts,json=targetTexts,proto3" json:"target_texts,omitempty"`
}

func (x *TextNotExists) Reset() {
	*x = TextNotExists{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextNotExists) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextNotExists) ProtoMessage() {}

func (x *TextNotExists) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextNotExists.ProtoReflect.Descriptor instead.
func (*TextNotExists) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{26}
}

func (x *TextNotExists) GetTargetTexts() []string {
	if x != nil {
		return x.TargetTexts
	}
	return nil
}

type ExpressionAssertion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpectedValue string `protobuf:"bytes,1,opt,name=expected_value,json=expectedValue,proto3" json:"expected_value,omitempty"`
}

func (x *ExpressionAssertion) Reset() {
	*x = ExpressionAssertion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpressionAssertion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpressionAssertion) ProtoMessage() {}

func (x *ExpressionAssertion) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpressionAssertion.ProtoReflect.Descriptor instead.
func (*ExpressionAssertion) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{27}
}

func (x *ExpressionAssertion) GetExpectedValue() string {
	if x != nil {
		return x.ExpectedValue
	}
	return ""
}

type ElementAttributeAssert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelationOptions string   `protobuf:"bytes,1,opt,name=relation_options,json=relationOptions,proto3" json:"relation_options,omitempty"`
	Element         *Element `protobuf:"bytes,2,opt,name=element,proto3" json:"element,omitempty"`
	ConditionType   string   `protobuf:"bytes,3,opt,name=condition_type,json=conditionType,proto3" json:"condition_type,omitempty"`
	ExpectedValue   string   `protobuf:"bytes,4,opt,name=expected_value,json=expectedValue,proto3" json:"expected_value,omitempty"`
}

func (x *ElementAttributeAssert) Reset() {
	*x = ElementAttributeAssert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementAttributeAssert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementAttributeAssert) ProtoMessage() {}

func (x *ElementAttributeAssert) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementAttributeAssert.ProtoReflect.Descriptor instead.
func (*ElementAttributeAssert) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{28}
}

func (x *ElementAttributeAssert) GetRelationOptions() string {
	if x != nil {
		return x.RelationOptions
	}
	return ""
}

func (x *ElementAttributeAssert) GetElement() *Element {
	if x != nil {
		return x.Element
	}
	return nil
}

func (x *ElementAttributeAssert) GetConditionType() string {
	if x != nil {
		return x.ConditionType
	}
	return ""
}

func (x *ElementAttributeAssert) GetExpectedValue() string {
	if x != nil {
		return x.ExpectedValue
	}
	return ""
}

type PageAttributeAssert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelationOptions string `protobuf:"bytes,1,opt,name=relation_options,json=relationOptions,proto3" json:"relation_options,omitempty"`
	AssertAttribute string `protobuf:"bytes,2,opt,name=assert_attribute,json=assertAttribute,proto3" json:"assert_attribute,omitempty"`
	ExpectedValue   string `protobuf:"bytes,3,opt,name=expected_value,json=expectedValue,proto3" json:"expected_value,omitempty"`
}

func (x *PageAttributeAssert) Reset() {
	*x = PageAttributeAssert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageAttributeAssert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageAttributeAssert) ProtoMessage() {}

func (x *PageAttributeAssert) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageAttributeAssert.ProtoReflect.Descriptor instead.
func (*PageAttributeAssert) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{29}
}

func (x *PageAttributeAssert) GetRelationOptions() string {
	if x != nil {
		return x.RelationOptions
	}
	return ""
}

func (x *PageAttributeAssert) GetAssertAttribute() string {
	if x != nil {
		return x.AssertAttribute
	}
	return ""
}

func (x *PageAttributeAssert) GetExpectedValue() string {
	if x != nil {
		return x.ExpectedValue
	}
	return ""
}

type AssertElementExists struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Element *Element `protobuf:"bytes,1,opt,name=element,proto3" json:"element,omitempty"`
}

func (x *AssertElementExists) Reset() {
	*x = AssertElementExists{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssertElementExists) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssertElementExists) ProtoMessage() {}

func (x *AssertElementExists) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssertElementExists.ProtoReflect.Descriptor instead.
func (*AssertElementExists) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{30}
}

func (x *AssertElementExists) GetElement() *Element {
	if x != nil {
		return x.Element
	}
	return nil
}

type AssertTextExists struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetTexts []string `protobuf:"bytes,1,rep,name=target_texts,json=targetTexts,proto3" json:"target_texts,omitempty"`
}

func (x *AssertTextExists) Reset() {
	*x = AssertTextExists{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssertTextExists) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssertTextExists) ProtoMessage() {}

func (x *AssertTextExists) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssertTextExists.ProtoReflect.Descriptor instead.
func (*AssertTextExists) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{31}
}

func (x *AssertTextExists) GetTargetTexts() []string {
	if x != nil {
		return x.TargetTexts
	}
	return nil
}

type VariableAssertion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelationOptions string `protobuf:"bytes,1,opt,name=relation_options,json=relationOptions,proto3" json:"relation_options,omitempty"`
	ActualValue     string `protobuf:"bytes,2,opt,name=actual_value,json=actualValue,proto3" json:"actual_value,omitempty"`
	ExpectedValue   string `protobuf:"bytes,3,opt,name=expected_value,json=expectedValue,proto3" json:"expected_value,omitempty"`
}

func (x *VariableAssertion) Reset() {
	*x = VariableAssertion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableAssertion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableAssertion) ProtoMessage() {}

func (x *VariableAssertion) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableAssertion.ProtoReflect.Descriptor instead.
func (*VariableAssertion) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{32}
}

func (x *VariableAssertion) GetRelationOptions() string {
	if x != nil {
		return x.RelationOptions
	}
	return ""
}

func (x *VariableAssertion) GetActualValue() string {
	if x != nil {
		return x.ActualValue
	}
	return ""
}

func (x *VariableAssertion) GetExpectedValue() string {
	if x != nil {
		return x.ExpectedValue
	}
	return ""
}

type MouseClick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          string         `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Element       *Element       `protobuf:"bytes,2,opt,name=element,proto3" json:"element,omitempty"`
	ClickPosition *ClickPosition `protobuf:"bytes,3,opt,name=click_position,json=clickPosition,proto3" json:"click_position,omitempty"`
}

func (x *MouseClick) Reset() {
	*x = MouseClick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MouseClick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MouseClick) ProtoMessage() {}

func (x *MouseClick) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MouseClick.ProtoReflect.Descriptor instead.
func (*MouseClick) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{33}
}

func (x *MouseClick) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MouseClick) GetElement() *Element {
	if x != nil {
		return x.Element
	}
	return nil
}

func (x *MouseClick) GetClickPosition() *ClickPosition {
	if x != nil {
		return x.ClickPosition
	}
	return nil
}

type ClickPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *ClickPosition) Reset() {
	*x = ClickPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickPosition) ProtoMessage() {}

func (x *ClickPosition) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickPosition.ProtoReflect.Descriptor instead.
func (*ClickPosition) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{34}
}

func (x *ClickPosition) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *ClickPosition) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type MouseScroll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Direction            string   `protobuf:"bytes,2,opt,name=direction,proto3" json:"direction,omitempty"`
	Element              *Element `protobuf:"bytes,3,opt,name=element,proto3" json:"element,omitempty"`
	ScrollDistance       int32    `protobuf:"varint,4,opt,name=scroll_distance,json=scrollDistance,proto3" json:"scroll_distance,omitempty"`
	SingleScrollDistance int32    `protobuf:"varint,5,opt,name=single_scroll_distance,json=singleScrollDistance,proto3" json:"single_scroll_distance,omitempty"`
}

func (x *MouseScroll) Reset() {
	*x = MouseScroll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MouseScroll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MouseScroll) ProtoMessage() {}

func (x *MouseScroll) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MouseScroll.ProtoReflect.Descriptor instead.
func (*MouseScroll) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{35}
}

func (x *MouseScroll) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MouseScroll) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *MouseScroll) GetElement() *Element {
	if x != nil {
		return x.Element
	}
	return nil
}

func (x *MouseScroll) GetScrollDistance() int32 {
	if x != nil {
		return x.ScrollDistance
	}
	return 0
}

func (x *MouseScroll) GetSingleScrollDistance() int32 {
	if x != nil {
		return x.SingleScrollDistance
	}
	return 0
}

type MouseMove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                string                `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	EndPointCoordinates *DragPointCoordinates `protobuf:"bytes,2,opt,name=end_point_coordinates,json=endPointCoordinates,proto3" json:"end_point_coordinates,omitempty"`
}

func (x *MouseMove) Reset() {
	*x = MouseMove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MouseMove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MouseMove) ProtoMessage() {}

func (x *MouseMove) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MouseMove.ProtoReflect.Descriptor instead.
func (*MouseMove) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{36}
}

func (x *MouseMove) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MouseMove) GetEndPointCoordinates() *DragPointCoordinates {
	if x != nil {
		return x.EndPointCoordinates
	}
	return nil
}

type MouseDrag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                string                `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Element             *Element              `protobuf:"bytes,2,opt,name=element,proto3" json:"element,omitempty"`
	TargetElement       *Element              `protobuf:"bytes,3,opt,name=target_element,json=targetElement,proto3" json:"target_element,omitempty"`
	EndPointCoordinates *DragPointCoordinates `protobuf:"bytes,4,opt,name=end_point_coordinates,json=endPointCoordinates,proto3" json:"end_point_coordinates,omitempty"`
}

func (x *MouseDrag) Reset() {
	*x = MouseDrag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MouseDrag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MouseDrag) ProtoMessage() {}

func (x *MouseDrag) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MouseDrag.ProtoReflect.Descriptor instead.
func (*MouseDrag) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{37}
}

func (x *MouseDrag) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MouseDrag) GetElement() *Element {
	if x != nil {
		return x.Element
	}
	return nil
}

func (x *MouseDrag) GetTargetElement() *Element {
	if x != nil {
		return x.TargetElement
	}
	return nil
}

func (x *MouseDrag) GetEndPointCoordinates() *DragPointCoordinates {
	if x != nil {
		return x.EndPointCoordinates
	}
	return nil
}

type DragPointCoordinates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *DragPointCoordinates) Reset() {
	*x = DragPointCoordinates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DragPointCoordinates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DragPointCoordinates) ProtoMessage() {}

func (x *DragPointCoordinates) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DragPointCoordinates.ProtoReflect.Descriptor instead.
func (*DragPointCoordinates) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{38}
}

func (x *DragPointCoordinates) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *DragPointCoordinates) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type InputOperations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Element         *Element `protobuf:"bytes,2,opt,name=element,proto3" json:"element,omitempty"`
	InputContent    string   `protobuf:"bytes,3,opt,name=input_content,json=inputContent,proto3" json:"input_content,omitempty"`
	IsAppendContent bool     `protobuf:"varint,4,opt,name=is_append_content,json=isAppendContent,proto3" json:"is_append_content,omitempty"`
}

func (x *InputOperations) Reset() {
	*x = InputOperations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputOperations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputOperations) ProtoMessage() {}

func (x *InputOperations) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputOperations.ProtoReflect.Descriptor instead.
func (*InputOperations) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{39}
}

func (x *InputOperations) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *InputOperations) GetElement() *Element {
	if x != nil {
		return x.Element
	}
	return nil
}

func (x *InputOperations) GetInputContent() string {
	if x != nil {
		return x.InputContent
	}
	return ""
}

func (x *InputOperations) GetIsAppendContent() bool {
	if x != nil {
		return x.IsAppendContent
	}
	return false
}

type WaitEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	WaitTime    string   `protobuf:"bytes,2,opt,name=wait_time,json=waitTime,proto3" json:"wait_time,omitempty"`
	Element     *Element `protobuf:"bytes,3,opt,name=element,proto3" json:"element,omitempty"`
	TargetTexts []string `protobuf:"bytes,4,rep,name=target_texts,json=targetTexts,proto3" json:"target_texts,omitempty"`
}

func (x *WaitEvent) Reset() {
	*x = WaitEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitEvent) ProtoMessage() {}

func (x *WaitEvent) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitEvent.ProtoReflect.Descriptor instead.
func (*WaitEvent) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{40}
}

func (x *WaitEvent) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *WaitEvent) GetWaitTime() string {
	if x != nil {
		return x.WaitTime
	}
	return ""
}

func (x *WaitEvent) GetElement() *Element {
	if x != nil {
		return x.Element
	}
	return nil
}

func (x *WaitEvent) GetTargetTexts() []string {
	if x != nil {
		return x.TargetTexts
	}
	return nil
}

type Element struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locators []*Locator `protobuf:"bytes,1,rep,name=locators,proto3" json:"locators,omitempty"`
}

func (x *Element) Reset() {
	*x = Element{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Element) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Element) ProtoMessage() {}

func (x *Element) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Element.ProtoReflect.Descriptor instead.
func (*Element) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{41}
}

func (x *Element) GetLocators() []*Locator {
	if x != nil {
		return x.Locators
	}
	return nil
}

type Locator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	Type   string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Key    string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Value  string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Index  int32  `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *Locator) Reset() {
	*x = Locator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Locator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Locator) ProtoMessage() {}

func (x *Locator) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Locator.ProtoReflect.Descriptor instead.
func (*Locator) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{42}
}

func (x *Locator) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *Locator) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Locator) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Locator) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Locator) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type IfCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConditionRelate    string               `protobuf:"bytes,1,opt,name=condition_relate,json=conditionRelate,proto3" json:"condition_relate,omitempty"`
	ConditionOperators []*ConditionOperator `protobuf:"bytes,2,rep,name=condition_operators,json=conditionOperators,proto3" json:"condition_operators,omitempty"`
}

func (x *IfCondition) Reset() {
	*x = IfCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IfCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IfCondition) ProtoMessage() {}

func (x *IfCondition) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IfCondition.ProtoReflect.Descriptor instead.
func (*IfCondition) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{43}
}

func (x *IfCondition) GetConditionRelate() string {
	if x != nil {
		return x.ConditionRelate
	}
	return ""
}

func (x *IfCondition) GetConditionOperators() []*ConditionOperator {
	if x != nil {
		return x.ConditionOperators
	}
	return nil
}

type WhileLoop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConditionRelate    string               `protobuf:"bytes,1,opt,name=condition_relate,json=conditionRelate,proto3" json:"condition_relate,omitempty"`
	ConditionOperators []*ConditionOperator `protobuf:"bytes,2,rep,name=condition_operators,json=conditionOperators,proto3" json:"condition_operators,omitempty"`
	MaxCount           int32                `protobuf:"varint,3,opt,name=max_count,json=maxCount,proto3" json:"max_count,omitempty"`
}

func (x *WhileLoop) Reset() {
	*x = WhileLoop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WhileLoop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhileLoop) ProtoMessage() {}

func (x *WhileLoop) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhileLoop.ProtoReflect.Descriptor instead.
func (*WhileLoop) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{44}
}

func (x *WhileLoop) GetConditionRelate() string {
	if x != nil {
		return x.ConditionRelate
	}
	return ""
}

func (x *WhileLoop) GetConditionOperators() []*ConditionOperator {
	if x != nil {
		return x.ConditionOperators
	}
	return nil
}

func (x *WhileLoop) GetMaxCount() int32 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

type ConditionOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       string      `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	AssertInfo *Assert     `protobuf:"bytes,2,opt,name=assert_info,json=assertInfo,proto3" json:"assert_info,omitempty"`
	Expression *Expression `protobuf:"bytes,3,opt,name=expression,proto3" json:"expression,omitempty"`
}

func (x *ConditionOperator) Reset() {
	*x = ConditionOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionOperator) ProtoMessage() {}

func (x *ConditionOperator) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionOperator.ProtoReflect.Descriptor instead.
func (*ConditionOperator) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{45}
}

func (x *ConditionOperator) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ConditionOperator) GetAssertInfo() *Assert {
	if x != nil {
		return x.AssertInfo
	}
	return nil
}

func (x *ConditionOperator) GetExpression() *Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

type Expression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelationOptions string `protobuf:"bytes,1,opt,name=relation_options,json=relationOptions,proto3" json:"relation_options,omitempty"`
	ActualValue     string `protobuf:"bytes,2,opt,name=actual_value,json=actualValue,proto3" json:"actual_value,omitempty"`
	ExpectedValue   string `protobuf:"bytes,3,opt,name=expected_value,json=expectedValue,proto3" json:"expected_value,omitempty"`
}

func (x *Expression) Reset() {
	*x = Expression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression) ProtoMessage() {}

func (x *Expression) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression.ProtoReflect.Descriptor instead.
func (*Expression) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{46}
}

func (x *Expression) GetRelationOptions() string {
	if x != nil {
		return x.RelationOptions
	}
	return ""
}

func (x *Expression) GetActualValue() string {
	if x != nil {
		return x.ActualValue
	}
	return ""
}

func (x *Expression) GetExpectedValue() string {
	if x != nil {
		return x.ExpectedValue
	}
	return ""
}

type ForLoop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  string      `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Count int32       `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Files []*BaseFile `protobuf:"bytes,3,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *ForLoop) Reset() {
	*x = ForLoop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForLoop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForLoop) ProtoMessage() {}

func (x *ForLoop) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForLoop.ProtoReflect.Descriptor instead.
func (*ForLoop) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{47}
}

func (x *ForLoop) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ForLoop) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ForLoop) GetFiles() []*BaseFile {
	if x != nil {
		return x.Files
	}
	return nil
}

type BaseFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Url      string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	FileType int64  `protobuf:"varint,4,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"` // 0:普通文件  1:json
	Mark     bool   `protobuf:"varint,5,opt,name=mark,proto3" json:"mark,omitempty"`
}

func (x *BaseFile) Reset() {
	*x = BaseFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseFile) ProtoMessage() {}

func (x *BaseFile) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseFile.ProtoReflect.Descriptor instead.
func (*BaseFile) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{48}
}

func (x *BaseFile) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BaseFile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BaseFile) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *BaseFile) GetFileType() int64 {
	if x != nil {
		return x.FileType
	}
	return 0
}

func (x *BaseFile) GetMark() bool {
	if x != nil {
		return x.Mark
	}
	return false
}

type CodeOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"` // javascript
	Element       *Element `protobuf:"bytes,2,opt,name=element,proto3" json:"element,omitempty"`
	OperationType string   `protobuf:"bytes,3,opt,name=operation_type,json=operationType,proto3" json:"operation_type,omitempty"` // element | page
	CodeText      string   `protobuf:"bytes,4,opt,name=code_text,json=codeText,proto3" json:"code_text,omitempty"`
}

func (x *CodeOperation) Reset() {
	*x = CodeOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeOperation) ProtoMessage() {}

func (x *CodeOperation) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeOperation.ProtoReflect.Descriptor instead.
func (*CodeOperation) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{49}
}

func (x *CodeOperation) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CodeOperation) GetElement() *Element {
	if x != nil {
		return x.Element
	}
	return nil
}

func (x *CodeOperation) GetOperationType() string {
	if x != nil {
		return x.OperationType
	}
	return ""
}

func (x *CodeOperation) GetCodeText() string {
	if x != nil {
		return x.CodeText
	}
	return ""
}

var File_services_proto protoreflect.FileDescriptor

var file_services_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0xa9, 0x01, 0x0a, 0x0b, 0x52,
	0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x37, 0x0a,
	0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbb, 0x01, 0x0a, 0x0a, 0x52, 0x75, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x26, 0x0a, 0x0f, 0x73,
	0x63, 0x65, 0x6e, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x08,
	0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65,
	0x72, 0x52, 0x08, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x73,
	0x63, 0x65, 0x6e, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x52, 0x06, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x07, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x69, 0x7a, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x08,
	0x73, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x53, 0x69, 0x7a, 0x65, 0x52, 0x07, 0x73, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x73, 0x0a,
	0x05, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x30, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x22, 0x84, 0x0b, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2a,
	0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x72,
	0x74, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12,
	0x3b, 0x0a, 0x0d, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x52, 0x0c,
	0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x3f, 0x0a, 0x0f,
	0x73, 0x65, 0x74, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x53, 0x65, 0x74, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x0d,
	0x73, 0x65, 0x74, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2b, 0x0a,
	0x07, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x04, 0x62, 0x61,
	0x63, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x04, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x2b,
	0x0a, 0x07, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x52, 0x07, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x3b, 0x0a, 0x0e, 0x6d,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d,
	0x6f, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x52, 0x0d, 0x6d, 0x6f, 0x75, 0x73, 0x65,
	0x43, 0x6c, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x0f, 0x6d, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x6f, 0x75,
	0x73, 0x65, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x52, 0x0e, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x53,
	0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x0e, 0x6d, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x6f, 0x75, 0x73,
	0x65, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x0d, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x4d, 0x6f, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x64, 0x72,
	0x61, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x44, 0x72, 0x61,
	0x67, 0x52, 0x0d, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x44, 0x72, 0x61, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x12, 0x44, 0x0a, 0x10, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x0b, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x0a, 0x77, 0x61, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0c,
	0x69, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x66,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x69, 0x66, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x52, 0x0a, 0x61,
	0x73, 0x73, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x08, 0x66, 0x6f, 0x72,
	0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x4c, 0x6f, 0x6f, 0x70, 0x52, 0x07,
	0x66, 0x6f, 0x72, 0x4c, 0x6f, 0x6f, 0x70, 0x12, 0x32, 0x0a, 0x0a, 0x77, 0x68, 0x69, 0x6c, 0x65,
	0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x57, 0x68, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x6f, 0x70,
	0x52, 0x09, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x6f, 0x70, 0x12, 0x3b, 0x0a, 0x0d, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x30, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x0e, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x73, 0x18, 0x1c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x73, 0x12, 0x3e, 0x0a, 0x0e, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x64, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3c, 0x0a, 0x08, 0x4f, 0x70, 0x65,
	0x6e, 0x50, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x65,
	0x77, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x4e, 0x65, 0x77, 0x50, 0x61, 0x67, 0x65, 0x22, 0x78, 0x0a, 0x09, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0x89, 0x03, 0x0a, 0x0c, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x0a, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a,
	0x0a, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x69,
	0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x65, 0x78, 0x69, 0x74, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x12, 0x4f, 0x0a, 0x15, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x42, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x12,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x42, 0x79, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x52, 0x0a, 0x16, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x6f, 0x5f,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x52, 0x13, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x17, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x42, 0x79,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x14, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x42, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x09, 0x0a,
	0x07, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x22, 0x06, 0x0a, 0x04, 0x42, 0x61, 0x63, 0x6b,
	0x22, 0x09, 0x0a, 0x07, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x22, 0x56, 0x0a, 0x0a, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x22, 0x0b, 0x0a, 0x09, 0x45, 0x78, 0x69, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x22, 0x35, 0x0a, 0x12, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x42,
	0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x15, 0x0a, 0x13, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x22, 0x43,
	0x0a, 0x14, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x42, 0x79, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x54, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65,
	0x52, 0x07, 0x73, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x28, 0x0a, 0x0a, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x01, 0x79, 0x22, 0xa2, 0x01, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f,
	0x65, 0x78, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x77, 0x61, 0x69, 0x74,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x45, 0x78, 0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x11, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68,
	0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x93, 0x06, 0x0a, 0x06, 0x41, 0x73, 0x73,
	0x65, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x12, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x10, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x12, 0x47, 0x0a, 0x11, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x4e, 0x0a,
	0x15, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x35, 0x0a,
	0x0b, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x0f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6e, 0x6f, 0x74,
	0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x4e, 0x6f, 0x74,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x4e, 0x6f, 0x74, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x12, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x50, 0x0a, 0x14, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x1b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x52, 0x19, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x18, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x52, 0x16, 0x70, 0x61, 0x67, 0x65, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xcb,
	0x02, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a,
	0x0e, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0d, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x46, 0x0a, 0x0e, 0x77, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x57, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0d,
	0x77, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x4d, 0x0a,
	0x11, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x62, 0x61, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x63, 0x72, 0x6f,
	0x6c, 0x6c, 0x42, 0x61, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0f, 0x73, 0x63, 0x72,
	0x6f, 0x6c, 0x6c, 0x42, 0x61, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0xa8, 0x01, 0x0a,
	0x15, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x2b,
	0x0a, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x45, 0x0a, 0x15, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x57, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5a,
	0x0a, 0x17, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c,
	0x42, 0x61, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x63, 0x72, 0x6f,
	0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3f, 0x0a, 0x10, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b,
	0x0a, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x2f, 0x0a, 0x0a, 0x54,
	0x65, 0x78, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x65, 0x78, 0x74, 0x73, 0x22, 0x32, 0x0a, 0x0d,
	0x54, 0x65, 0x78, 0x74, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x65, 0x78, 0x74, 0x73,
	0x22, 0x3c, 0x0a, 0x13, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x73,
	0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbe,
	0x01, 0x0a, 0x16, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x92, 0x01, 0x0a, 0x13, 0x50, 0x61, 0x67, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x73,
	0x73, 0x65, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x42, 0x0a, 0x13, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x35, 0x0a, 0x10, 0x41, 0x73, 0x73, 0x65,
	0x72, 0x74, 0x54, 0x65, 0x78, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x65, 0x78, 0x74, 0x73, 0x22,
	0x88, 0x01, 0x0a, 0x11, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x0a, 0x4d,
	0x6f, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a,
	0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0e, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6c,
	0x69, 0x63, 0x6b, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2b, 0x0a, 0x0d, 0x43, 0x6c,
	0x69, 0x63, 0x6b, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x22, 0xcb, 0x01, 0x0a, 0x0b, 0x4d, 0x6f, 0x75, 0x73,
	0x65, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x07, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c,
	0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x34, 0x0a, 0x16, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c,
	0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x14, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x44, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x73, 0x0a, 0x09, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x4d, 0x6f,
	0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x52, 0x0a, 0x15, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x44, 0x72, 0x61, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x73, 0x52, 0x13, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x22, 0xda, 0x01, 0x0a, 0x09, 0x4d,
	0x6f, 0x75, 0x73, 0x65, 0x44, 0x72, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x07,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0e, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x15, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x44, 0x72,
	0x61, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x73, 0x52, 0x13, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x22, 0x32, 0x0a, 0x14, 0x44, 0x72, 0x61, 0x67, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a,
	0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x22, 0xa3, 0x01, 0x0a, 0x0f,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x65,
	0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x69, 0x73, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x22, 0x8c, 0x01, 0x0a, 0x09, 0x57, 0x61, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x2b, 0x0a, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x65, 0x78, 0x74, 0x73,
	0x22, 0x38, 0x0a, 0x07, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x73, 0x0a, 0x07, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0x86, 0x01, 0x0a, 0x0b, 0x49, 0x66, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x09, 0x57, 0x68, 0x69,
	0x6c, 0x65, 0x4c, 0x6f, 0x6f, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x12, 0x4c, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x12, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x90, 0x01, 0x0a,
	0x11, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x52, 0x0a, 0x61,
	0x73, 0x73, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x0a, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x81, 0x01, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29,
	0x0a, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x5d, 0x0a, 0x07, 0x46, 0x6f, 0x72, 0x4c, 0x6f, 0x6f, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x22, 0x71, 0x0a, 0x08, 0x42, 0x61, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x94, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x78, 0x74, 0x32, 0x3e, 0x0a, 0x08,
	0x55, 0x69, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x32, 0x0a, 0x03, 0x52, 0x75, 0x6e, 0x12,
	0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x75, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0b, 0x5a, 0x09,
	0x61, 0x70, 0x69, 0x2f, 0x75, 0x69, 0x3b, 0x75, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_services_proto_rawDescOnce sync.Once
	file_services_proto_rawDescData = file_services_proto_rawDesc
)

func file_services_proto_rawDescGZIP() []byte {
	file_services_proto_rawDescOnce.Do(func() {
		file_services_proto_rawDescData = protoimpl.X.CompressGZIP(file_services_proto_rawDescData)
	})
	return file_services_proto_rawDescData
}

var file_services_proto_msgTypes = make([]protoimpl.MessageInfo, 51)
var file_services_proto_goTypes = []interface{}{
	(*RunResponse)(nil),             // 0: services.RunResponse
	(*RunRequest)(nil),              // 1: services.RunRequest
	(*Browser)(nil),                 // 2: services.Browser
	(*Scene)(nil),                   // 3: services.Scene
	(*Operator)(nil),                // 4: services.Operator
	(*OpenPage)(nil),                // 5: services.OpenPage
	(*ClosePage)(nil),               // 6: services.ClosePage
	(*ToggleWindow)(nil),            // 7: services.ToggleWindow
	(*Forward)(nil),                 // 8: services.Forward
	(*Back)(nil),                    // 9: services.Back
	(*Refresh)(nil),                 // 10: services.Refresh
	(*SwitchPage)(nil),              // 11: services.SwitchPage
	(*ExitFrame)(nil),               // 12: services.ExitFrame
	(*SwitchFrameByIndex)(nil),      // 13: services.SwitchFrameByIndex
	(*SwitchToParentFrame)(nil),     // 14: services.SwitchToParentFrame
	(*SwitchFrameByLocator)(nil),    // 15: services.SwitchFrameByLocator
	(*SetWindowSize)(nil),           // 16: services.SetWindowSize
	(*WindowSize)(nil),              // 17: services.WindowSize
	(*Settings)(nil),                // 18: services.Settings
	(*Assert)(nil),                  // 19: services.Assert
	(*DataWithdraw)(nil),            // 20: services.DataWithdraw
	(*WithdrawElementMethod)(nil),   // 21: services.WithdrawElementMethod
	(*WithdrawWebpageMethod)(nil),   // 22: services.WithdrawWebpageMethod
	(*WithdrawScrollBarMethod)(nil), // 23: services.WithdrawScrollBarMethod
	(*ElementAssertion)(nil),        // 24: services.ElementAssertion
	(*TextExists)(nil),              // 25: services.TextExists
	(*TextNotExists)(nil),           // 26: services.TextNotExists
	(*ExpressionAssertion)(nil),     // 27: services.ExpressionAssertion
	(*ElementAttributeAssert)(nil),  // 28: services.ElementAttributeAssert
	(*PageAttributeAssert)(nil),     // 29: services.PageAttributeAssert
	(*AssertElementExists)(nil),     // 30: services.AssertElementExists
	(*AssertTextExists)(nil),        // 31: services.AssertTextExists
	(*VariableAssertion)(nil),       // 32: services.VariableAssertion
	(*MouseClick)(nil),              // 33: services.MouseClick
	(*ClickPosition)(nil),           // 34: services.ClickPosition
	(*MouseScroll)(nil),             // 35: services.MouseScroll
	(*MouseMove)(nil),               // 36: services.MouseMove
	(*MouseDrag)(nil),               // 37: services.MouseDrag
	(*DragPointCoordinates)(nil),    // 38: services.DragPointCoordinates
	(*InputOperations)(nil),         // 39: services.InputOperations
	(*WaitEvent)(nil),               // 40: services.WaitEvent
	(*Element)(nil),                 // 41: services.Element
	(*Locator)(nil),                 // 42: services.Locator
	(*IfCondition)(nil),             // 43: services.IfCondition
	(*WhileLoop)(nil),               // 44: services.WhileLoop
	(*ConditionOperator)(nil),       // 45: services.ConditionOperator
	(*Expression)(nil),              // 46: services.Expression
	(*ForLoop)(nil),                 // 47: services.ForLoop
	(*BaseFile)(nil),                // 48: services.BaseFile
	(*CodeOperation)(nil),           // 49: services.CodeOperation
	nil,                             // 50: services.RunResponse.DataEntry
}
var file_services_proto_depIdxs = []int32{
	50, // 0: services.RunResponse.data:type_name -> services.RunResponse.DataEntry
	2,  // 1: services.RunRequest.browsers:type_name -> services.Browser
	3,  // 2: services.RunRequest.scenes:type_name -> services.Scene
	17, // 3: services.Browser.set_size:type_name -> services.WindowSize
	4,  // 4: services.Scene.operators:type_name -> services.Operator
	18, // 5: services.Operator.settings:type_name -> services.Settings
	19, // 6: services.Operator.asserts:type_name -> services.Assert
	5,  // 7: services.Operator.open_page:type_name -> services.OpenPage
	6,  // 8: services.Operator.close_page:type_name -> services.ClosePage
	7,  // 9: services.Operator.toggle_window:type_name -> services.ToggleWindow
	16, // 10: services.Operator.set_window_size:type_name -> services.SetWindowSize
	8,  // 11: services.Operator.forward:type_name -> services.Forward
	9,  // 12: services.Operator.back:type_name -> services.Back
	10, // 13: services.Operator.refresh:type_name -> services.Refresh
	33, // 14: services.Operator.mouse_clicking:type_name -> services.MouseClick
	35, // 15: services.Operator.mouse_scrolling:type_name -> services.MouseScroll
	36, // 16: services.Operator.mouse_movement:type_name -> services.MouseMove
	37, // 17: services.Operator.mouse_dragging:type_name -> services.MouseDrag
	39, // 18: services.Operator.input_operations:type_name -> services.InputOperations
	40, // 19: services.Operator.wait_events:type_name -> services.WaitEvent
	43, // 20: services.Operator.if_condition:type_name -> services.IfCondition
	19, // 21: services.Operator.assert_info:type_name -> services.Assert
	47, // 22: services.Operator.for_loop:type_name -> services.ForLoop
	44, // 23: services.Operator.while_loop:type_name -> services.WhileLoop
	20, // 24: services.Operator.data_withdraw:type_name -> services.DataWithdraw
	4,  // 25: services.Operator.operators:type_name -> services.Operator
	20, // 26: services.Operator.data_withdraws:type_name -> services.DataWithdraw
	49, // 27: services.Operator.code_operation:type_name -> services.CodeOperation
	11, // 28: services.ToggleWindow.switch_page:type_name -> services.SwitchPage
	12, // 29: services.ToggleWindow.exit_frame:type_name -> services.ExitFrame
	13, // 30: services.ToggleWindow.switch_frame_by_index:type_name -> services.SwitchFrameByIndex
	14, // 31: services.ToggleWindow.switch_to_parent_frame:type_name -> services.SwitchToParentFrame
	15, // 32: services.ToggleWindow.switch_frame_by_locator:type_name -> services.SwitchFrameByLocator
	41, // 33: services.SwitchFrameByLocator.element:type_name -> services.Element
	17, // 34: services.SetWindowSize.set_size:type_name -> services.WindowSize
	24, // 35: services.Assert.element_exists:type_name -> services.ElementAssertion
	24, // 36: services.Assert.element_not_exists:type_name -> services.ElementAssertion
	24, // 37: services.Assert.element_displayed:type_name -> services.ElementAssertion
	24, // 38: services.Assert.element_not_displayed:type_name -> services.ElementAssertion
	25, // 39: services.Assert.text_exists:type_name -> services.TextExists
	26, // 40: services.Assert.text_not_exists:type_name -> services.TextNotExists
	32, // 41: services.Assert.variable_assertion:type_name -> services.VariableAssertion
	27, // 42: services.Assert.expression_assertion:type_name -> services.ExpressionAssertion
	28, // 43: services.Assert.element_attribute_assertion:type_name -> services.ElementAttributeAssert
	29, // 44: services.Assert.page_attribute_assertion:type_name -> services.PageAttributeAssert
	21, // 45: services.DataWithdraw.element_method:type_name -> services.WithdrawElementMethod
	22, // 46: services.DataWithdraw.webpage_method:type_name -> services.WithdrawWebpageMethod
	23, // 47: services.DataWithdraw.scroll_bar_method:type_name -> services.WithdrawScrollBarMethod
	41, // 48: services.WithdrawElementMethod.element:type_name -> services.Element
	41, // 49: services.ElementAssertion.element:type_name -> services.Element
	41, // 50: services.ElementAttributeAssert.element:type_name -> services.Element
	41, // 51: services.AssertElementExists.element:type_name -> services.Element
	41, // 52: services.MouseClick.element:type_name -> services.Element
	34, // 53: services.MouseClick.click_position:type_name -> services.ClickPosition
	41, // 54: services.MouseScroll.element:type_name -> services.Element
	38, // 55: services.MouseMove.end_point_coordinates:type_name -> services.DragPointCoordinates
	41, // 56: services.MouseDrag.element:type_name -> services.Element
	41, // 57: services.MouseDrag.target_element:type_name -> services.Element
	38, // 58: services.MouseDrag.end_point_coordinates:type_name -> services.DragPointCoordinates
	41, // 59: services.InputOperations.element:type_name -> services.Element
	41, // 60: services.WaitEvent.element:type_name -> services.Element
	42, // 61: services.Element.locators:type_name -> services.Locator
	45, // 62: services.IfCondition.condition_operators:type_name -> services.ConditionOperator
	45, // 63: services.WhileLoop.condition_operators:type_name -> services.ConditionOperator
	19, // 64: services.ConditionOperator.assert_info:type_name -> services.Assert
	46, // 65: services.ConditionOperator.expression:type_name -> services.Expression
	48, // 66: services.ForLoop.files:type_name -> services.BaseFile
	41, // 67: services.CodeOperation.element:type_name -> services.Element
	1,  // 68: services.UiEngine.Run:input_type -> services.RunRequest
	0,  // 69: services.UiEngine.Run:output_type -> services.RunResponse
	69, // [69:70] is the sub-list for method output_type
	68, // [68:69] is the sub-list for method input_type
	68, // [68:68] is the sub-list for extension type_name
	68, // [68:68] is the sub-list for extension extendee
	0,  // [0:68] is the sub-list for field type_name
}

func init() { file_services_proto_init() }
func file_services_proto_init() {
	if File_services_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_services_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Browser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scene); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClosePage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToggleWindow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Forward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Back); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Refresh); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExitFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchFrameByIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchToParentFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchFrameByLocator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetWindowSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Settings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Assert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataWithdraw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawElementMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawWebpageMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawScrollBarMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementAssertion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextExists); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextNotExists); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpressionAssertion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementAttributeAssert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageAttributeAssert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssertElementExists); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssertTextExists); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableAssertion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MouseClick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MouseScroll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MouseMove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MouseDrag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DragPointCoordinates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputOperations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Element); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Locator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IfCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WhileLoop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForLoop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_services_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   51,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_services_proto_goTypes,
		DependencyIndexes: file_services_proto_depIdxs,
		MessageInfos:      file_services_proto_msgTypes,
	}.Build()
	File_services_proto = out.File
	file_services_proto_rawDesc = nil
	file_services_proto_goTypes = nil
	file_services_proto_depIdxs = nil
}
